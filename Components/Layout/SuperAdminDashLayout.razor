@inherits LayoutComponentBase
@implements IDisposable

@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> UserManager

@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using c2_eskolar.Components.UI

@rendermode InteractiveServer

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>SuperAdmin Dashboard - eSkolar</title>
    <base href="~/" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <HeadOutlet @rendermode="InteractiveServer" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .superadmin-sidebar {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            box-shadow: 2px 0 10px rgba(0,0,0,0.1);
        }
        .sidebar-nav .nav-link {
            color: rgba(255,255,255,0.8);
            border-radius: 8px;
            margin: 4px 8px;
            transition: all 0.3s ease;
        }
        .sidebar-nav .nav-link:hover {
            background: rgba(255,255,255,0.2);
            color: white;
            transform: translateX(5px);
        }
        .sidebar-nav .nav-link.active {
            background: rgba(255,255,255,0.3);
            color: white;
            font-weight: 600;
        }
        .main-content {
            background: #f8f9fa;
            min-height: 100vh;
        }
        .navbar-superadmin {
            background: white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .user-avatar {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="container-fluid p-0">
        <div class="row g-0">
            <!-- Sidebar -->
            <div class="col-md-3 col-lg-2 superadmin-sidebar">
                <div class="p-4">
                    <div class="text-center mb-4">
                        <a href="/dashboard/superadmin">
                            <img src="/images/eSkolarLight.svg" alt="eSkolar" style="height: 40px;" class="mb-2">
                        </a>
                        <h5 class="text-white mb-0">SuperAdmin</h5>
                        <small class="text-white-50">System Control</small>
                    </div>
                    
                    <div class="user-info mb-4 p-3 rounded" style="background: rgba(255,255,255,0.1);">
                        <div class="d-flex align-items-center">
                            <div class="user-avatar me-3">
                                <i class="fas fa-crown"></i>
                            </div>
                            <div>
                                <div class="text-white fw-bold">@currentUserName</div>
                                <small class="text-white-50">@currentUserEmail</small>
                            </div>
                        </div>
                    </div>

                    <nav class="sidebar-nav">
                        <ul class="nav flex-column">
                            <li class="nav-item">
                                <a class="nav-link @(IsActiveRoute("/dashboard/superadmin"))" href="/dashboard/superadmin">
                                    <i class="fas fa-tachometer-alt me-2"></i>
                                    Dashboard
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link @(IsActiveRoute("/admin/webscraping"))" href="/admin/webscraping">
                                    <i class="fas fa-spider me-2"></i>
                                    Web Scraping
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link @(IsActiveRoute("/demo/scraping"))" href="/demo/scraping">
                                    <i class="fas fa-flask me-2"></i>
                                    Scraping Demo
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link @(IsActiveRoute("/admin/users"))" href="/admin/users">
                                    <i class="fas fa-users me-2"></i>
                                    User Management
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link @(IsActiveRoute("/admin/scholarships"))" href="/admin/scholarships">
                                    <i class="fas fa-graduation-cap me-2"></i>
                                    Scholarships
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link @(IsActiveRoute("/admin/system"))" href="/admin/system">
                                    <i class="fas fa-cogs me-2"></i>
                                    System Settings
                                </a>
                            </li>
                            <li class="nav-item mt-3">
                                <hr style="border-color: rgba(255,255,255,0.2);">
                                <a class="nav-link text-warning" href="#" @onclick="() => ShowLogoutModal()">
                                    <i class="fas fa-sign-out-alt me-2"></i>
                                    Logout
                                </a>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>

            <!-- Main Content -->
            <div class="col-md-9 col-lg-10 main-content">
                <!-- Top Navigation -->
                <nav class="navbar navbar-expand-lg navbar-superadmin px-4 py-3">
                    <div class="d-flex justify-content-between w-100">
                        <div>
                            <h4 class="mb-0 text-dark">@GetPageTitle()</h4>
                            <small class="text-muted">@GetPageSubtitle()</small>
                        </div>
                        <div class="d-flex align-items-center">
                            <span class="badge bg-success me-3">
                                <i class="fas fa-circle me-1"></i>
                                System Active
                            </span>
                            <div class="dropdown">
                                <button class="btn btn-outline-primary btn-sm" type="button" data-bs-toggle="dropdown">
                                    <i class="fas fa-bell me-1"></i>
                                    Notifications
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    <li><a class="dropdown-item" href="#"><i class="fas fa-info-circle me-2"></i>System running normally</a></li>
                                    <li><a class="dropdown-item" href="#"><i class="fas fa-spider me-2"></i>Web scraping active</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </nav>

                <!-- Page Content -->
                <div class="p-4">
                    @Body
                </div>
            </div>
        </div>
    </div>

<!-- Logout Confirmation Modal -->
<div class="modal fade" id="logoutModal" tabindex="-1" aria-labelledby="logoutModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow">
            <div class="modal-header border-0 pb-0">
                <h5 class="modal-title fw-bold text-dark" id="logoutModalLabel">
                    <i class="fa fa-sign-out-alt me-2 text-primary"></i>Confirm Logout
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body pt-2">
                <p class="text-muted mb-0">Are you sure you want to logout from your account?</p>
            </div>
            <div class="modal-footer border-0 pt-2">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="LogOut" data-bs-dismiss="modal">
                    <i class="fa fa-sign-out-alt me-1"></i>Logout
                </button>
            </div>
        </div>
    </div>
</div>

    <div id="blazor-error-ui">
        An unhandled error has occurred.
        <a href="" class="reload">Reload</a>
        <a class="dismiss">ðŸ—™</a>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="_framework/blazor.web.js"></script>
</body>
</html>

@code {
    private string currentUserName = "Loading...";
    private string currentUserEmail = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadUserInfo();
    }

    private async Task LoadUserInfo()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                var identityUser = await UserManager.GetUserAsync(user);
                if (identityUser != null)
                {
                    currentUserEmail = identityUser.Email ?? "";
                    currentUserName = identityUser.Email?.Split('@')[0] ?? "SuperAdmin";
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user info: {ex.Message}");
            currentUserName = "SuperAdmin";
        }
    }

    private string IsActiveRoute(string route)
    {
        var currentUrl = Navigation.ToBaseRelativePath(Navigation.Uri);
        return currentUrl.StartsWith(route.TrimStart('/'), StringComparison.OrdinalIgnoreCase) ? "active" : "";
    }

    private string GetPageTitle()
    {
        var currentUrl = Navigation.ToBaseRelativePath(Navigation.Uri);
        return currentUrl switch
        {
            "dashboard/superadmin" => "SuperAdmin Dashboard",
            "admin/webscraping" => "Web Scraping Management",
            "demo/scraping" => "Scraping Demo",
            "admin/users" => "User Management",
            "admin/scholarships" => "Scholarship Management",
            "admin/system" => "System Settings",
            _ => "SuperAdmin Panel"
        };
    }

    private string GetPageSubtitle()
    {
        var currentUrl = Navigation.ToBaseRelativePath(Navigation.Uri);
        return currentUrl switch
        {
            "dashboard/superadmin" => "System overview and statistics",
            "admin/webscraping" => "Configure and monitor web scraping operations",
            "demo/scraping" => "Test scraping functionality with real websites",
            "admin/users" => "Manage system users and permissions",
            "admin/scholarships" => "Oversee scholarship listings and applications",
            "admin/system" => "Configure system settings and maintenance",
            _ => "Administrative functions and system control"
        };
    }

    private void LogOut()
    {
        try
        {
            Navigation.NavigateTo("/api/auth/logout", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logout error: {ex.Message}");
        }
    }

    private async Task ShowLogoutModal()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('logoutModal')).show()");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Modal error: {ex.Message}");
            // Fallback to direct logout if modal fails
            LogOut();
        }
    }

    public void Dispose()
    {
        // Cleanup if needed
    }
}