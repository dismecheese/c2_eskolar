@inherits LayoutComponentBase
@implements IDisposable

@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> UserManager
@inject IJSRuntime JSRuntime

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.JSInterop
@using c2_eskolar.Components.UI

@rendermode InteractiveServer

<div class="superadmin-layout">
    <div class="container-fluid p-0">
        <div class="row g-0">
            <!-- Sidebar -->
            <div class="col-md-3 col-lg-2 superadmin-sidebar">
                <div class="p-4">
                    <div class="text-center mb-4">
                        <a href="/dashboard/superadmin">
                            <img src="/images/eSkolarLight.svg" alt="eSkolar" style="height: 40px;" class="mb-2">
                        </a>
                        <h5 class="text-white mb-0">SuperAdmin</h5>
                        <small class="text-white-50">System Control</small>
                    </div>
                    
                    <div class="user-info mb-4 p-3 rounded" style="background: rgba(255,255,255,0.1);">
                        <div class="d-flex align-items-center">
                            <div class="user-avatar me-3">
                                <i class="fas fa-crown"></i>
                            </div>
                            <div>
                                <div class="text-white fw-bold">@currentUserName</div>
                                <small class="text-white-50">@currentUserEmail</small>
                            </div>
                        </div>
                    </div>

                    <nav class="sidebar-nav">
                        <ul class="nav flex-column">
                            <li class="nav-item">
                                <a class="nav-link @(IsActiveRoute("/dashboard/superadmin"))" href="/dashboard/superadmin">
                                    <i class="fas fa-tachometer-alt me-2"></i>
                                    Dashboard
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link @(IsActiveRoute("/admin/webscraping"))" href="/admin/webscraping">
                                    <i class="fas fa-spider me-2"></i>
                                    Web Scraping
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link @(IsActiveRoute("/demo/scraping"))" href="/demo/scraping">
                                    <i class="fas fa-flask me-2"></i>
                                    Scraping Demo
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link @(IsActiveRoute("/admin/users"))" href="/admin/users">
                                    <i class="fas fa-users me-2"></i>
                                    User Management
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link @(IsActiveRoute("/admin/scholarships"))" href="/admin/scholarships">
                                    <i class="fas fa-graduation-cap me-2"></i>
                                    Scholarships
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link @(IsActiveRoute("/admin/system"))" href="/admin/system">
                                    <i class="fas fa-cogs me-2"></i>
                                    System Settings
                                </a>
                            </li>
                            <li class="nav-item mt-3">
                                <hr style="border-color: rgba(255,255,255,0.2);">
                                <a class="nav-link text-warning" href="#" @onclick="() => ShowLogoutModal()">
                                    <i class="fas fa-sign-out-alt me-2"></i>
                                    Logout
                                </a>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>

            <!-- Help Box Button -->
            <button class="help-box-bottom" @onclick="OpenChatbot" type="button">
                <div class="help-box-content">
                    <img src="images/NeedHelp.svg" alt="Help" class="help-box-img" />
                    <div class="help-box-text">
                        <div class="help-box-title">Need help?</div>
                        <div class="help-box-desc">Having trouble using eSkolar?<br />We're here to assist you!</div>
                    </div>
                </div>
            </button>
        </nav>

        <!-- --- PROFILE SIDEBAR (Bootstrap Offcanvas) --- -->
        <button class="dashboard-profile-absolute mt-3" type="button" data-bs-toggle="offcanvas" data-bs-target="#rightSidebar" aria-controls="rightSidebar">
            <svg width="32" height="32" fill="none" viewBox="0 0 24 24">
                <circle cx="12" cy="8" r="4" stroke="#222" stroke-width="2"/>
                <circle cx="12" cy="12" r="11" stroke="#222" stroke-width="2"/>
                <path d="M4 20c1.5-3 5.5-5 8-5s6.5 2 8 5" stroke="#222" stroke-width="2"/>
            </svg>
        </button>

        <!-- Profile Sidebar Content -->
        <div class="offcanvas offcanvas-end" tabindex="-1" id="rightSidebar" aria-labelledby="rightSidebarLabel" data-bs-backdrop="false">
            <div class="offcanvas-header">
                <h5 class="offcanvas-title" id="rightSidebarLabel">SuperAdmin Profile</h5>
                <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
            </div>

            <div class="offcanvas-body">
                <!-- Sidebar Profile Section -->
                <div class="sidebar-profile">
                    <div class="user-avatar-large">
                        <i class="fas fa-crown" style="font-size: 2rem; color: #FFD700;"></i>
                    </div>
                    <div class="sidebar-profile-name">@currentUserName</div>
                    <div class="sidebar-profile-role">SuperAdmin</div>
                    <div class="sidebar-profile-email">@currentUserEmail</div>
                </div>
                </div>
                
                <!-- System Status -->
                <div class="sidebar-calendar">
                    <div style="background: #fff; padding: 20px; border-radius: 12px; margin: 0 0 18px 0; box-shadow: 0 2px 8px rgba(0,0,0,0.06); text-align: center;">
                        <h6 style="margin-bottom: 10px; color: #333;">System Status</h6>
                        <div style="color: #28a745; font-weight: 600;">
                            <i class="fas fa-circle" style="font-size: 8px; margin-right: 5px;"></i>
                            All Systems Operational
                        </div>
                    </div>
                </div>

                <!-- Quick Actions -->
                <div class="sidebar-notifications">
                    <div class="sidebar-notifications-header">
                        Quick Actions
                    </div>
                    <div class="sidebar-notification-list">
                        <div class="sidebar-notification">
                            <div class="sidebar-notification-title">Web Scraping</div>
                            <div class="sidebar-notification-desc">Monitor and manage scraping operations</div>
                        </div>
                        <div class="sidebar-notification">
                            <div class="sidebar-notification-title">User Management</div>
                            <div class="sidebar-notification-desc">Manage system users and permissions</div>
                        </div>
                        <div class="sidebar-notification">
                            <div class="sidebar-notification-title">System Settings</div>
                            <div class="sidebar-notification-desc">Configure system parameters</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- --- MAIN CONTENT AREA --- -->
        <main class="main-content" style="flex:1; min-width:0; background: #f5f6fa;">
            @Body
        </main>

        @if (ShowChatbot)
        {
            <ChatBot CloseChatbot="CloseChatbot" MinimizeChatbot="MinimizeChatbot" />
        }
    </div>

<!-- Logout Confirmation Modal -->
<div class="modal fade" id="logoutModal" tabindex="-1" aria-labelledby="logoutModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
<<<<<<< HEAD
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title text-danger" id="logoutModalLabel">
                    <i class="fas fa-sign-out-alt me-2"></i>
                    Confirm Logout
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center py-4">
                <i class="fas fa-exclamation-triangle text-warning mb-3" style="font-size: 3rem;"></i>
                <h6>Are you sure you want to logout?</h6>
                <p class="text-muted mb-0">You will be redirected to the login page.</p>
            </div>
            <div class="modal-footer border-0 justify-content-center">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Cancel
                </button>
                <button type="button" class="btn btn-danger" @onclick="LogOut" data-bs-dismiss="modal">
                    <i class="fas fa-sign-out-alt me-2"></i>Yes, Logout
                </button>
            </div>
        </div>
=======
        <div class="modal-content border-0 shadow">
            <div class="modal-header border-0 pb-0">
                <h5 class="modal-title fw-bold text-dark" id="logoutModalLabel">
                    <i class="fa fa-sign-out-alt me-2 text-primary"></i>Confirm Logout
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body pt-2">
                <p class="text-muted mb-0">Are you sure you want to logout from your account?</p>
            </div>
            <div class="modal-footer border-0 pt-2">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="LogOut" data-bs-dismiss="modal">
                    <i class="fa fa-sign-out-alt me-1"></i>Logout
                </button>
            </div>
        </div>
    </div>
</div>

    <div id="blazor-error-ui">
        An unhandled error has occurred.
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
>>>>>>> b5fa8f877685eb2acd7431b8d28dde22af7a8e5d
    </div>
</div>

<style>
    .user-avatar-large {
        width: 80px;
        height: 80px;
        background: linear-gradient(135deg, #1560d4, #0d387e);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 15px auto;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
    
    .sidebar-profile-email {
        font-size: 0.9rem;
        color: #666;
        margin-bottom: 15px;
        text-align: center;
    }
    
    .logout-link:hover {
        background: rgba(255,255,255,0.1) !important;
        color: rgba(255,255,255,1) !important;
        transform: translateX(4px);
    }

    .logout-link:active {
        background: rgba(255,255,255,0.15) !important;
    }
</style>

@code {
    private string currentUserName = "Loading...";
    private string currentUserEmail = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadUserInfo();
    }

    private async Task LoadUserInfo()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                var identityUser = await UserManager.GetUserAsync(user);
                if (identityUser != null)
                {
                    currentUserEmail = identityUser.Email ?? "";
                    currentUserName = identityUser.Email?.Split('@')[0] ?? "SuperAdmin";
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user info: {ex.Message}");
            currentUserName = "SuperAdmin";
        }
    }

    private string GetSidebarLinkClass(string href)
    {
        var currentPath = Navigation.ToBaseRelativePath(Navigation.Uri).Split('?')[0].TrimEnd('/');
        var linkPath = href.TrimStart('/').TrimEnd('/');
        
        // Exact match
        if (currentPath == linkPath)
            return "nav-link d-flex align-items-center gap-2 sidebar-link active";
            
        return "nav-link d-flex align-items-center gap-2 sidebar-link";
    }

    private string GetPageTitle()
    {
        var currentUrl = Navigation.ToBaseRelativePath(Navigation.Uri);
        return currentUrl switch
        {
            "dashboard/superadmin" => "SuperAdmin Dashboard",
            "admin/webscraping" => "Web Scraping Management",
            "demo/scraping" => "Scraping Demo",
            "admin/users" => "User Management",
            "admin/scholarship-management" => "Scholarship Management",
            "admin/scholarships" => "Scholarship Management",
            "admin/system" => "System Settings",
            _ => "SuperAdmin Panel"
        };
    }

    private string GetPageSubtitle()
    {
        var currentUrl = Navigation.ToBaseRelativePath(Navigation.Uri);
        return currentUrl switch
        {
            "dashboard/superadmin" => "System overview and statistics",
            "admin/webscraping" => "Configure and monitor web scraping operations",
            "demo/scraping" => "Test scraping functionality with real websites",
            "admin/users" => "Manage system users and permissions",
            "admin/scholarship-management" => "AI-curated scholarship management with EskoBot Intelligence",
            "admin/scholarships" => "Oversee scholarship listings and applications",
            "admin/system" => "Configure system settings and maintenance",
            _ => "Administrative functions and system control"
        };
    }

    private void LogOut()
    {
        try
        {
            Navigation.NavigateTo("/api/auth/logout", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logout error: {ex.Message}");
        }
    }

    private async Task ShowLogoutModal()
    {
        try
        {
<<<<<<< HEAD
            await JSRuntime.InvokeVoidAsync("eval", @"
                if (typeof bootstrap !== 'undefined' && bootstrap.Modal) {
                    const modal = new bootstrap.Modal(document.getElementById('logoutModal'));
                    modal.show();
                } else {
                    console.error('Bootstrap not loaded');
                }
            ");
=======
            await JSRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('logoutModal')).show()");
>>>>>>> b5fa8f877685eb2acd7431b8d28dde22af7a8e5d
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Modal error: {ex.Message}");
            // Fallback to direct logout if modal fails
            LogOut();
        }
    }

<<<<<<< HEAD
    // --- CHATBOT STATE ---
    private bool ShowChatbot = false;
    private void OpenChatbot() => ShowChatbot = true;
    private void CloseChatbot() => ShowChatbot = false;
    private void MinimizeChatbot() => ShowChatbot = false;

=======
>>>>>>> b5fa8f877685eb2acd7431b8d28dde22af7a8e5d
    public void Dispose()
    {
        // Cleanup if needed
    }
}