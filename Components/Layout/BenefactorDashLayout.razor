@inherits LayoutComponentBase
@implements IDisposable
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> UserManager
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using c2_eskolar.Components.UI
@rendermode InteractiveServer

@code {
    
    // Stores the display name of the currently signed in user
    private string currentUserName = "Loading...";
    
    // Stores the email of the currently signed in user
    private string currentUserEmail = "";

    private DateTime currentMonth = new(DateTime.Now.Year, DateTime.Now.Month, 1);

    // Lifecycle method called when the component is initialized
    protected override async Task OnInitializedAsync()
    {
        Navigation.LocationChanged += OnLocationChanged;
        await LoadCurrentUser();
    }

    // Loads the current user's information
    private async Task LoadCurrentUser()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                // Get the email from claims
                currentUserEmail = user.Identity.Name ?? "";
                
                // Get the IdentityUser to access more details
                var identityUser = await UserManager.FindByEmailAsync(currentUserEmail);
                
                if (identityUser != null)
                {
                    // Try to get display name from claims first, fallback to email
                    currentUserName = user.FindFirst("DisplayName")?.Value 
                                    ?? user.FindFirst("Name")?.Value 
                                    ?? identityUser.UserName 
                                    ?? currentUserEmail.Split('@')[0]; // Use email prefix as fallback
                }
                else
                {
                    currentUserName = currentUserEmail.Split('@')[0];
                }
            }
            else
            {
                // Set default values for unauthenticated users
                currentUserName = "Guest User";
                currentUserEmail = "";
            }
        }
        catch (Exception ex)
        {
            // Log any errors during user loading
            Console.WriteLine($"Error loading user: {ex.Message}");
            currentUserName = "User";
            currentUserEmail = "";
        }
        
        StateHasChanged();
    }

    // Event handler: invokes StateHasChanged to re-render the component whenever the URL changes
    // Ensures that the sidebar link highlighting is updated
    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    // Lifecycle method: called when the component is removed from the UI
    // Disposes of the component by unsubscribing from the Navigation.LocationChanged event to prevent memory leaks
    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }

     // Determines the CSS class for a sidebar navigation link based on the current URL.
    private string GetSidebarLinkClass(string href)
    {
        var currentPath = Navigation.ToBaseRelativePath(Navigation.Uri).Split('?')[0].TrimEnd('/');
        var linkPath = href.TrimStart('/').TrimEnd('/');
        
        // Debug logging for development purposes
        Console.WriteLine($"[DEBUG] Current path: '{currentPath}', Link path: '{linkPath}'");
        
        // Exact match
        if (currentPath == linkPath)
        {
            Console.WriteLine($"[DEBUG] MATCH! Applying active class to: {href}");
            return "nav-link d-flex align-items-center gap-2 sidebar-link active";
        }
            
        return "nav-link d-flex align-items-center gap-2 sidebar-link";
    }

    private void NavigateToBenefactorProfile()
    {
        Navigation.NavigateTo("/dashboard/benefactor/profile");
    }

    private void CloseSidebar()
    {
        // Close the offcanvas sidebar programmatically
        StateHasChanged();
    }

    private bool ShowChatbot = false;
    private string UserInput = "";
    private List<ChatMessage> Messages = new();

    private void OpenChatbot()
    {
        ShowChatbot = true;
        StateHasChanged();
    }

    private void CloseChatbot()
    {
        ShowChatbot = false;
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(UserInput)) return;
        Messages.Add(new ChatMessage { Text = UserInput, IsUser = true });
        var userMessage = UserInput;
        UserInput = "";
        StateHasChanged();

        // TODO: UNCOMMENT WHEN BACKEND AI API IS READY
        /*
        try
        {
            var apiResponse = await CallAIBackend(userMessage);
            Messages.Add(new ChatMessage { Text = apiResponse, IsUser = false });
        }
        catch (Exception ex)
        {
            Messages.Add(new ChatMessage { Text = "Sorry, I'm having trouble connecting right now. Please try again later.", IsUser = false });
            // Log error: Console.WriteLine($"AI API Error: {ex.Message}");
        }
        */

        // --- FRONTEND-ONLY MOCK REPLY (REMOVE WHEN BACKEND IS READY) ---
        await Task.Delay(1000); // Simulate thinking time
        
        var userMessageLower = userMessage.ToLower();
        string response = userMessageLower switch
        {
            var msg when msg.Contains("scholarship") => "I can help you manage institutional scholarships! You can create new scholarships, review applications, or manage existing programs. What would you like to do?",
            var msg when msg.Contains("application") || msg.Contains("apply") => "You can review scholarship applications in your dashboard. Check pending applications, review submitted documents, and manage the selection process.",
            var msg when msg.Contains("help") || msg.Contains("how") => "I'm here to help with your institutional dashboard! I can assist with scholarship management, application reviews, announcements, and platform navigation.",
            var msg when msg.Contains("account") || msg.Contains("profile") => "You can update your institution profile by clicking the profile icon. Make sure your institution information is complete and verified.",
            var msg when msg.Contains("announcement") => "You can create and manage announcements from your dashboard. Keep students informed about new scholarships, deadlines, and important updates.",
            _ => "I understand you're asking about: \"" + userMessage + "\". I can help with scholarship management, application reviews, announcements, and institutional settings. Could you be more specific?"
        };
        
        Messages.Add(new ChatMessage { Text = response, IsUser = false });
        StateHasChanged();
    }

    // TODO: UNCOMMENT AND IMPLEMENT WHEN BACKEND AI API IS READY
    /*
    private async Task<string> CallAIBackend(string userMessage)
    {
        using var client = new HttpClient();
        var requestBody = new
        {
            message = userMessage,
            context = "eSkolar institutional dashboard assistant"
        };
        
        var json = System.Text.Json.JsonSerializer.Serialize(requestBody);
        var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
        
        // Replace with your actual AI API endpoint
        var response = await client.PostAsync("https://your-api-endpoint.com/ai/chat", content);
        response.EnsureSuccessStatusCode();
        
        var responseJson = await response.Content.ReadAsStringAsync();
        var apiResponse = System.Text.Json.JsonSerializer.Deserialize<dynamic>(responseJson);
        
        return apiResponse.response ?? "I'm having trouble processing your request right now.";
    }
    */

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    public class ChatMessage
    {
        public string Text { get; set; } = "";
        public bool IsUser { get; set; }
    }
}
<div class="d-flex min-vh-100">
    <!-- Sidebar -->
    <nav class="sidebar d-flex flex-column justify-content-between"
         style="width: 260px; background: linear-gradient(180deg, #1560d4 0%, #0d387e 100%); padding: 2rem 1.5rem 1rem 1.5rem;">
        <div>
            <!-- Logo -->
            <div class="sidebar-brand-container text-center">
                <a class="eskolar-logo" href="/"></a>
                <div class="eskolar-brand">eSkolar</div>
            </div>
            <!-- Navigation Links -->
            <ul class="nav flex-column gap-1">
                <li class="nav-item">
                    <a href="/dashboard/benefactor" class="@GetSidebarLinkClass("/dashboard/benefactor")">
                        <i class="fa fa-home"></i> Dashboard
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/dashboard/benefactor/scholarships" class="@GetSidebarLinkClass("/dashboard/benefactor/scholarships")">
                        <i class="fa fa-graduation-cap"></i> Scholarships
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/dashboard/benefactor/announcements" class="@GetSidebarLinkClass("/dashboard/benefactor/announcements")">
                        <i class="fa fa-bullhorn"></i> Announcements
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/dashboard/benefactor/partners" class="@GetSidebarLinkClass("/dashboard/benefactor/partners")">
                        <i class="fa fa-handshake"></i> Partners
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/dashboard/benefactor/bookmarks" class="@GetSidebarLinkClass("/dashboard/benefactor/bookmarks")">
                        <i class="fa fa-star"></i> Bookmarks
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/dashboard/benefactor/about" class="@GetSidebarLinkClass("/dashboard/benefactor/about")">
                        <i class="fa fa-info-circle"></i> About
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/dashboard/benefactor/settings" class="@GetSidebarLinkClass("/dashboard/benefactor/settings")">
                        <i class="fa fa-cog"></i> Settings
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/dashboard/benefactor/faqs" class="@GetSidebarLinkClass("/dashboard/benefactor/faqs")">
                        <i class="fa fa-question-circle"></i> FAQs
                    </a>
                </li>
            </ul>
        </div>
        <!-- Help Box -->
        <button class="help-box-bottom" type="button" @onclick="OpenChatbot">
            <div class="help-box-content">
                <img src="images/NeedHelp.svg" alt="Help" class="help-box-img" />
                <div class="help-box-text">
                    <div class="help-box-title">Need help?</div>
                    <div class="help-box-desc">Having trouble using eSkolar?<br />We're here to assist you!</div>
                </div>
            </div>
        </button>
    </nav>
    <!-- Profile Icon Button (top right) -->
<button class="dashboard-profile-absolute mt-5" type="button" data-bs-toggle="offcanvas" data-bs-target="#rightSidebar" aria-controls="rightSidebar">
    <svg width="32" height="32" fill="none" viewBox="0 0 24 24">
        <circle cx="12" cy="8" r="4" stroke="#222" stroke-width="2"/>
        <circle cx="12" cy="12" r="11" stroke="#222" stroke-width="2"/>
        <path d="M4 20c1.5-3 5.5-5 8-5s6.5 2 8 5" stroke="#222" stroke-width="2"/>
    </svg>
</button>

<!-- Bootstrap Offcanvas Sidebar -->
<div class="offcanvas offcanvas-end" tabindex="-1" id="rightSidebar" aria-labelledby="rightSidebarLabel" data-bs-backdrop="false">
  <div class="offcanvas-header">
    <h5 class="offcanvas-title" id="rightSidebarLabel">Profile</h5>
    <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
  </div>
  <div class="offcanvas-body">
    <!-- Sidebar content here -->
    <div class="sidebar-profile">
        <svg width="32" height="32" fill="none" viewBox="0 0 24 24">
            <circle cx="12" cy="8" r="4" stroke="#222" stroke-width="2"/>
            <circle cx="12" cy="12" r="11" stroke="#222" stroke-width="2"/>
            <path d="M4 20c1.5-3 5.5-5 8-5s6.5 2 8 5" stroke="#222" stroke-width="2"/>
        </svg>
        <div class="sidebar-profile-name">Marzella Capin</div>
        <div class="sidebar-profile-role">Student</div>
        <button class="sidebar-profile-btn" @onclick="NavigateToBenefactorProfile" data-bs-dismiss="offcanvas">Profile</button>
    </div>
        
    <div class="sidebar-calendar">
        <DashboardCalendar CurrentMonth="@currentMonth" CurrentMonthChanged="@(m => currentMonth = m)" />
    </div>

    </div>
    <div class="sidebar-notifications">
        <div class="sidebar-notifications-header">
            Notifications <span style="float:right;cursor:pointer;">Clear</span>
        </div>
        <div class="sidebar-notification-list">
            @for (int i = 0; i < 3; i++)
            {
                <div class="sidebar-notification">
                    <div class="sidebar-notification-title">Notif Title</div>
                    <div class="sidebar-notification-desc">Short Description Short Description Short Description</div>
                </div>
            }
        </div>
    </div>
  </div>
</div>
    <main class="main-content" style="flex:1; min-width:0; background: #f5f6fa;" @onclick="@(() => JSRuntime.InvokeVoidAsync("closeSidebar"))">
        @Body
    </main>

@if (ShowChatbot)
{
    <div class="chatbot-float-window">
        <div class="chatbot-header">
            <span>eSkolar Assistant</span>
            <button class="btn-close" @onclick="CloseChatbot" aria-label="Close chatbot">×</button>
        </div>
        <div class="chatbot-body">
            @if (!Messages.Any())
            {
                <div class="chat-message bot">
                    <div class="message-avatar bot">AI</div>
                    <div class="message-bubble bot">
                        Hello! I'm your eSkolar assistant for institutions. How can I help you today? I can assist with scholarship management, application reviews, and platform navigation.
                    </div>
                </div>
            }
            @foreach (var msg in Messages)
            {
                <div class="chat-message @(msg.IsUser ? "user" : "bot")">
                    <div class="message-avatar @(msg.IsUser ? "user" : "bot")">
                        @(msg.IsUser ? "You" : "AI")
                    </div>
                    <div class="message-bubble @(msg.IsUser ? "user" : "bot")">
                        @msg.Text
                    </div>
                </div>
            }
        </div>
        <div class="chatbot-input">
            <input @bind="UserInput" @bind:event="oninput" @onkeydown="HandleKeyDown" 
                   placeholder="Type a message..." />
            <button class="chatbot-send-btn" @onclick="SendMessage">
                <i class="fa fa-paper-plane"></i>
            </button>
        </div>
    </div>
}

<script>
    window.closeSidebar = function() {
        const offcanvas = document.getElementById('rightSidebar');
        if (offcanvas && offcanvas.classList.contains('show')) {
            const bsOffcanvas = bootstrap.Offcanvas.getInstance(offcanvas);
            if (bsOffcanvas) {
                bsOffcanvas.hide();
            }
        }
    };
</script>
