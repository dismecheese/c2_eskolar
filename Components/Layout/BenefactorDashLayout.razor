
@inherits LayoutComponentBase
@implements IDisposable

@* Inject necessary services for dependency injection *@
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> UserManager

@* Import namespaces to    <!-- Floating Chatbot Window -->
@if (ShowChatbot)
{
    <ChatBot CloseChatbot="CloseChatbot" MinimizeChatbot="MinimizeChatbot" />
}

</div>

<!-- Logout Confirmation Modal -->
<div class="modal fade" id="logoutModal" tabindex="-1" aria-labelledby="logoutModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title text-danger" id="logoutModalLabel">
                    <i class="fas fa-sign-out-alt me-2"></i>
                    Confirm Logout
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center py-4">
                <i class="fas fa-exclamation-triangle text-warning mb-3" style="font-size: 3rem;"></i>
                <h6>Are you sure you want to logout?</h6>
                <p class="text-muted mb-0">You will be redirected to the login page.</p>
            </div>
            <div class="modal-footer border-0 justify-content-center">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Cancel
                </button>
                <button type="button" class="btn btn-danger" @onclick="LogOut" data-bs-dismiss="modal">
                    <i class="fas fa-sign-out-alt me-2"></i>Yes, Logout
                </button>
            </div>
        </div>
    </div>
</div>

<!-- JavaScript helper to close Bootstrap offcanvas programmatically --> Blazor and Identity components *@
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using c2_eskolar.Components.UI

@* Set the render mode to InteractiveServer, enabling server-side interactivity *@
@rendermode InteractiveServer

@code {
    // Stores the first and last name of the currently signed in benefactor
    private string? adminFirstName;
    private string? adminLastName;

    // --- VERIFICATION MODAL STATE ---
    private bool showVerificationModal = false;
    private string? verificationStatus = null;

    [Inject]
    private BenefactorProfileService BenefactorProfileService { get; set; } = default!;
    // --- USER INFORMATION STATE ---
    
    // Stores the display name of the currently signed in user
    private string currentUserName = "Loading...";
    
    // Stores the email of the currently signed in user
    private string currentUserEmail = "";

    // Tracks the current month for the calendar component
    private DateTime currentMonth = new(DateTime.Now.Year, DateTime.Now.Month, 1);

    // --- LIFECYCLE METHODS ---

    // Called when the layout initializes
    protected override async Task OnInitializedAsync()
    {
        // Subscribe to the LocationChanged event to update UI on URL changes
        Navigation.LocationChanged += OnLocationChanged;
        // Asynchronously load the user's information
        await LoadCurrentUser();
        await LoadBenefactorProfile();
        await CheckVerificationStatus();
    }

    private async Task LoadBenefactorProfile()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                var profile = await BenefactorProfileService.GetProfileByUserIdAsync(userId);
                adminFirstName = profile?.AdminFirstName;
                adminLastName = profile?.AdminLastName;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading benefactor profile: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task CheckVerificationStatus()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                var profile = await BenefactorProfileService.GetProfileByUserIdAsync(userId);
                var isVerified = profile?.IsVerified;
                verificationStatus = profile?.VerificationStatus;

                if (isVerified != true && (string.IsNullOrEmpty(verificationStatus) || verificationStatus != "Verified"))
                {
                    showVerificationModal = true;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking verification status: {ex.Message}");
        }
    }

    // Loads the currently authenticated user's information
    private async Task LoadCurrentUser()
    {
        try
        {
            // Get the authentication state asynchronously
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                // Get the email from claims
                currentUserEmail = user.Identity.Name ?? "";
                
                // Get the IdentityUser to access more details
                var identityUser = await UserManager.FindByEmailAsync(currentUserEmail);
                
                if (identityUser != null)
                {
                    // Try to get display name from claims first, fallback to email
                    currentUserName = user.FindFirst("DisplayName")?.Value 
                                    ?? user.FindFirst("Name")?.Value 
                                    ?? identityUser.UserName 
                                    ?? currentUserEmail.Split('@')[0]; // Use email prefix as fallback
                }
                else
                {
                    // Fallback if the IdentityUser object is not found
                    currentUserName = currentUserEmail.Split('@')[0];
                }
            }
        }
        catch (Exception ex)
        {
            // Log any errors during user loading
            Console.WriteLine($"Error loading user: {ex.Message}");
            currentUserName = "User";
            currentUserEmail = "";
        }
        
        // Notify the component to re-render with the updated state
        StateHasChanged();
    }

    // Called whenever the route/URL changes (to highlight correct sidebar link)
    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        // Use InvokeAsync to ensure the StateHasChanged call happens on the UI thread
        InvokeAsync(StateHasChanged);
    }

    // Dispose pattern: unsubscribe from events to avoid memory leaks
    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }

    // --- SIDEBAR NAVIGATION ---

     // Determines the CSS class for a sidebar navigation link based on the current URL
    private string GetSidebarLinkClass(string href)
    {
        var currentPath = Navigation.ToBaseRelativePath(Navigation.Uri).Split('?')[0].TrimEnd('/');
        var linkPath = href.TrimStart('/').TrimEnd('/');
        
        // Exact match: Add the 'active' class for an exact path match to highlight the current page
        if (currentPath == linkPath)
        {
            return "nav-link d-flex align-items-center gap-2 sidebar-link active";
        }
            
        return "nav-link d-flex align-items-center gap-2 sidebar-link";
    }

    // Navigates to the benefactor's profile page
    private void NavigateToBenefactorProfile()
    {
        Navigation.NavigateTo("/dashboard/benefactor/profile");
    }

    private void CloseSidebar()
    {
        // Close the offcanvas sidebar programmatically
        StateHasChanged();
    }

    // --- CHATBOT STATE ---
    // (All chatbot state and logic is now handled by the ChatBot component)
    private bool ShowChatbot = false;

    private void OpenChatbot()
    {
        ShowChatbot = true;
        StateHasChanged();
    }

    private void CloseChatbot()
    {
        ShowChatbot = false;
        StateHasChanged();
    }

    private void MinimizeChatbot()
    {
        ShowChatbot = false;
        StateHasChanged();
    }

    // --- LOGOUT FUNCTIONALITY ---
    private void LogOut()
    {
        Navigation.NavigateTo("/api/auth/logout", forceLoad: true);
    }

    private async Task ShowLogoutModal()
    {
        await JSRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('logoutModal')).show();");
    }

    // --- VERIFICATION MODAL ACTIONS ---
    private void GoToVerification()
    {
        showVerificationModal = false;
        Navigation.NavigateTo("/benefactor/verification");
    }

    private void SkipVerification()
    {
        showVerificationModal = false;
    }
}

<!-- MAIN LAYOUT UI STRUCTURE   -->

<div class="d-flex min-vh-100">

    <!-- Sidebar (left navigation panel) -->
    <nav class="sidebar d-flex flex-column justify-content-between"
         style="width: 260px; background: linear-gradient(180deg, #1560d4 0%, #0d387e 100%); padding: 2rem 1.5rem 1rem 1.5rem;">
        
        <div>
            <!-- Brand/Logo Section -->
            <div class="sidebar-brand-container text-center">
                <a class="eskolar-logo" href="/dashboard/benefactor">
                    <img src="images/main/eSkolar-White.svg" alt="eSkolar Logo" class="eskolar-logo-img" />
                </a>
            </div>

            <!-- Sidebar Navigation Links -->
            <ul class="nav flex-column gap-1">
                <li class="nav-item">
                    <a href="/dashboard/benefactor" class="@GetSidebarLinkClass("/dashboard/benefactor")">
                        <i class="fa fa-home"></i> Dashboard
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/dashboard/benefactor/scholarships" class="@GetSidebarLinkClass("/dashboard/benefactor/scholarships")">
                        <i class="fa fa-graduation-cap"></i> Scholarships
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/dashboard/benefactor/announcements" class="@GetSidebarLinkClass("/dashboard/benefactor/announcements")">
                        <i class="fa fa-bullhorn"></i> Announcements
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/dashboard/benefactor/partners" class="@GetSidebarLinkClass("/dashboard/benefactor/partners")">
                        <i class="fa fa-handshake"></i> Partners
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/dashboard/benefactor/bookmarks" class="@GetSidebarLinkClass("/dashboard/benefactor/bookmarks")">
                        <i class="fa fa-star"></i> Bookmarks
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/dashboard/benefactor/about" class="@GetSidebarLinkClass("/dashboard/benefactor/about")">
                        <i class="fa fa-info-circle"></i> About
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/dashboard/benefactor/settings" class="@GetSidebarLinkClass("/dashboard/benefactor/settings")">
                        <i class="fa fa-cog"></i> Settings
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/dashboard/benefactor/faqs" class="@GetSidebarLinkClass("/dashboard/benefactor/faqs")">
                        <i class="fa fa-question-circle"></i> FAQs
                    </a>
                </li>
            </ul>
            
            <!-- Logout Button in Main Navigation -->
            <div class="sidebar-logout-section mt-4 pt-3" style="border-top: 1px solid rgba(255,255,255,0.2);">
                <button class="sidebar-link logout-link w-100 border-0 text-start" 
                        @onclick="() => ShowLogoutModal()"
                        style="background: transparent; color: rgba(255,255,255,0.8); padding: 12px 16px; border-radius: 8px; transition: all 0.3s ease;">
                    <i class="fa fa-sign-out-alt"></i> Logout
                </button>
            </div>
        </div>

        <!-- Help Box Button (opens chatbot) -->
        <button class="help-box-bottom" @onclick="OpenChatbot" type="button">
            <div class="help-box-content">
                <img src="images/NeedHelp.svg" alt="Help" class="help-box-img" />
                <div class="help-box-text">
                    <div class="help-box-title">Need help?</div>
                    <div class="help-box-desc">Having trouble using eSkolar?<br />We're here to assist you!</div>
                </div>
            </div>
        </button>

    </nav>

        <!-- Profile Icon (Top Right Corner) -->
    <button class="dashboard-profile-absolute mt-5" type="button" data-bs-toggle="offcanvas" data-bs-target="#rightSidebar" aria-controls="rightSidebar">
        <svg width="32" height="32" fill="none" viewBox="0 0 24 24">
            <circle cx="12" cy="8" r="4" stroke="#222" stroke-width="2"/>
            <circle cx="12" cy="12" r="11" stroke="#222" stroke-width="2"/>
            <path d="M4 20c1.5-3 5.5-5 8-5s6.5 2 8 5" stroke="#222" stroke-width="2"/>
        </svg>
    </button>
    <!-- Right Sidebar (Bootstrap Offcanvas) -->
    <div class="offcanvas offcanvas-end" tabindex="-1" id="rightSidebar" aria-labelledby="rightSidebarLabel" data-bs-backdrop="false">
    
        <!-- Header of Right Sidebar -->
        <div class="offcanvas-header">
            <h5 class="offcanvas-title" id="rightSidebarLabel">Profile</h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>

        <!-- Body of Right Sidebar -->
        <div class="offcanvas-body">

            <!-- Profile Section -->
            <div class="sidebar-profile">
                <svg width="32" height="32" fill="none" viewBox="0 0 24 24">
                    <circle cx="12" cy="8" r="4" stroke="#222" stroke-width="2"/>
                    <circle cx="12" cy="12" r="11" stroke="#222" stroke-width="2"/>
                    <path d="M4 20c1.5-3 5.5-5 8-5s6.5 2 8 5" stroke="#222" stroke-width="2"/>
                </svg>
                <div class="sidebar-profile-name">@((adminFirstName ?? "Benefactor") + (string.IsNullOrWhiteSpace(adminLastName) ? "" : $" {adminLastName}"))</div>
                <div class="sidebar-profile-role">Benefactor</div>
                <button class="sidebar-profile-btn" @onclick="NavigateToBenefactorProfile" data-bs-dismiss="offcanvas">Profile</button>
                <button class="sidebar-profile-btn logout-btn" @onclick="ShowLogoutModal" data-bs-dismiss="offcanvas">Log Out</button>
            </div>

            <!-- Calendar Section -->
            <div class="sidebar-calendar">
                <DashboardCalendar CurrentMonth="@currentMonth" CurrentMonthChanged="@(m => currentMonth = m)" />
            </div>

            <!-- Notifications Section -->
            <div class="sidebar-notifications">
                <div class="sidebar-notifications-header">
                    Notifications <span style="float:right;cursor:pointer;">Clear</span>
                </div>
                <div class="sidebar-notification-list">
                    @for (int i = 0; i < 3; i++)
                    {
                        <div class="sidebar-notification">
                            <div class="sidebar-notification-title">Notif Title</div>
                            <div class="sidebar-notification-desc">Short Description Short Description Short Description</div>
                        </div>
                    }
                </div>
            </div>
    </div>
  </div>

    <!-- Main Content Area (Body placeholder for pages) -->
    <main class="main-content" style="flex:1; min-width:0; background: #f5f6fa;">
        @Body
    </main>
</div>


<!-- Logout Confirmation Modal -->
<div class="modal fade" id="logoutModal" tabindex="-1" aria-labelledby="logoutModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title text-danger" id="logoutModalLabel">
                    <i class="fas fa-sign-out-alt me-2"></i>
                    Confirm Logout
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center py-4">
                <i class="fas fa-exclamation-triangle text-warning mb-3" style="font-size: 3rem;"></i>
                <h6>Are you sure you want to logout?</h6>
                <p class="text-muted mb-0">You will be redirected to the login page.</p>
            </div>
            <div class="modal-footer border-0 justify-content-center">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Cancel
                </button>
                <button type="button" class="btn btn-danger" @onclick="LogOut" data-bs-dismiss="modal">
                    <i class="fas fa-sign-out-alt me-2"></i>Yes, Logout
                </button>
            </div>
        </div>
    </div>
</div>
    @if (showVerificationModal)
    {
        <div class="sv-modal sv-modal-backdrop sv-modal-fixed">
            <div class="sv-modal-content">
                <div class="sv-modal-header">
                    <h2>Benefactor Verification Required</h2>
                </div>
                <div class="sv-modal-body">
                    <p class="sv-modal-justify">To maintain the integrity of eSkolar, all benefactors must complete verification before gaining full access to platform features.
                    Please verify your organization by providing accurate details, administrator information, and the necessary supporting documents.</p>
                </div>
                <div class="sv-modal-footer" style="display:flex;gap:16px;justify-content:flex-end;">
                    <button class="sv-btn sv-btn-secondary" @onclick="SkipVerification">Skip for Now</button>
                    <button class="sv-btn sv-btn-primary" @onclick="GoToVerification">Verify Benefactor</button>
                </div>
            </div>
        </div>
    }

<!-- Floating Chatbot Window -->
@if (ShowChatbot)
{
    <ChatBot CloseChatbot="CloseChatbot" MinimizeChatbot="MinimizeChatbot" />
}

<!-- Logout Confirmation Modal -->
<div class="modal fade" id="logoutModal" tabindex="-1" aria-labelledby="logoutModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="logoutModalLabel">Confirm Logout</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to log out?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="LogOut">Log Out</button>
            </div>
        </div>
    </div>
</div>

<!-- JavaScript helper to close Bootstrap offcanvas programmatically -->
<script>
document.addEventListener('click', function(event) {
    const offcanvas = document.getElementById('rightSidebar');
    if (offcanvas && offcanvas.classList.contains('show')) {
        // Ignore clicks inside the offcanvas or on the toggle button
        if (!offcanvas.contains(event.target) && !event.target.matches('[data-bs-toggle="offcanvas"]')) {
            const bsOffcanvas = bootstrap.Offcanvas.getInstance(offcanvas);
            if (bsOffcanvas) {
                bsOffcanvas.hide();
            }
        }
    }
});
</script>

<style>
.logout-link:hover {
    background: rgba(255,255,255,0.1) !important;
    color: rgba(255,255,255,1) !important;
    transform: translateX(4px);
}

.logout-link:active {
    background: rgba(255,255,255,0.15) !important;
}
</style>