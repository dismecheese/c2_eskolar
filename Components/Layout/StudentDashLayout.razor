@inherits LayoutComponentBase
@implements IDisposable

@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> UserManager
@inject StudentProfileService StudentProfileService
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory

@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using c2_eskolar.Components.UI
@using c2_eskolar.Data

@rendermode @(RenderMode.InteractiveServer)

@code {
    // --- USER INFORMATION STATE ---
    
    // Stores the display name of the currently signed in user
    private string currentUserName = "Loading...";
    
    // Stores the email of the currently signed in user
    private string currentUserEmail = "";

    // Stores the first and last name of the signed in student
    private string? studentFirstName;
    private string? studentLastName;

    // Tracks the current month for the calendar component
    private DateTime currentMonth = new(DateTime.Now.Year, DateTime.Now.Month, 1);
    
    // --- NOTIFICATION STATE ---
    private List<NotificationItem> notifications = new();
    private bool isLoadingNotifications = false;
    
    // --- LIFECYCLE METHODS ---

    // Called when the layout initializes
    protected override async Task OnInitializedAsync()
    {
        Navigation.LocationChanged += OnLocationChanged;
        await LoadCurrentUser();
        await LoadStudentProfile();
        await LoadNotifications();
    }

        private async Task LoadStudentProfile()
        {
            try
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                if (!string.IsNullOrEmpty(userId))
                {
                    var profile = await StudentProfileService.GetProfileByUserIdAsync(userId);
                    studentFirstName = profile?.FirstName;
                    studentLastName = profile?.LastName;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading student profile: {ex.Message}");
            }
            StateHasChanged();
        }

    // Loads notifications for the current student
    private async Task LoadNotifications()
    {
        try
        {
            isLoadingNotifications = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            
            if (!string.IsNullOrEmpty(userId))
            {
                var studentProfile = await StudentProfileService.GetProfileByUserIdAsync(userId);
                if (studentProfile != null)
                {
                    // Create a new DbContext instance for this operation
                    using var dbContext = await DbContextFactory.CreateDbContextAsync();
                    
                    // Get recent scholarship application approvals
                    var approvedApplications = await dbContext.ScholarshipApplications
                        .Include(a => a.Scholarship)
                        .Where(a => a.StudentProfileId == studentProfile.StudentProfileId && 
                               a.Status == "Approved" && 
                               a.UpdatedAt.HasValue && 
                               a.UpdatedAt.Value >= DateTime.Now.AddDays(-30)) // Last 30 days
                        .OrderByDescending(a => a.UpdatedAt)
                        .Take(5)
                        .ToListAsync();

                    notifications = approvedApplications.Select(a => new NotificationItem
                    {
                        Title = "Scholarship Approved!",
                        Description = $"Your application for {a.Scholarship?.Title ?? "scholarship"} has been approved.",
                        CreatedAt = a.UpdatedAt ?? a.ApplicationDate,
                        Type = "approval"
                    }).ToList();

                    // Add general notifications if none exist
                    if (!notifications.Any())
                    {
                        notifications.Add(new NotificationItem
                        {
                            Title = "Welcome to eSkolar!",
                            Description = "Complete your profile to get personalized scholarship recommendations.",
                            CreatedAt = DateTime.Now,
                            Type = "info"
                        });
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading notifications: {ex.Message}");
        }
        finally
        {
            isLoadingNotifications = false;
            StateHasChanged();
        }
    }

    // Clears all notifications
    private void ClearNotifications()
    {
        notifications.Clear();
        StateHasChanged();
    }

    // Loads the currently authenticated user's information
    private async Task LoadCurrentUser()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                var user = await UserManager.GetUserAsync(authState.User);
                if (user != null)
                {
                    currentUserEmail = user.Email ?? "";
                    
                    if (!string.IsNullOrEmpty(user.Email))
                    {
                        var emailParts = user.Email.Split('@');
                        currentUserName = emailParts.Length > 0 ? 
                            char.ToUpper(emailParts[0][0]) + emailParts[0].Substring(1) : 
                            "Student";
                    }
                    else
                    {
                        currentUserName = "Student";
                    }
                }
            }
        }
        catch (Exception ex)
        {
            // Log error if needed
            Console.WriteLine($"Error loading user: {ex.Message}");
            currentUserName = "Student";
        }
        
        StateHasChanged();
    }

    // Handles navigation changes and triggers UI re-render
    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    // Cleans up event subscriptions to avoid memory leaks
    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }


    // --- SIDEBAR LINK HANDLING ---
    // Dynamically applies the "active" class to the current sidebar link based on the route
    private string GetSidebarLinkClass(string href)
    {
        var currentPath = Navigation.ToBaseRelativePath(Navigation.Uri).Split('?')[0].TrimEnd('/');
        var linkPath = href.TrimStart('/').TrimEnd('/');
        
        // Exact match
        if (currentPath == linkPath)
            return "nav-link d-flex align-items-center gap-2 sidebar-link active";
            
        return "nav-link d-flex align-items-center gap-2 sidebar-link";
    }

    // Navigates the user to their student profile
    private void NavigateToStudentProfile()
    {
        Navigation.NavigateTo("/dashboard/student/profile/");
    }

    // --- CHATBOT STATE ---
    private bool ShowChatbot = false;
    private void OpenChatbot() => ShowChatbot = true;
    private void CloseChatbot() => ShowChatbot = false;
    private void MinimizeChatbot() => ShowChatbot = false;

    // --- LOGOUT FUNCTIONALITY ---
    private void LogOut()
    {
        try
        {
            Navigation.NavigateTo("/api/auth/logout", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logout error: {ex.Message}");
        }
    }

    private async Task ShowLogoutModal()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                if (typeof bootstrap !== 'undefined' && bootstrap.Modal) {
                    const modal = new bootstrap.Modal(document.getElementById('logoutModal'));
                    modal.show();
                } else {
                    console.error('Bootstrap not loaded');
                }
            ");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Modal error: {ex.Message}");
            // Fallback to direct logout if modal fails
            LogOut();
        }
    }

    // --- NOTIFICATION MODEL ---
    // Defines a notification item
    public class NotificationItem
    {
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public DateTime CreatedAt { get; set; }
        public string Type { get; set; } = "info"; // "approval", "info", "warning", etc.
    }
}

<!-- --- MAIN LAYOUT STRUCTURE --- -->

<div class="d-flex min-vh-100">
    <!-- --- SIDEBAR --- -->
    <nav class="sidebar d-flex flex-column justify-content-between"
         style="width: 260px; background: linear-gradient(180deg, #1560d4 0%, #0d387e 100%); padding: 2rem 1.5rem 1rem 1.5rem;">
        
        <div>
            <!-- Logo Section -->
            <div class="sidebar-brand-container text-center">
                <a class="eskolar-logo" href="/dashboard/student">
                    <img src="images/main/eSkolar-White.svg" alt="eSkolar Logo" class="eskolar-logo-img" />
                </a>
            </div>
            
            <!-- Navigation Links -->
            <ul class="nav flex-column gap-1">
                <li class="nav-item">
                    <a href="/dashboard/student" class="@GetSidebarLinkClass("/dashboard/student")">
                        <i class="fa fa-home"></i> Dashboard
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/dashboard/student/scholarships" class="@GetSidebarLinkClass("/dashboard/student/scholarships")">
                        <i class="fa fa-graduation-cap"></i> Scholarships
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/dashboard/student/announcements" class="@GetSidebarLinkClass("/dashboard/student/announcements")">
                        <i class="fa fa-bullhorn"></i> Announcements
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/dashboard/student/partners" class="@GetSidebarLinkClass("/dashboard/student/partners")">
                        <i class="fa fa-handshake"></i> Partners
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/dashboard/student/bookmarks" class="@GetSidebarLinkClass("/dashboard/student/bookmarks")">
                        <i class="fa fa-star"></i> Bookmarks
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/dashboard/student/about" class="@GetSidebarLinkClass("/dashboard/student/about")">
                        <i class="fa fa-info-circle"></i> About
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/dashboard/student/settings" class="@GetSidebarLinkClass("/dashboard/student/settings")">
                        <i class="fa fa-cog"></i> Settings
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/dashboard/student/faqs" class="@GetSidebarLinkClass("/dashboard/student/faqs")">
                        <i class="fa fa-question-circle"></i> FAQs
                    </a>
                </li>
            </ul>
            
            <!-- Logout Button in Main Navigation -->
            <div class="sidebar-logout-section mt-4 pt-3" style="border-top: 1px solid rgba(255,255,255,0.2);">
                <button class="sidebar-link logout-link w-100 border-0 text-start" 
                        @onclick="() => ShowLogoutModal()"
                        style="background: transparent; color: rgba(255,255,255,0.8); padding: 12px 16px; border-radius: 8px; transition: all 0.3s ease;">
                    <i class="fa fa-sign-out-alt"></i> Logout
                </button>
            </div>
        </div>

        <!-- Help Box Button (opens chatbot) -->
        <button class="help-box-bottom" @onclick="OpenChatbot" type="button">
            <div class="help-box-content">
                <img src="images/NeedHelp.svg" alt="Help" class="help-box-img" />
                <div class="help-box-text">
                    <div class="help-box-title">Need help?</div>
                    <div class="help-box-desc">Having trouble using eSkolar?<br />We're here to assist you!</div>
                </div>
            </div>
        </button>
    </nav>

    <!-- --- PROFILE SIDEBAR (Bootstrap Offcanvas) --- -->
    <button class="dashboard-profile-absolute mt-3" type="button" data-bs-toggle="offcanvas" data-bs-target="#rightSidebar" aria-controls="rightSidebar">
        <svg width="32" height="32" fill="none" viewBox="0 0 24 24">
            <circle cx="12" cy="8" r="4" stroke="#222" stroke-width="2"/>
            <circle cx="12" cy="12" r="11" stroke="#222" stroke-width="2"/>
            <path d="M4 20c1.5-3 5.5-5 8-5s6.5 2 8 5" stroke="#222" stroke-width="2"/>
        </svg>
    </button>

<!-- Profile Sidebar Content -->
<div class="offcanvas offcanvas-end" tabindex="-1" id="rightSidebar" aria-labelledby="rightSidebarLabel" data-bs-backdrop="false">
  <div class="offcanvas-header">
    <h5 class="offcanvas-title" id="rightSidebarLabel">Profile</h5>
    <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
  </div>

  <div class="offcanvas-body">
    <!-- Sidebar Profile Section -->
    <div class="sidebar-profile">
        <svg width="32" height="32" fill="none" viewBox="0 0 24 24">
            <circle cx="12" cy="8" r="4" stroke="#222" stroke-width="2"/>
            <circle cx="12" cy="12" r="11" stroke="#222" stroke-width="2"/>
            <path d="M4 20c1.5-3 5.5-5 8-5s6.5 2 8 5" stroke="#222" stroke-width="2"/>
        </svg>
        <div class="sidebar-profile-name">@((studentFirstName ?? "Student") + (string.IsNullOrWhiteSpace(studentLastName) ? "" : $" {studentLastName}"))</div>
        <div class="sidebar-profile-role">Student</div>
        <button class="sidebar-profile-btn" @onclick="NavigateToStudentProfile" data-bs-dismiss="offcanvas">Profile</button>
    </div>

    <!-- Sidebar Calendar -->
    <div class="sidebar-calendar">
        <div class="rounded-lg border p-3 bg-white shadow-sm">
            <DashboardCalendar CurrentMonth="@currentMonth" CurrentMonthChanged="@(m => currentMonth = m)" />
        </div>
    </div>

    <!-- Sidebar Notifications -->
    <div class="sidebar-notifications">
        <div class="sidebar-notifications-header">
            Notifications 
            @if (notifications.Any())
            {
                <span style="float:right;cursor:pointer;color:#007bff;" @onclick="ClearNotifications">Clear</span>
            }
        </div>
        <div class="sidebar-notification-list">
            @if (isLoadingNotifications)
            {
                <div class="text-center p-3">
                    <div class="spinner-border spinner-border-sm" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (notifications.Any())
            {
                @foreach (var notification in notifications)
                {
                    <div class="sidebar-notification @(notification.Type == "approval" ? "approval-notification" : "")">
                        <div class="sidebar-notification-title">
                            @if (notification.Type == "approval")
                            {
                                <i class="fa fa-check-circle text-success me-1"></i>
                            }
                            @notification.Title
                        </div>
                        <div class="sidebar-notification-desc">@notification.Description</div>
                        <div class="sidebar-notification-time">@notification.CreatedAt.ToString("MMM dd, yyyy")</div>
                    </div>
                }
            }
            else
            {
                <div class="text-center text-muted p-3">
                    <i class="fa fa-bell-slash mb-2"></i><br />
                    No notifications
                </div>
            }
        </div>
    </div>
  </div>
</div>

    <!-- --- MAIN CONTENT AREA --- -->
    <main class="main-content" style="flex:1; min-width:0; background: #f5f6fa;">
        @Body
    </main>

    @if (ShowChatbot)
    {
        <ChatBot CloseChatbot="CloseChatbot" MinimizeChatbot="MinimizeChatbot" />
    }

</div>

<!-- Logout Confirmation Modal -->
<div class="modal fade" id="logoutModal" tabindex="-1" aria-labelledby="logoutModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title text-danger" id="logoutModalLabel">
                    <i class="fas fa-sign-out-alt me-2"></i>
                    Confirm Logout
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center py-4">
                <i class="fas fa-exclamation-triangle text-warning mb-3" style="font-size: 3rem;"></i>
                <h6>Are you sure you want to logout?</h6>
                <p class="text-muted mb-0">You will be redirected to the login page.</p>
            </div>
            <div class="modal-footer border-0 justify-content-center">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Cancel
                </button>
                <button type="button" class="btn btn-danger" @onclick="LogOut" data-bs-dismiss="modal">
                    <i class="fas fa-sign-out-alt me-2"></i>Yes, Logout
                </button>
            </div>
        </div>
    </div>
</div>

<!-- JavaScript helper to close Bootstrap offcanvas programmatically -->
<script>
document.addEventListener('click', function(event) {
    const offcanvas = document.getElementById('rightSidebar');
    if (offcanvas && offcanvas.classList.contains('show')) {
        // Ignore clicks inside the offcanvas or on the toggle button
        if (!offcanvas.contains(event.target) && !event.target.matches('[data-bs-toggle="offcanvas"]')) {
            const bsOffcanvas = bootstrap.Offcanvas.getInstance(offcanvas);
            if (bsOffcanvas) {
                bsOffcanvas.hide();
            }
        }
    }
});
</script>

<!-- Styles for notification enhancements -->
<style>
.approval-notification {
    border-left: 3px solid #28a745 !important;
    background-color: #f8fff9 !important;
}

.sidebar-notification-time {
    font-size: 0.75rem;
    color: #6c757d;
    margin-top: 4px;
}

.sidebar-notification.approval-notification .sidebar-notification-title {
    color: #28a745;
    font-weight: 600;
}

.logout-link:hover {
    background: rgba(255,255,255,0.1) !important;
    color: rgba(255,255,255,1) !important;
    transform: translateX(4px);
}

.logout-link:active {
    background: rgba(255,255,255,0.15) !important;
}
</style>