@inherits LayoutComponentBase
@implements IDisposable

@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> UserManager
@inject StudentProfileService StudentProfileService
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject c2_eskolar.Services.NotificationService NotificationService
@inject HttpClient Http

@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using c2_eskolar.Components.UI
@using c2_eskolar.Data

@rendermode @(RenderMode.InteractiveServer)

@code {
    // --- USER INFORMATION STATE ---
    
    // Stores the display name of the currently signed in user
    private string currentUserName = "Loading...";
    
    // Stores the email of the currently signed in user
    private string currentUserEmail = "";

    // Stores the first and last name of the signed in student
    private string? studentFirstName;
    private string? studentLastName;

    // Tracks the current month for the calendar component
    private DateTime currentMonth = new(DateTime.Now.Year, DateTime.Now.Month, 1);
    
    // --- NOTIFICATION STATE ---
    private List<NotificationItem> notifications = new();
    private bool isLoadingNotifications = false;

    // --- VERIFICATION MODAL STATE ---
    private bool showVerificationModal = false;
    private bool? isVerified = null;
    private string? accountStatus = null;
    private string? userId;

    // --- LOGOUT MODAL STATE ---
    private bool showLogoutModal = false;
    private DotNetObjectReference<StudentDashLayout>? _dotNetRef;

    // --- LOGOUT MODAL LOGIC ---
    private void ShowLogoutModal()
    {
        showLogoutModal = true;
    }

    private void CancelLogout()
    {
        showLogoutModal = false;
    }

    private void ConfirmLogout()
    {
        showLogoutModal = false;
        LogOut();
    }
    
    // --- LIFECYCLE METHODS ---

    // Called when the layout initializes
    protected override async Task OnInitializedAsync()
    {
        Navigation.LocationChanged += OnLocationChanged;
        await LoadCurrentUser();
        await LoadStudentProfile();
        await LoadNotifications();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load the SignalR client script and connect
            try
            {
                await JSRuntime.InvokeVoidAsync("import", "/js/notifications-client.js");
                // register .NET reference so the JS client can call into Blazor
                _dotNetRef = DotNetObjectReference.Create(this);
                await JSRuntime.InvokeVoidAsync("eval", "window.eskolarNotifications && window.eskolarNotifications.registerDotNet(null)");
                // Attach the DotNet reference: store in a global and then connect
                await JSRuntime.InvokeVoidAsync("eval", "(function(){ if(window.eskolarNotifications){ window.eskolarNotifications.registerDotNet(window._dotNetRefPlaceholder); } })()");
                // Set a placeholder that the JS file can read -- then call connect
                await JSRuntime.InvokeVoidAsync("eval", "window._dotNetRefPlaceholder = { invokeMethodAsync: function(m,p){ /* placeholder until registered from Blazor */ } }; window.eskolarNotifications && window.eskolarNotifications.connect('/hubs/notifications');");
                // Instead of complex eval wiring, explicitly call the register function via JS interop
                await JSRuntime.InvokeVoidAsync("window.eskolarNotifications.registerDotNet", _dotNetRef);
                await JSRuntime.InvokeVoidAsync("window.eskolarNotifications.connect", "/hubs/notifications");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Notification client load error: {ex.Message}");
            }
        }
    }

    private async Task LoadStudentProfile()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                var profile = await StudentProfileService.GetProfileByUserIdAsync(userId);
                studentFirstName = profile?.FirstName;
                studentLastName = profile?.LastName;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading student profile: {ex.Message}");
        }
        StateHasChanged();
    }

    // Loads notifications for the current student
    private async Task LoadNotifications()
    {
        try
        {
            isLoadingNotifications = true;
            // Load persisted notifications via API
            try
            {
                var resp = await Http.GetAsync($"api/notifications?page=1&pageSize=50");
                if (resp.IsSuccessStatusCode)
                {
                    var json = await resp.Content.ReadAsStringAsync();
                    var list = System.Text.Json.JsonSerializer.Deserialize<List<c2_eskolar.Services.NotificationDto>>(json, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    if (list != null)
                    {
                        notifications = list.Select(n => new NotificationItem
                        {
                            Id = n.NotificationId,
                            Title = n.Title,
                            Description = n.Message,
                            CreatedAt = n.CreatedAt,
                            Type = n.Type,
                            IsRead = n.IsRead
                        }).ToList();
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to load notifications from API: {ex.Message}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading notifications: {ex.Message}");
        }
        finally
        {
            isLoadingNotifications = false;
            StateHasChanged();
        }
    }

    private async Task MarkNotificationAsReadAsync(int notificationId)
    {
        try
        {
            var resp = await Http.PostAsync($"api/notifications/{notificationId}/read", null);
            if (resp.IsSuccessStatusCode)
            {
                // remove from list by id and mark as read locally to avoid roundtrip
                var item = notifications.FirstOrDefault(n => n.Id.HasValue && n.Id.Value == notificationId);
                if (item != null)
                {
                    item.IsRead = true;
                    notifications.Remove(item);
                    StateHasChanged();
                }
                else
                {
                    // fallback: reload notifications
                    await LoadNotifications();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error marking notification as read: {ex.Message}");
        }
    }

    private async Task OnNotificationClick(NotificationItem item)
    {
        if (item == null) return;
        if (item.Id.HasValue && item.Id.Value > 0)
        {
            await MarkNotificationAsReadAsync(item.Id.Value);
        }
        else
        {
            // Temporary: just remove the in-memory item
            notifications.Remove(item);
            StateHasChanged();
        }
    }

    // Clears all notifications
    private void ClearNotifications()
    {
        notifications.Clear();
        StateHasChanged();
    }

    // Toggle the profile notification offcanvas (reuse rightSidebar or implement a quick toggle)
    private async void ToggleNotificationOffcanvas()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("eval", "var el = document.getElementById('notificationsOffcanvas'); if(el){ var bs = new bootstrap.Offcanvas(el); bs.toggle(); }");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling notifications offcanvas: {ex.Message}");
        }
    }

    // Loads the currently authenticated user's information
    private async Task LoadCurrentUser()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                var user = await UserManager.GetUserAsync(authState.User);
                if (user != null)
                {
                    currentUserEmail = user.Email ?? "";
                    
                    if (!string.IsNullOrEmpty(user.Email))
                    {
                        var emailParts = user.Email.Split('@');
                        currentUserName = emailParts.Length > 0 ? 
                            char.ToUpper(emailParts[0][0]) + emailParts[0].Substring(1) : 
                            "Student";
                    }
                    else
                    {
                        currentUserName = "Student";
                    }
                }
            }
        }
        catch (Exception ex)
        {
            // Log error if needed
            Console.WriteLine($"Error loading user: {ex.Message}");
            currentUserName = "Student";
        }
        
        StateHasChanged();
    }

    // Handles navigation changes and triggers UI re-render
    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    // Cleans up event subscriptions to avoid memory leaks
    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
        try
        {
            // tell client to disconnect and unregister dotnet
            JSRuntime.InvokeVoidAsync("window.eskolarNotifications && window.eskolarNotifications.disconnect");
        }
        catch { }
        _dotNetRef?.Dispose();
    }


    // --- SIDEBAR LINK HANDLING ---
    // Dynamically applies the "active" class to the current sidebar link based on the route
    private string GetSidebarLinkClass(string href)
    {
        var currentPath = Navigation.ToBaseRelativePath(Navigation.Uri).Split('?')[0].TrimEnd('/');
        var linkPath = href.TrimStart('/').TrimEnd('/');
        
        // Exact match
        if (currentPath == linkPath)
            return "nav-link d-flex align-items-center gap-2 sidebar-link active";
            
        return "nav-link d-flex align-items-center gap-2 sidebar-link";
    }

    // Navigates the user to their student profile
    private void NavigateToStudentProfile()
    {
        Navigation.NavigateTo("/dashboard/student/profile/");
    }

    // Gets the appropriate dashboard URL based on verification status
    private string GetDashboardUrl()
    {
        // If user is verified, go to verified dashboard
        if (isVerified == true && accountStatus == "Verified")
        {
            return "/dashboard/student";
        }
        // If user is not verified, go to unverified dashboard
        return "/dashboard/student/unverified";
    }

    // --- CHATBOT STATE ---
    private bool ShowChatbot = false;
    private void OpenChatbot() => ShowChatbot = true;
    private void CloseChatbot() => ShowChatbot = false;
    private void MinimizeChatbot() => ShowChatbot = false;

    // --- LOGOUT FUNCTIONALITY ---
    private void LogOut()
    {
        try
        {
            Navigation.NavigateTo("/api/auth/logout", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logout error: {ex.Message}");
        }
    }



    // --- NOTIFICATION MODEL ---
    // Defines a notification item
    public class NotificationItem
    {
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public DateTime CreatedAt { get; set; }
        public string Type { get; set; } = "info"; // "approval", "info", "warning", etc.
        public int? Id { get; set; }
        public bool IsRead { get; set; }
    }

    [JSInvokable("ReceiveNotificationFromJs")]
    public Task ReceiveNotificationFromJs(object payload)
    {
        try
        {
            // payload is a JSON-like object, but Blazor will marshal it as a System.Text.Json.JsonElement
            var json = System.Text.Json.JsonSerializer.Serialize(payload);
            var note = System.Text.Json.JsonSerializer.Deserialize<NotificationItem>(json, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            if (note != null)
            {
                if (notifications == null) notifications = new List<NotificationItem>();
                notifications.Insert(0, note);
                if (notifications.Count > 50) notifications.RemoveRange(50, notifications.Count - 50);
                InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling incoming notification in Blazor: {ex.Message}");
        }
        return Task.CompletedTask;
    }
}

<!-- --- MAIN LAYOUT STRUCTURE --- -->

<div class="d-flex min-vh-100">
    <!-- --- SIDEBAR --- -->
    <nav class="sidebar d-flex flex-column justify-content-between"
         style="width: 260px; background: linear-gradient(180deg, #1560d4 0%, #0d387e 100%); padding: 2rem 1.5rem 1rem 1.5rem;">
        
        <div>
            <!-- Logo Section -->
            <div class="sidebar-brand-container text-center">
                <div style="display:flex;align-items:center;justify-content:center;gap:8px;">
                    <a class="eskolar-logo" href="/dashboard/student">
                        <img src="images/main/eSkolar-White.svg" alt="eSkolar Logo" class="eskolar-logo-img" />
                    </a>
                    <div style="position:relative;">
                        <button class="btn btn-link eskolar-notification-bell" title="Notifications" @onclick="() => ToggleNotificationOffcanvas()" style="color: white;">
                            <i class="fa fa-bell fa-lg"></i>
                            @if (notifications?.Count > 0)
                            {
                                <span class="eskolar-notification-count">@notifications.Count</span>
                            }
                        </button>
                    </div>
                </div>
            </div>
            
            <!-- Navigation Links -->
            <ul class="nav flex-column gap-1">
                <li class="nav-item">
                    <a href="/dashboard/student/" class="@GetSidebarLinkClass("/dashboard/student/")">
                        <i class="fa fa-home"></i> Dashboard
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/dashboard/student/scholarships" class="@GetSidebarLinkClass("/dashboard/student/scholarships")">
                        <i class="fa fa-graduation-cap"></i> Scholarships
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/dashboard/student/announcements" class="@GetSidebarLinkClass("/dashboard/student/announcements")">
                        <i class="fa fa-bullhorn"></i> Announcements
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/dashboard/student/partners" class="@GetSidebarLinkClass("/dashboard/student/partners")">
                        <i class="fa fa-handshake"></i> Partners
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/dashboard/student/bookmarks" class="@GetSidebarLinkClass("/dashboard/student/bookmarks")">
                        <i class="fa fa-star"></i> Bookmarks
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/dashboard/student/about" class="@GetSidebarLinkClass("/dashboard/student/about")">
                        <i class="fa fa-info-circle"></i> About
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/dashboard/student/settings" class="@GetSidebarLinkClass("/dashboard/student/settings")">
                        <i class="fa fa-cog"></i> Settings
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/dashboard/student/faqs" class="@GetSidebarLinkClass("/dashboard/student/faqs")">
                        <i class="fa fa-question-circle"></i> FAQs
                    </a>
                </li>
            </ul>
            
            <!-- Logout Button in Main Navigation -->
            <div class="sidebar-logout-section mt-4 pt-3" style="border-top: 1px solid rgba(255,255,255,0.2);">
                <button class="sidebar-link logout-link w-100 border-0 text-start" 
                        @onclick="() => ShowLogoutModal()"
                        style="background: transparent; color: rgba(255,255,255,0.8); padding: 12px 16px; border-radius: 8px; transition: all 0.3s ease;">
                    <i class="fa fa-sign-out-alt"></i> Logout
                </button>
            </div>
        </div>

        <!-- Help Box Button (opens chatbot) -->
        <button class="help-box-bottom" @onclick="OpenChatbot" type="button">
            <div class="help-box-content">
                <img src="images/NeedHelp.svg" alt="Help" class="help-box-img" />
                <div class="help-box-text">
                    <div class="help-box-title">Need help?</div>
                    <div class="help-box-desc">Having trouble using eSkolar?<br />We're here to assist you!</div>
                </div>
            </div>
        </button>
    </nav>

    <!-- --- PROFILE SIDEBAR (Bootstrap Offcanvas) --- -->
    <button class="dashboard-profile-absolute mt-3" type="button" data-bs-toggle="offcanvas" data-bs-target="#rightSidebar" aria-controls="rightSidebar">
        <svg width="32" height="32" fill="none" viewBox="0 0 24 24">
            <circle cx="12" cy="8" r="4" stroke="#222" stroke-width="2"/>
            <circle cx="12" cy="12" r="11" stroke="#222" stroke-width="2"/>
            <path d="M4 20c1.5-3 5.5-5 8-5s6.5 2 8 5" stroke="#222" stroke-width="2"/>
        </svg>
    </button>

<!-- Profile Sidebar Content -->
<div class="offcanvas offcanvas-end" tabindex="-1" id="rightSidebar" aria-labelledby="rightSidebarLabel" data-bs-backdrop="false">
  <div class="offcanvas-header">
    <h5 class="offcanvas-title" id="rightSidebarLabel">Profile</h5>
    <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
  </div>

  <div class="offcanvas-body">
    <!-- Sidebar Profile Section -->
    <div class="sidebar-profile">
        <svg width="32" height="32" fill="none" viewBox="0 0 24 24">
            <circle cx="12" cy="8" r="4" stroke="#222" stroke-width="2"/>
            <circle cx="12" cy="12" r="11" stroke="#222" stroke-width="2"/>
            <path d="M4 20c1.5-3 5.5-5 8-5s6.5 2 8 5" stroke="#222" stroke-width="2"/>
        </svg>
        <div class="sidebar-profile-name">@((studentFirstName ?? "Student") + (string.IsNullOrWhiteSpace(studentLastName) ? "" : $" {studentLastName}"))</div>
        <div class="sidebar-profile-role">Student</div>
        <button class="sidebar-profile-btn" @onclick="NavigateToStudentProfile" data-bs-dismiss="offcanvas">Profile</button>
    </div>

    <!-- Sidebar Calendar -->
    <div class="sidebar-calendar">
        <div class="rounded-lg border p-3 bg-white shadow-sm">
            <DashboardCalendar CurrentMonth="@currentMonth" CurrentMonthChanged="@(m => currentMonth = m)" />
        </div>
    </div>

    <!-- Sidebar Notifications -->
    <div class="sidebar-notifications">
        <div class="sidebar-notifications-header">
            Notifications 
            @if (notifications != null && notifications.Any())
            {
                <span style="float:right;cursor:pointer;color:#007bff;" @onclick="ClearNotifications">Clear</span>
            }
        </div>
        <div class="sidebar-notification-list">
            @if (isLoadingNotifications)
            {
                <div class="text-center p-3">
                    <div class="spinner-border spinner-border-sm" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (notifications != null && notifications.Any())
            {
                @foreach (var notification in notifications)
                {
                    <div class="sidebar-notification @(notification.Type == "approval" ? "approval-notification" : "")">
                        <div class="sidebar-notification-title">
                            @if (notification.Type == "approval")
                            {
                                <i class="fa fa-check-circle text-success me-1"></i>
                            }
                            @notification.Title
                        </div>
                        <div class="sidebar-notification-desc">@notification.Description</div>
                        <div class="sidebar-notification-time">@notification.CreatedAt.ToString("MMM dd, yyyy")</div>
                    </div>
                }
            }
            else
            {
                <div class="text-center text-muted p-3">
                    <i class="fa fa-bell-slash mb-2"></i><br />
                    No notifications
                </div>
            }
        </div>
        </div>

        <!-- Notifications Offcanvas (right side) -->
        <div class="offcanvas offcanvas-end" tabindex="-1" id="notificationsOffcanvas" aria-labelledby="notificationsOffcanvasLabel" data-bs-backdrop="false">
            <div class="offcanvas-header">
                <h5 class="offcanvas-title" id="notificationsOffcanvasLabel">Notifications</h5>
                <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
            </div>
            <div class="offcanvas-body">
                <div class="eskolar-notification-panel">
                        @if (notifications != null && notifications.Any())
                        {
                @foreach (var notification in notifications)
                {
                    <div class="eskolar-notification-item" @onclick="() => OnNotificationClick(notification)">
                        <h6>@notification.Title</h6>
                        <p>@notification.Description</p>
                        <div class="eskolar-notification-time">@notification.CreatedAt.ToString("MMM dd, yyyy hh:mm tt")</div>
                    </div>
                }
                        }
                        else
                        {
                                <div class="text-center text-muted p-3">No notifications</div>
                        }
                </div>
            </div>
        </div>
  </div>
</div>

    <!-- --- MAIN CONTENT AREA --- -->
    <main class="main-content" style="flex:1; min-width:0; background: #f5f6fa;">
        @Body
    </main>

    @if (ShowChatbot)
    {
        <ChatBot CloseChatbot="CloseChatbot" MinimizeChatbot="MinimizeChatbot" />
    }
        <LogoutModal IsVisible="@showLogoutModal" OnCancel="@CancelLogout" OnConfirm="@ConfirmLogout" />

</div>



<!-- JavaScript helper to close Bootstrap offcanvas programmatically -->
<script>
document.addEventListener('click', function(event) {
    const offcanvas = document.getElementById('rightSidebar');
    if (offcanvas && offcanvas.classList.contains('show')) {
        // Ignore clicks inside the offcanvas or on the toggle button
        if (!offcanvas.contains(event.target) && !event.target.matches('[data-bs-toggle="offcanvas"]')) {
            const bsOffcanvas = bootstrap.Offcanvas.getInstance(offcanvas);
            if (bsOffcanvas) {
                bsOffcanvas.hide();
            }
        }
    }
});
</script>