@page "/admin/webscraping"
@attribute [Authorize(Roles = "SuperAdmin")]
@layout Layout.SuperAdminDashLayout
@inject c2_eskolar.Services.WebScraping.IWebScrapingService WebScrapingService
@inject c2_eskolar.Services.WebScraping.IEnhancedWebScrapingService EnhancedWebScrapingService
@inject c2_eskolar.Services.IScrapedScholarshipService ScrapedScholarshipService
@inject IDbContextFactory<c2_eskolar.Data.ApplicationDbContext> DbContextFactory
@inject IJSRuntime JSRuntime
@inject ILogger<WebScrapingManagement> Logger
@using c2_eskolar.Services.WebScraping
@using c2_eskolar.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using System.Threading
@using System.Text
@implements IDisposable

<div class="dashboard-center-container">
    <!-- Top Bar -->
    <div class="dashboard-topbar">
        <span class="dashboard-date">@DateTime.Now.ToString("dd MMM yyyy, ddd")</span>
    </div>

    <!-- Welcome Banner -->
    <div class="dashboard-banner-centered">
        <div class="banner-text">
            <h2>Web Scraping Management</h2>
            <p>Configure and monitor automated data collection operations</p>
        </div>
        <img src="images/eskolar_books.svg" alt="Books" class="banner-img" />
    </div>

    <!-- Alert Messages -->
    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show mb-4" role="alert">
            <i class="bi bi-exclamation-triangle me-2"></i>@errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
        </div>
    }
    @if (!string.IsNullOrWhiteSpace(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show mb-4" role="alert">
            <i class="bi bi-check-circle me-2"></i>@successMessage
            <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
        </div>
    }

    <!-- Inline toasts container -->
    <div class="position-fixed top-0 end-0 p-3" style="z-index: 1080;">
        @foreach (var t in approvalToasts)
        {
            <div class="toast show mb-2" role="status">
                <div class="toast-body">
                    @t
                    <button type="button" class="btn-close float-end ms-2" @onclick="() => DismissToast(t)"></button>
                </div>
            </div>
        }
    </div>

    <!-- Dashboard Tabs -->
    <div class="dashboard-tabs">
        <button class="dashboard-tab @(activeTab == 0 ? "active" : "")" @onclick="() => SetTab(0)">AI-Enhanced Scraping</button>
        <button class="dashboard-tab @(activeTab == 1 ? "active" : "")" @onclick="() => SetTab(1)">Scholarship Approval</button>
        <button class="dashboard-tab @(activeTab == 2 ? "active" : "")" @onclick="() => SetTab(2)">Institution & Organization Verification</button>
    </div>

    @if (activeTab == 0)
    {
        <!-- AI-Enhanced Scraping Tab -->
        <div class="scraping-section">
            <div class="row g-4">
                <div class="col-lg-8">
                    <div class="scraping-card">
                        <div class="scraping-card-header">
                            <div class="scraping-card-icon scholarship">
                                <i class="bi bi-robot"></i>
                            </div>
                            <div>
                                <h5>AI-Enhanced Scholarship Scraping</h5>
                                <p class="mb-0">Intelligent parsing with OpenAI GPT-4</p>
                            </div>
                        </div>
                        <div class="scraping-card-body">
                            <div class="mb-3">
                                <label class="form-label">Website URL</label>
                                <input type="url" class="form-control scraping-input" @bind="enhancedScholarshipUrl" placeholder="https://scholarships.example.com">
                            </div>
                            <div class="scraping-actions">
                                <button class="btn-scraping btn-primary" @onclick="ScrapeWithAI" disabled="@isLoading">
                                    @if (isLoading)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    <i class="bi bi-brain me-2"></i>Scrape with AI
                                </button>
                                <button class="btn-scraping btn-success" @onclick="ExportEnhancedCsv" disabled="@(enhancedScholarships.Count == 0)">
                                    <i class="bi bi-file-earmark-csv me-2"></i>Export CSV
                                </button>
                            </div>
                            <div class="scraping-help mt-3">
                                <i class="bi bi-info-circle me-2"></i>
                                AI will automatically extract and structure scholarship data into database-ready format
                            </div>
                            <!-- Progress / Status Bar -->
                            @if (showProgress)
                            {
                                <div class="scrape-progress mt-3">
                                    <div class="d-flex justify-content-between align-items-center mb-1">
                                        <small class="text-muted">@progressText</small>
                                        <small class="text-muted">@progressPercent% </small>
                                    </div>
                                    <div class="progress" style="height: 10px;">
                                        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: @progressPercent%" aria-valuenow="@progressPercent" aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="col-lg-4">
                    <div class="scraping-stats">
                        <div class="stat-item">
                            <div class="stat-value">@enhancedScholarships.Count</div>
                            <div class="stat-label">AI Parsed Scholarships</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value">@(enhancedScholarships.Count > 0 ? (enhancedScholarships.Average(s => s.ParsingConfidence) * 100).ToString("F1") + "%" : "0%")</div>
                            <div class="stat-label">Average Confidence</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value">@lastEnhancedScrapeTime</div>
                            <div class="stat-label">Last AI Scrape</div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Enhanced Scraped Scholarships Table -->
            @if (enhancedScholarships.Any())
            {
                <div class="scraped-data-card mt-4">
                    <div class="scraped-data-header">
                        <div class="scraped-data-icon">
                            <i class="bi bi-table"></i>
                        </div>
                        <div>
                            <h5>AI-Parsed Scholarship Data</h5>
                            <p class="mb-0">@enhancedScholarships.Count scholarships ready for database import</p>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table scraped-data-table">
                            <thead>
                                <tr>
                                    <th>Title</th>
                                    <th>Monetary Value</th>
                                    <th>Deadline</th>
                                    <th>GPA Requirement</th>
                                    <th>Confidence</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var scholarship in enhancedScholarships.Take(10))
                                {
                                    <tr>
                                        <td>
                                            <strong>@scholarship.Title</strong>
                                            @if (!string.IsNullOrEmpty(scholarship.RequiredCourse))
                                            {
                                                <br><small class="text-muted">Course: @scholarship.RequiredCourse</small>
                                            }
                                        </td>
                                        <td>
                                            @if (scholarship.MonetaryValue.HasValue)
                                            {
                                                <span class="badge bg-success">₱@scholarship.MonetaryValue.Value.ToString("N0")</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">N/A</span>
                                            }
                                        </td>
                                        <td>
                                            @if (scholarship.ApplicationDeadline.HasValue)
                                            {
                                                @scholarship.ApplicationDeadline.Value.ToString("MMM dd, yyyy")
                                            }
                                            else
                                            {
                                                <span class="text-muted">Not specified</span>
                                            }
                                        </td>
                                        <td>
                                            @if (scholarship.MinimumGPA.HasValue)
                                            {
                                                @scholarship.MinimumGPA.Value.ToString("F2")
                                            }
                                            else
                                            {
                                                <span class="text-muted">N/A</span>
                                            }
                                        </td>
                                        <td>
                                            <span class="badge @(scholarship.ParsingConfidence >= 0.7 ? "bg-success" : scholarship.ParsingConfidence >= 0.4 ? "bg-warning" : "bg-danger")">
                                                @((scholarship.ParsingConfidence * 100).ToString("F0"))%
                                            </span>
                                        </td>
                                        <td>
                                            <button class="btn btn-modern-secondary btn-sm" @onclick="() => ViewScholarshipDetails(scholarship)" title="View">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        </div>
    }
    else if (activeTab == 1)
    {
        <!-- Scholarship Approval Tab -->
        <div class="scholarship-management-container">
            <!-- Statistics Cards -->
            <div class="stats-grid">
                <div class="stat-card total-scraped">
                    <div class="stat-icon">
                        <i class="fas fa-database"></i>
                    </div>
                    <div class="stat-content">
                        <h3 class="stat-number">@scrapedTotalCount</h3>
                        <p class="stat-label">Total Scraped</p>
                        <span class="stat-trend positive">+@scrapedTodayCount today</span>
                    </div>
                </div>

                <div class="stat-card pending-review">
                    <div class="stat-icon">
                        <i class="fas fa-clock"></i>
                    </div>
                    <div class="stat-content">
                        <h3 class="stat-number">@scrapedPendingCount</h3>
                        <p class="stat-label">Pending Review</p>
                        <span class="stat-trend neutral">Awaiting approval</span>
                    </div>
                </div>

                <div class="stat-card approved">
                    <div class="stat-icon">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <div class="stat-content">
                        <h3 class="stat-number">@scrapedApprovedCount</h3>
                        <p class="stat-label">Approved</p>
                        <span class="stat-trend positive">Live on platform</span>
                    </div>
                </div>

                <div class="stat-card avg-confidence">
                    <div class="stat-icon">
                        <i class="fas fa-brain"></i>
                    </div>
                    <div class="stat-content">
                        <h3 class="stat-number">@($"{scrapedAverageConfidence:P0}")</h3>
                        <p class="stat-label">Avg Confidence</p>
                        <span class="stat-trend @(scrapedAverageConfidence > 0.8 ? "positive" : "neutral")">AI Quality Score</span>
                    </div>
                </div>
            </div>

            <!-- Filters and Search -->
            <div class="filters-section">
                <div class="filters-header">
                    <div class="filters-title-section">
                        <div class="filters-icon">
                            <i class="fas fa-filter"></i>
                        </div>
                        <div class="filters-title-content">
                            <h3 class="filters-title">Filter & Search Scholarships</h3>
                            <p class="filters-subtitle">Refine your search to find specific scholarships</p>
                        </div>
                    </div>
                    <button class="btn btn-modern-secondary btn-sm" @onclick="ClearApprovalFilters">
                        <i class="fas fa-undo me-1"></i>
                        Clear Filters
                    </button>
                </div>

                <div class="filters-content">
                    <!-- Search Row - Full Width -->
                    <div class="row search-row">
                        <div class="col-12">
                            <div class="filter-group">
                                <label class="form-label">Search Scholarships</label>
                                <div class="search-input-container">
                                    <input type="text" class="form-control" @bind="approvalSearchQuery" @bind:event="oninput" @bind:after="OnSearchInputChanged" placeholder="Search by title, description, requirements, or source...">
                                    <i class="fas fa-search search-input-icon"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Filters Row - Evenly Spaced -->
                    <div class="row filters-row">
                        <div class="col-sm-6 col-md-3">
                            <div class="filter-group">
                                <label class="form-label">Status</label>
                                <select class="form-select" @bind="approvalStatusFilter" @bind:after="ApplyApprovalFilters">
                                    <option value="">All Statuses</option>
                                    <option value="Scraped">Scraped</option>
                                    <option value="UnderReview">Under Review</option>
                                    <option value="Approved">Approved</option>
                                    <option value="Rejected">Rejected</option>
                                    <option value="Archived">Archived</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-sm-6 col-md-3">
                            <div class="filter-group">
                                <label class="form-label">Confidence</label>
                                <select class="form-select" @bind="approvalConfidenceFilter" @bind:after="ApplyApprovalFilters">
                                    <option value="">All Levels</option>
                                    <option value="high">High (80%+)</option>
                                    <option value="medium">Medium (60-80%)</option>
                                    <option value="low">Low (&lt;60%)</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-sm-6 col-md-3">
                            <div class="filter-group">
                                <label class="form-label">Source</label>
                                <select class="form-select" @bind="approvalSourceFilter" @bind:after="ApplyApprovalFilters">
                                    <option value="">All Sources</option>
                                    @foreach (var source in approvalAvailableSources)
                                    {
                                        <option value="@source">@source</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-sm-6 col-md-3">
                            <div class="filter-group">
                                <label class="form-label">Date</label>
                                <select class="form-select" @bind="approvalDateFilter" @bind:after="ApplyApprovalFilters">
                                    <option value="">All Dates</option>
                                    <option value="today">Today</option>
                                    <option value="week">This Week</option>
                                    <option value="month">This Month</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Scholarships Data Table -->
            <div class="scholarships-table-section">
                <div class="table-header">
                    <div class="table-title-section centered">
                        <div class="table-icon">
                            <i class="fas fa-table"></i>
                        </div>
                        <div class="table-title-content">
                            <h3 class="table-title">Scraped Scholarships</h3>
                            <div class="record-count">
                                Showing @approvalPaginatedScholarships.Count() of @approvalFilteredScholarships.Count() scholarships
                            </div>
                        </div>
                    </div>
                    <div class="table-actions">
                        <button class="btn @(approvalSelectedScholarshipIds.Count == approvalPaginatedScholarships.Count() && approvalPaginatedScholarships.Any() ? "btn-primary" : "btn-outline-primary") btn-sm" @onclick="ToggleApprovalSelectAllButton" title="@(approvalSelectedScholarshipIds.Count == approvalPaginatedScholarships.Count() && approvalPaginatedScholarships.Any() ? "Deselect All" : "Select All")">
                            <i class="fas @(approvalSelectedScholarshipIds.Count == approvalPaginatedScholarships.Count() && approvalPaginatedScholarships.Any() ? "fa-check-square" : "fa-square")"></i>
                        </button>
                        <div class="view-toggle">
                            <button class="btn @(approvalViewMode == "table" ? "btn-primary" : "btn-outline-primary") btn-sm" @onclick='() => SetApprovalViewMode("table")'>
                                <i class="fas fa-table"></i>
                            </button>
                            <button class="btn @(approvalViewMode == "cards" ? "btn-primary" : "btn-outline-primary") btn-sm" @onclick='() => SetApprovalViewMode("cards")'>
                                <i class="fas fa-th"></i>
                            </button>
                        </div>
                        <button class="btn btn-success btn-sm" @onclick="ExportApprovalFilteredData">
                            <i class="fas fa-download me-1"></i>
                            Export
                        </button>
                    </div>
                </div>

                @if (approvalIsLoading)
                {
                    <div class="loading-spinner">
                        <div class="spinner-border text-primary" role="status"></div>
                        <p class="mt-3">Loading scholarship data...</p>
                    </div>
                }
                else if (approvalViewMode == "table")
                {
                    <!-- Direct table without card wrapper -->
                    <div class="table-responsive">
                        <table class="table scholarship-table">
                            <thead>
                                <tr>
                                    <th class="sortable" @onclick='() => ApprovalSortBy("Title")' style="width: 35%;">
                                        Title
                                        @if (approvalSortColumn == "Title")
                                        {
                                            <i class="fas @(approvalSortAscending ? "fa-sort-up" : "fa-sort-down") ms-1"></i>
                                        }
                                    </th>
                                    <th class="sortable" @onclick='() => ApprovalSortBy("Status")' style="width: 15%;">
                                        Status
                                        @if (approvalSortColumn == "Status")
                                        {
                                            <i class="fas @(approvalSortAscending ? "fa-sort-up" : "fa-sort-down") ms-1"></i>
                                        }
                                    </th>
                                    <th class="sortable" @onclick='() => ApprovalSortBy("ParsingConfidence")' style="width: 15%;">
                                        Confidence
                                        @if (approvalSortColumn == "ParsingConfidence")
                                        {
                                            <i class="fas @(approvalSortAscending ? "fa-sort-up" : "fa-sort-down") ms-1"></i>
                                        }
                                    </th>
                                    <th class="sortable" @onclick='() => ApprovalSortBy("ScrapedAt")' style="width: 12%;">
                                        Date
                                        @if (approvalSortColumn == "ScrapedAt")
                                        {
                                            <i class="fas @(approvalSortAscending ? "fa-sort-up" : "fa-sort-down") ms-1"></i>
                                        }
                                    </th>
                                    <th style="width: 23%; text-align: center;">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var scholarship in approvalPaginatedScholarships)
                                {
                                    <tr class="@GetApprovalRowClass(scholarship) selectable-row" @onclick="() => ToggleRowSelection(scholarship)" @onclick:stopPropagation="false">
                                        <td>
                                            <div class="scholarship-title">
                                                @scholarship.Title
                                            </div>
                                            <small class="text-muted">@GetApprovalSourceName(scholarship.SourceUrl)</small>
                                        </td>
                                        <td>
                                            <span class="badge @GetApprovalStatusClass(GetApprovalScholarshipStatus(scholarship))">
                                                @GetApprovalStatusIcon(GetApprovalScholarshipStatus(scholarship))
                                                @GetApprovalScholarshipStatus(scholarship)
                                            </span>
                                        </td>
                                        <td>
                                            <div class="confidence-indicator">
                                                <div class="confidence-bar">
                                                    <div class="confidence-fill" style="width: @((scholarship.ParsingConfidence * 100).ToString("F0"))%"></div>
                                                </div>
                                                <span class="confidence-text">@((scholarship.ParsingConfidence * 100).ToString("F0"))%</span>
                                            </div>
                                        </td>
                                        <td class="scraped-date-cell">
                                            <div class="scraped-date-info">
                                                <span class="date-main">@scholarship.ScrapedAt.ToString("MMM dd")</span>
                                                <span class="time-ago-inline">(@((DateTime.Now - scholarship.ScrapedAt).TotalHours < 24 ? (DateTime.Now - scholarship.ScrapedAt).TotalHours.ToString("F0") + "h" : (DateTime.Now - scholarship.ScrapedAt).TotalDays.ToString("F0") + "d"))</span>
                                            </div>
                                        </td>
                                        <td style="text-align: center;" @onclick:stopPropagation="true">
                                            <div class="action-buttons-modern">
                                                <button class="btn btn-modern-primary btn-sm" @onclick="() => EditApprovalScholarship(scholarship)" title="Edit">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-modern-secondary btn-sm" @onclick="() => PreviewApprovalScholarship(scholarship)" title="View">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                                <button class="btn btn-modern-success btn-sm" disabled="@approvalInProgress.Contains(scholarship.Id)" @onclick="() => ApproveApprovalScholarship(scholarship)" title="Approve & Publish">
                                                    @if (approvalInProgress.Contains(scholarship.Id))
                                                    {
                                                        <span class="modern-spinner me-1"></span>
                                                    }
                                                    else
                                                    {
                                                        <i class="fas fa-check"></i>
                                                    }
                                                </button>
                                                <button class="btn btn-modern-danger btn-sm" disabled="@approvalInProgress.Contains(scholarship.Id)" @onclick="() => DeleteApprovalScholarship(scholarship)" title="Delete">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <!-- Modern Pagination -->
                    <div class="modern-pagination-section">
                        <div class="pagination-info">
                            <span class="pagination-text">Page @approvalCurrentPage of @approvalTotalPages</span>
                            <span class="pagination-count">(@approvalFilteredScholarships.Count() total scholarships)</span>
                        </div>
                        <nav class="pagination-nav">
                            <ul class="modern-pagination">
                                <li class="page-item @(approvalCurrentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangeApprovalPage(1)" disabled="@(approvalCurrentPage == 1)">
                                        <i class="fas fa-angle-double-left"></i>
                                    </button>
                                </li>
                                <li class="page-item @(approvalCurrentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangeApprovalPage(approvalCurrentPage - 1)" disabled="@(approvalCurrentPage == 1)">
                                        <i class="fas fa-angle-left"></i>
                                    </button>
                                </li>
                                @for (int i = Math.Max(1, approvalCurrentPage - 2); i <= Math.Min(approvalTotalPages, approvalCurrentPage + 2); i++)
                                {
                                    int page = i;
                                    <li class="page-item @(approvalCurrentPage == page ? "active" : "")">
                                        <button class="page-link" @onclick="() => ChangeApprovalPage(page)">@(page)</button>
                                    </li>
                                }
                                <li class="page-item @(approvalCurrentPage == approvalTotalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangeApprovalPage(approvalCurrentPage + 1)" disabled="@(approvalCurrentPage == approvalTotalPages)">
                                        <i class="fas fa-angle-right"></i>
                                    </button>
                                </li>
                                <li class="page-item @(approvalCurrentPage == approvalTotalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangeApprovalPage(approvalTotalPages)" disabled="@(approvalCurrentPage == approvalTotalPages)">
                                        <i class="fas fa-angle-double-right"></i>
                                    </button>
                                </li>
                            </ul>
                        </nav>
                    </div>
                }
                else
                {
                    <!-- Cards centered view -->
                    <div class="cards-view-centered">
                        <div class="row g-4 justify-content-center">
                            @foreach (var scholarship in approvalPaginatedScholarships)
                            {
                                <div class="col-lg-6 col-xl-4">
                                    <div class="scholarship-card @GetApprovalRowClass(scholarship)">
                                        <div class="scholarship-card-header">
                                            <div class="scholarship-checkbox">
                                                <input type="checkbox" class="form-check-input" 
                                                       checked="@approvalSelectedScholarshipIds.Contains(GetApprovalScholarshipId(scholarship))"
                                                       @onchange="(e) => ToggleApprovalScholarshipSelection(scholarship, e)" />
                                            </div>
                                            <div class="scholarship-status">
                                                <span class="badge @GetApprovalStatusClass(GetApprovalScholarshipStatus(scholarship))">
                                                    @GetApprovalStatusIcon(GetApprovalScholarshipStatus(scholarship))
                                                    @GetApprovalScholarshipStatus(scholarship)
                                                </span>
                                            </div>
                                        </div>
                                        
                                        <div class="scholarship-card-body">
                                            <h5 class="scholarship-card-title">@scholarship.Title</h5>
                                            <p class="scholarship-card-source">@GetApprovalSourceName(scholarship.SourceUrl)</p>
                                            
                                            <div class="scholarship-card-meta">
                                                <div class="confidence-section">
                                                    <label>Confidence</label>
                                                    <div class="confidence-indicator">
                                                        <div class="confidence-bar">
                                                            <div class="confidence-fill" style="width: @((scholarship.ParsingConfidence * 100).ToString("F0"))%"></div>
                                                        </div>
                                                        <span class="confidence-text">@((scholarship.ParsingConfidence * 100).ToString("F0"))%</span>
                                                    </div>
                                                </div>
                                                
                                                <div class="scraped-date">
                                                    <label>Scraped</label>
                                                    <div class="date-info">
                                                        <span class="date">@scholarship.ScrapedAt.ToString("MMM dd, yyyy")</span>
                                                        <span class="time-ago">@((DateTime.Now - scholarship.ScrapedAt).TotalHours < 24 ? (DateTime.Now - scholarship.ScrapedAt).TotalHours.ToString("F0") + "h ago" : (DateTime.Now - scholarship.ScrapedAt).TotalDays.ToString("F0") + "d ago")</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        
                                        <div class="scholarship-card-actions">
                                            <button class="btn btn-modern-primary btn-sm" @onclick="() => EditApprovalScholarship(scholarship)" title="Edit">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-modern-secondary btn-sm" @onclick="() => PreviewApprovalScholarship(scholarship)" title="View">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            <button class="btn btn-modern-success btn-sm" disabled="@approvalInProgress.Contains(scholarship.Id)" @onclick="() => ApproveApprovalScholarship(scholarship)" title="Approve & Publish">
                                                @if (approvalInProgress.Contains(scholarship.Id))
                                                {
                                                    <span class="modern-spinner me-1"></span>
                                                }
                                                else
                                                {
                                                    <i class="fas fa-check"></i>
                                                }
                                            </button>
                                            <button class="btn btn-modern-danger btn-sm" disabled="@approvalInProgress.Contains(scholarship.Id)" @onclick="() => DeleteApprovalScholarship(scholarship)" title="Delete">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        
                        @if (!approvalPaginatedScholarships.Any())
                        {
                            <div class="no-results-card">
                                <div class="no-results-icon">
                                    <i class="fas fa-search"></i>
                                </div>
                                <h5>No scholarships found</h5>
                                <p class="text-muted">Try adjusting your filters or search terms.</p>
                            </div>
                        }
                    </div>

                    <!-- Modern Pagination for Cards -->
                    <div class="modern-pagination-section">
                        <div class="pagination-info">
                            <span class="pagination-text">Page @approvalCurrentPage of @approvalTotalPages</span>
                            <span class="pagination-count">(@approvalFilteredScholarships.Count() total scholarships)</span>
                        </div>
                        <nav class="pagination-nav">
                            <ul class="modern-pagination">
                                <li class="page-item @(approvalCurrentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangeApprovalPage(1)" disabled="@(approvalCurrentPage == 1)">
                                        <i class="fas fa-angle-double-left"></i>
                                    </button>
                                </li>
                                <li class="page-item @(approvalCurrentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangeApprovalPage(approvalCurrentPage - 1)" disabled="@(approvalCurrentPage == 1)">
                                        <i class="fas fa-angle-left"></i>
                                    </button>
                                </li>
                                @for (int i = Math.Max(1, approvalCurrentPage - 2); i <= Math.Min(approvalTotalPages, approvalCurrentPage + 2); i++)
                                {
                                    int page = i;
                                    <li class="page-item @(approvalCurrentPage == page ? "active" : "")">
                                        <button class="page-link" @onclick="() => ChangeApprovalPage(page)">@(page)</button>
                                    </li>
                                }
                                <li class="page-item @(approvalCurrentPage == approvalTotalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangeApprovalPage(approvalCurrentPage + 1)" disabled="@(approvalCurrentPage == approvalTotalPages)">
                                        <i class="fas fa-angle-right"></i>
                                    </button>
                                </li>
                                <li class="page-item @(approvalCurrentPage == approvalTotalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangeApprovalPage(approvalTotalPages)" disabled="@(approvalCurrentPage == approvalTotalPages)">
                                        <i class="fas fa-angle-double-right"></i>
                                    </button>
                                </li>
                            </ul>
                        </nav>
                    </div>
                }
            </div>
        </div>
    }
    else if (activeTab == 2)
    {
        <!-- Institution & Organization Verification Tab -->
        <div class="scraping-section">
            <div class="row g-4">
                <div class="col-lg-6">
                    <div class="scraping-card">
                        <div class="scraping-card-header">
                            <div class="scraping-card-icon institution">
                                <i class="bi bi-building"></i>
                            </div>
                            <div>
                                <h5>Institution Verification</h5>
                                <p class="mb-0">Verify educational institutions</p>
                            </div>
                        </div>
                        <div class="scraping-card-body">
                            <div class="mb-3">
                                <label class="form-label fw-semibold">Institution Name</label>
                                <input type="text" class="form-control scraping-input" @bind="institutionName" 
                                       placeholder="University of the Philippines" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-semibold">Website (Optional)</label>
                                <input type="url" class="form-control scraping-input" @bind="institutionWebsite" 
                                       placeholder="https://up.edu.ph" />
                            </div>
                            <button class="btn-scraping btn-info" @onclick="VerifyInstitution" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                <i class="bi bi-check2-circle me-2"></i>Verify Institution
                            </button>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="scraping-card">
                        <div class="scraping-card-header">
                            <div class="scraping-card-icon organization">
                                <i class="bi bi-bank"></i>
                            </div>
                            <div>
                                <h5>Organization Verification</h5>
                                <p class="mb-0">Verify benefactor organizations</p>
                            </div>
                        </div>
                        <div class="scraping-card-body">
                            <div class="mb-3">
                                <label class="form-label fw-semibold">Organization Name</label>
                                <input type="text" class="form-control scraping-input" @bind="organizationName" 
                                       placeholder="Philippine Foundation" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-semibold">Website</label>
                                <input type="url" class="form-control scraping-input" @bind="organizationWebsite" 
                                       placeholder="https://foundation.org.ph" />
                            </div>
                            <button class="btn-scraping btn-warning" @onclick="VerifyOrganization" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                <i class="bi bi-shield-check me-2"></i>Verify Organization
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Verified Institutions Table -->
            @if (verifiedInstitutionsList.Any())
            {
                <div class="scraped-data-section mt-4">
                    <div class="scraped-data-header">
                        <h5><i class="bi bi-building me-2"></i>Verified Institutions</h5>
                        <div class="data-actions">
                            <button class="btn-scraping btn-outline-primary btn-sm" @onclick="() => ExportInstitutionData()">
                                <i class="bi bi-download me-1"></i>Export
                            </button>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-hover scraped-data-table">
                            <thead>
                                <tr>
                                    <th>Institution Name</th>
                                    <th>Website</th>
                                    <th>Status</th>
                                    <th>Verified At</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var institution in verifiedInstitutionsList)
                                {
                                    <tr>
                                        <td>@institution.Name</td>
                                        <td>@(string.IsNullOrEmpty(institution.Website) ? "N/A" : institution.Website)</td>
                                        <td>
                                            <span class="badge @(institution.IsVerified ? "bg-success" : "bg-danger")">
                                                @(institution.IsVerified ? "✓ Verified" : "✗ Not Verified")
                                            </span>
                                        </td>
                                        <td>@institution.VerifiedAt.ToString("MMM dd, yyyy HH:mm")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
            
            <!-- Verified Organizations Table -->
            @if (verifiedOrganizationsList.Any())
            {
                <div class="scraped-data-section mt-4">
                    <div class="scraped-data-header">
                        <h5><i class="bi bi-bank me-2"></i>Verified Organizations</h5>
                        <div class="data-actions">
                            <button class="btn-scraping btn-outline-primary btn-sm" @onclick="() => ExportOrganizationData()">
                                <i class="bi bi-download me-1"></i>Export
                            </button>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-hover scraped-data-table">
                            <thead>
                                <tr>
                                    <th>Organization Name</th>
                                    <th>Website</th>
                                    <th>Status</th>
                                    <th>Verified At</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var organization in verifiedOrganizationsList)
                                {
                                    <tr>
                                        <td>@organization.Name</td>
                                        <td>@organization.Website</td>
                                        <td>
                                            <span class="badge @(organization.IsVerified ? "bg-success" : "bg-danger")">
                                                @(organization.IsVerified ? "✓ Verified" : "✗ Not Verified")
                                            </span>
                                        </td>
                                        <td>@organization.VerifiedAt.ToString("MMM dd, yyyy HH:mm")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        </div>
    }

    <!-- Scholarship Details Modal -->


    <!-- Scholarship Details Modal -->
    @if (selectedScholarship != null)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-lg modal-dialog-scrollable modal-dialog-centered">
                <div class="modal-content modern-modal">
                    <div class="modal-header modern-modal-header">
                        <h5 class="modal-title">
                            <i class="fas fa-graduation-cap me-2"></i>
                            Scholarship Details
                        </h5>
                        <button type="button" class="modern-btn-close" @onclick="CloseModal">
                            <i class="bi bi-x"></i>
                        </button>
                    </div>
                    <div class="modal-body modern-modal-body">
                        <div class="scholarship-details">
                            @if (isEditingScholarship && editableScholarship != null)
                            {
                                <!-- Editable Fields -->
                                <div class="detail-section">
                                    <div class="mb-3">
                                        <label class="form-label">Title</label>
                                        <input class="form-control" @bind="editableScholarship.Title" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Description</label>
                                        <textarea class="form-control" rows="3" @bind="editableScholarship.Description"></textarea>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Requirements</label>
                                        <textarea class="form-control" rows="3" @bind="editableScholarship.Requirements"></textarea>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Benefits</label>
                                        <input class="form-control" @bind="editableScholarship.Benefits" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Monetary Value</label>
                                        <input class="form-control" @bind="editableScholarship.MonetaryValue" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Application Deadline</label>
                                        <input class="form-control" type="date" @bind-value="@editableScholarship.ApplicationDeadline" @bind-value:event="oninput" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Source URL</label>
                                        <input class="form-control" @bind="editableScholarship.SourceUrl" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">External Application URL</label>
                                        <input class="form-control" @bind="editableScholarship.ExternalApplicationUrl" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Minimum GPA</label>
                                        <input class="form-control" type="number" step="0.01" @bind="editableScholarship.MinimumGPA" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Required Course</label>
                                        <input class="form-control" @bind="editableScholarship.RequiredCourse" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Required Year Level</label>
                                        <input class="form-control" @bind="editableScholarship.RequiredYearLevel" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Required University</label>
                                        <input class="form-control" @bind="editableScholarship.RequiredUniversity" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Slots Available</label>
                                        <input class="form-control" type="number" @bind="editableScholarship.SlotsAvailable" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Parsing Notes</label>
                                        <textarea class="form-control" rows="2" @bind="parsingNotesText"></textarea>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <!-- Basic Information -->
                                <div class="detail-section">
                                    <h6 class="detail-section-title">
                                        <i class="bi bi-info-circle me-2"></i>Basic Information
                                    </h6>
                                    <div class="detail-grid">
                                        <div class="detail-item">
                                            <label>Title:</label>
                                            <span class="detail-value">@selectedScholarship.Title</span>
                                        </div>
                                        <div class="detail-item">
                                            <label>Source URL:</label>
                                            <span class="detail-value">
                                                <a href="@selectedScholarship.SourceUrl" target="_blank" class="text-decoration-none">
                                                    @GetSourceHost(selectedScholarship.SourceUrl)
                                                    <i class="bi bi-box-arrow-up-right ms-1"></i>
                                                </a>
                                            </span>
                                        </div>
                                        <div class="detail-item">
                                            <label>Scraped At:</label>
                                            <span class="detail-value">@selectedScholarship.ScrapedAt.ToString("MMM dd, yyyy HH:mm")</span>
                                        </div>
                                        <div class="detail-item">
                                            <label>AI Confidence:</label>
                                            <span class="detail-value">
                                                <span class="badge @(selectedScholarship.ParsingConfidence >= 0.7 ? "bg-success" : selectedScholarship.ParsingConfidence >= 0.4 ? "bg-warning" : "bg-danger")">
                                                    @((selectedScholarship.ParsingConfidence * 100).ToString("F1"))%
                                                </span>
                                            </span>
                                        </div>
                                    </div>
                                </div>

                            <!-- Financial Information -->
                            <div class="detail-section">
                                <h6 class="detail-section-title">
                                    <i class="bi bi-currency-dollar me-2"></i>Financial Information
                                </h6>
                                <div class="detail-grid">
                                    <div class="detail-item">
                                        <label>Benefits:</label>
                                        <span class="detail-value">@(string.IsNullOrWhiteSpace(selectedScholarship.Benefits) ? "Not specified" : selectedScholarship.Benefits)</span>
                                    </div>
                                    <div class="detail-item">
                                        <label>Monetary Value:</label>
                                        <span class="detail-value">
                                            @if (selectedScholarship.MonetaryValue.HasValue)
                                            {
                                                <span class="text-success fw-bold">₱@selectedScholarship.MonetaryValue.Value.ToString("N0")</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Not specified</span>
                                            }
                                        </span>
                                    </div>
                                    <div class="detail-item">
                                        <label>Available Slots:</label>
                                        <span class="detail-value">
                                            @(selectedScholarship.SlotsAvailable?.ToString() ?? "Not specified")
                                        </span>
                                    </div>
                                </div>
                            </div>

                            <!-- Application Information -->
                            <div class="detail-section">
                                <h6 class="detail-section-title">
                                    <i class="bi bi-calendar-event me-2"></i>Application Information
                                </h6>
                                <div class="detail-grid">
                                    <div class="detail-item">
                                        <label>Application Deadline:</label>
                                        <span class="detail-value">
                                            @if (selectedScholarship.ApplicationDeadline.HasValue)
                                            {
                                                <span class="text-warning fw-bold">@selectedScholarship.ApplicationDeadline.Value.ToString("MMMM dd, yyyy")</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Not specified</span>
                                            }
                                        </span>
                                    </div>
                                    <div class="detail-item">
                                        <label>External Application URL:</label>
                                        <span class="detail-value">
                                            @if (!string.IsNullOrWhiteSpace(selectedScholarship.ExternalApplicationUrl))
                                            {
                                                <a href="@selectedScholarship.ExternalApplicationUrl" target="_blank" class="text-decoration-none">
                                                    Apply Here <i class="bi bi-box-arrow-up-right ms-1"></i>
                                                </a>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Not available</span>
                                            }
                                        </span>
                                    </div>
                                </div>
                            </div>

                            <!-- Eligibility Requirements -->
                            <div class="detail-section">
                                <h6 class="detail-section-title">
                                    <i class="bi bi-check-circle me-2"></i>Eligibility Requirements
                                </h6>
                                <div class="detail-grid">
                                    <div class="detail-item">
                                        <label>Minimum GPA:</label>
                                        <span class="detail-value">
                                            @(selectedScholarship.MinimumGPA?.ToString("F2") ?? "Not specified")
                                        </span>
                                    </div>
                                    <div class="detail-item">
                                        <label>Required Course:</label>
                                        <span class="detail-value">
                                            @(string.IsNullOrWhiteSpace(selectedScholarship.RequiredCourse) ? "Any course" : selectedScholarship.RequiredCourse)
                                        </span>
                                    </div>
                                    <div class="detail-item">
                                        <label>Required Year Level:</label>
                                        <span class="detail-value">
                                            @if (selectedScholarship.RequiredYearLevel.HasValue)
                                            {
                                                @($"Year {selectedScholarship.RequiredYearLevel.Value}")
                                            }
                                            else
                                            {
                                                <span class="text-muted">Any year level</span>
                                            }
                                        </span>
                                    </div>
                                    <div class="detail-item">
                                        <label>Required University:</label>
                                        <span class="detail-value">
                                            @(string.IsNullOrWhiteSpace(selectedScholarship.RequiredUniversity) ? "Any university" : selectedScholarship.RequiredUniversity)
                                        </span>
                                    </div>
                                </div>
                            </div>

                            <!-- Full Description -->
                            @if (!string.IsNullOrWhiteSpace(selectedScholarship.Description))
                            {
                                <div class="detail-section">
                                    <h6 class="detail-section-title">
                                        <i class="bi bi-file-text me-2"></i>Description
                                    </h6>
                                    <div class="detail-description">
                                        @selectedScholarship.Description
                                    </div>
                                </div>
                            }

                            <!-- Requirements -->
                            @if (!string.IsNullOrWhiteSpace(selectedScholarship.Requirements))
                            {
                                <div class="detail-section">
                                    <h6 class="detail-section-title">
                                        <i class="bi bi-list-check me-2"></i>Requirements
                                    </h6>
                                    <div class="detail-description">
                                        @selectedScholarship.Requirements
                                    </div>
                                </div>
                            }

                            <!-- AI Parsing Notes -->
                            @if (selectedScholarship.ParsingNotes.Any())
                            {
                                <div class="detail-section">
                                    <h6 class="detail-section-title">
                                        <i class="bi bi-robot me-2"></i>AI Parsing Notes
                                    </h6>
                                    <div class="parsing-notes">
                                        @foreach (var note in selectedScholarship.ParsingNotes)
                                        {
                                            <span class="badge bg-info me-1">@note</span>
                                        }
                                    </div>
                                </div>
                            }

                            <!-- Raw Text (Collapsible) -->
                            <div class="detail-section">
                                <h6 class="detail-section-title">
                                    <button class="btn btn-link p-0 text-decoration-none" @onclick="ToggleRawText">
                                        <i class="bi bi-@(showRawText ? "chevron-down" : "chevron-right") me-2"></i>Raw Scraped Text
                                    </button>
                                </h6>
                                @if (showRawText)
                                {
                                    <div class="raw-text-container">
                                        <pre class="raw-text">@selectedScholarship.RawText</pre>
                                    </div>
                                }
                            </div>
                            }
                        </div>
                    </div>
                    <div class="modal-footer modern-modal-footer">
                        <button type="button" class="btn btn-modern-secondary" @onclick="CloseModal">
                            <i class="fas fa-times me-1"></i>
                            Close
                        </button>
                        @if (isEditingScholarship && editableScholarship != null)
                        {
                            <button type="button" class="btn btn-modern-success" @onclick="SaveEditedScholarship">
                                <i class="fas fa-save me-1"></i>Save
                            </button>
                            <button type="button" class="btn btn-modern-secondary" @onclick="CancelEditScholarship">
                                <i class="fas fa-ban me-1"></i>Cancel
                            </button>
                        }
                        else if (approvalAllScholarships.Any(s => s.Title == selectedScholarship.Title && s.ScrapedAt == selectedScholarship.ScrapedAt))
                        {
                            <button type="button" class="btn btn-modern-primary" @onclick="() => EditApprovalScholarship(approvalAllScholarships.First(s => s.Title == selectedScholarship.Title && s.ScrapedAt == selectedScholarship.ScrapedAt))">
                                <i class="fas fa-edit me-1"></i>Edit
                            </button>
                        }
                        <button type="button" class="btn btn-modern-success" @onclick="ExportSingleScholarship">
                            <i class="bi bi-download me-1"></i>Export as CSV
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Scholarship Edit Modal -->
    @if (showEditModal)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-lg modal-dialog-centered">
                <div class="modal-content modern-modal">
                    <div class="modal-header modern-modal-header">
                        <h5 class="modal-title">
                            <i class="fas fa-edit me-2"></i>
                            Edit Scholarship
                        </h5>
                        <button type="button" class="modern-btn-close" @onclick="CloseEditModal">
                            <i class="bi bi-x"></i>
                        </button>
                    </div>
                    <div class="modal-body modern-modal-body">
                        @if (editingApprovalScholarship != null)
                        {
                            <div class="modern-form-group">
                                <label class="modern-form-label">Title</label>
                                <input type="text" class="form-control" @bind="editingApprovalScholarship.Title" />
                            </div>
                            
                            <div class="modern-form-group">
                                <label class="modern-form-label">Description</label>
                                <textarea class="form-control" rows="4" @bind="editingApprovalScholarship.Description"></textarea>
                            </div>
                            
                            <div class="modern-form-group">
                                <label class="modern-form-label">Requirements</label>
                                <textarea class="form-control" rows="3" @bind="editingApprovalScholarship.Requirements"></textarea>
                            </div>
                            
                            <div class="modern-form-group">
                                <label class="modern-form-label">Benefits</label>
                                <input type="text" class="form-control" @bind="editingApprovalScholarship.Benefits" />
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="modern-form-group">
                                        <label class="modern-form-label">Monetary Value</label>
                                        <input type="number" class="form-control" @bind="editingApprovalScholarship.MonetaryValue" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="modern-form-group">
                                        <label class="modern-form-label">Slots Available</label>
                                        <input type="number" class="form-control" @bind="editingApprovalScholarship.SlotsAvailable" />
                                    </div>
                                </div>
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="modern-form-group">
                                        <label class="modern-form-label">Application Deadline</label>
                                        <input type="date" class="form-control" @bind="editingApprovalScholarship.ApplicationDeadline" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="modern-form-group">
                                        <label class="modern-form-label">Minimum GPA</label>
                                        <input type="number" step="0.01" class="form-control" @bind="editingApprovalScholarship.MinimumGPA" />
                                    </div>
                                </div>
                            </div>
                            
                            <div class="modern-form-group">
                                <label class="modern-form-label">External Application URL</label>
                                <input type="url" class="form-control" @bind="editingApprovalScholarship.ExternalApplicationUrl" />
                            </div>
                            
                            <div class="modern-form-group">
                                <label class="modern-form-label">Source URL</label>
                                <input type="url" class="form-control" @bind="editingApprovalScholarship.SourceUrl" readonly />
                            </div>
                        }
                    </div>
                    <div class="modal-footer modern-modal-footer">
                        <button type="button" class="btn btn-modern-secondary" @onclick="CloseEditModal">
                            <i class="fas fa-times me-2"></i>
                            Cancel
                        </button>
                        <button type="button" class="btn btn-modern-primary" @onclick="SaveEditedApprovalScholarship" disabled="@isEditModalLoading">
                            @if (isEditModalLoading)
                            {
                                <span class="modern-spinner me-2"></span>
                            }
                            else
                            {
                                <i class="fas fa-save me-2"></i>
                            }
                            Save Changes
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

</div>

@code {
    private string enhancedScholarshipUrl = "";
    private string institutionName = "";
    private string institutionWebsite = "";
    private string organizationName = "";
    private string organizationWebsite = "";
    private string errorMessage = "";
    private string successMessage = "";
    private bool isLoading = false;
    // Track which scraped scholarship IDs are currently being processed
    private HashSet<string> approvalInProgress = new();
    // Simple inline toasts for per-row feedback
    private List<string> approvalToasts = new();
    private bool showProgress = false;
    private int progressPercent = 0;
    private string progressText = "";
    private int activeTab = 0;
    
    // Statistics
    private string lastEnhancedScrapeTime = "Never";
    
    // Data Lists
    private List<EnhancedScrapedScholarship> enhancedScholarships = new();
    private List<VerifiedInstitution> verifiedInstitutionsList = new();
    private List<VerifiedOrganization> verifiedOrganizationsList = new();
    
    // Selected scholarship for details view
    private EnhancedScrapedScholarship? selectedScholarship = null;
    private bool isEditingScholarship = false;
    private EnhancedScrapedScholarship? editableScholarship = null;
    private string parsingNotesText = "";
    
    // Edit modal for approval scholarships
    private bool showEditModal = false;
    private bool isEditModalLoading = false;
    private c2_eskolar.Models.ScrapedScholarship? editingApprovalScholarship = null;
    
    // Approval Tab Variables
    private int scrapedTotalCount = 0;
    private int scrapedTodayCount = 0;
    private int scrapedPendingCount = 0;
    private int scrapedApprovedCount = 0;
    private double scrapedAverageConfidence = 0.0;
    
    // Approval Tab Data Properties
    private List<c2_eskolar.Models.ScrapedScholarship> approvalAllScholarships = new();
    private IEnumerable<c2_eskolar.Models.ScrapedScholarship> approvalFilteredScholarships = new List<c2_eskolar.Models.ScrapedScholarship>();
    private IEnumerable<c2_eskolar.Models.ScrapedScholarship> approvalPaginatedScholarships = new List<c2_eskolar.Models.ScrapedScholarship>();
    private List<string> approvalAvailableSources = new();
    private HashSet<string> approvalSelectedScholarshipIds = new();

    // Approval Tab Filter Properties
    private string approvalSearchQuery = "";
    private string approvalStatusFilter = "";
    private string approvalConfidenceFilter = "";
    private string approvalSourceFilter = "";
    private string approvalDateFilter = "";

    // Approval Tab UI State Properties
    private bool approvalIsLoading = true;
    private string approvalViewMode = "table";
    private string approvalSortColumn = "ScrapedAt";
    private bool approvalSortAscending = false;

    // Approval Tab Pagination Properties
    private int approvalCurrentPage = 1;
    private int approvalPageSize = 20;
    private int approvalTotalPages = 1;
    
    // Data Models
    public class ScrapedScholarship
    {
        public string Title { get; set; } = "";
        public string Source { get; set; } = "";
        public string Amount { get; set; } = "";
        public string DeadlineDate { get; set; } = "";
        public DateTime ScrapedAt { get; set; }
    }
    
    public class VerifiedInstitution
    {
        public string Name { get; set; } = "";
        public string? Website { get; set; }
        public bool IsVerified { get; set; }
        public DateTime VerifiedAt { get; set; }
    }
    
    public class VerifiedOrganization
    {
        public string Name { get; set; } = "";
        public string Website { get; set; } = "";
        public bool IsVerified { get; set; }
        public DateTime VerifiedAt { get; set; }
    }

    private void SetTab(int tab)
    {
        activeTab = tab;
    }

    private void ExportInstitutionData()
    {
        try
        {
            var json = System.Text.Json.JsonSerializer.Serialize(verifiedInstitutionsList, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
            var fileName = $"institutions-{DateTime.Now:yyyy-MM-dd-HH-mm}.json";
            var fileContent = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(json));
            JSRuntime.InvokeVoidAsync("downloadFile", fileName, fileContent);
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to export institution data: {ex.Message}";
        }
    }
    
    private void ExportOrganizationData()
    {
        try
        {
            var json = System.Text.Json.JsonSerializer.Serialize(verifiedOrganizationsList, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
            var fileName = $"organizations-{DateTime.Now:yyyy-MM-dd-HH-mm}.json";
            var fileContent = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(json));
            JSRuntime.InvokeVoidAsync("downloadFile", fileName, fileContent);
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to export organization data: {ex.Message}";
        }
    }

    private async Task VerifyInstitution()
    {
        if (string.IsNullOrWhiteSpace(institutionName))
        {
            errorMessage = "Please enter an institution name.";
            return;
        }

        isLoading = true;
        errorMessage = "";
        successMessage = "";
        
        try
        {
            var result = await WebScrapingService.VerifyInstitutionAsync(institutionName, institutionWebsite);
            
            verifiedInstitutionsList.Add(new VerifiedInstitution
            {
                Name = institutionName,
                Website = institutionWebsite,
                IsVerified = result.IsVerified,
                VerifiedAt = DateTime.Now
            });
            
            successMessage = $"Institution '{institutionName}' verification completed. Status: {(result.IsVerified ? "✓ Verified" : "✗ Not Verified")}";
            
            // Clear form
            institutionName = "";
            institutionWebsite = "";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error verifying institution");
            errorMessage = $"Failed to verify institution: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }



    private async Task VerifyOrganization()
    {
        if (string.IsNullOrWhiteSpace(organizationName) || string.IsNullOrWhiteSpace(organizationWebsite))
        {
            errorMessage = "Please enter both organization name and website.";
            return;
        }

        isLoading = true;
        errorMessage = "";
        successMessage = "";
        
        try
        {
            var isVerified = await WebScrapingService.VerifyOrganizationAsync(organizationName, organizationWebsite);
            
            verifiedOrganizationsList.Add(new VerifiedOrganization
            {
                Name = organizationName,
                Website = organizationWebsite,
                IsVerified = isVerified,
                VerifiedAt = DateTime.Now
            });
            
            successMessage = $"Organization '{organizationName}' verification completed. Status: {(isVerified ? "✓ Verified" : "✗ Not Verified")}";
            
            // Clear form
            organizationName = "";
            organizationWebsite = "";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error verifying organization");
            errorMessage = $"Failed to verify organization: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    // Enhanced AI Scraping Methods
    private async Task ScrapeWithAI()
    {
        if (string.IsNullOrWhiteSpace(enhancedScholarshipUrl))
        {
            errorMessage = "Please enter a valid URL for AI scraping.";
            return;
        }

    isLoading = true;
        errorMessage = "";
        successMessage = "";
    // Initialize progress
    showProgress = true;
    progressPercent = 0;
    progressText = "Starting AI-enhanced scraping...";
    StateHasChanged();
        
        try
        {
            // Step 1: Scrape and parse with AI using progress callback
            var newScholarships = await EnhancedWebScrapingService.ScrapeAndParseScholarshipsAsync(enhancedScholarshipUrl, UpdateProgress);
            progressPercent = 95;
            progressText = $"Parsed {newScholarships.Count} scholarship(s). Preparing to save...";
            StateHasChanged();
            
            // Step 2: Convert EnhancedScrapedScholarship to database entity and save
            int savedCount = 0;
            var total = Math.Max(1, newScholarships.Count);
            int index = 0;
            foreach (var enhancedScholarship in newScholarships)
            {
                try
                {
                    // Create ScrapedScholarship entity from EnhancedScrapedScholarship
                    var scrapedEntity = new c2_eskolar.Models.ScrapedScholarship
                    {
                        Id = Guid.NewGuid().ToString(),
                        Title = enhancedScholarship.Title,
                        Description = enhancedScholarship.Description,
                        Benefits = enhancedScholarship.Benefits,
                        MonetaryValue = enhancedScholarship.MonetaryValue,
                        ApplicationDeadline = enhancedScholarship.ApplicationDeadline,
                        Requirements = enhancedScholarship.Requirements,
                        SlotsAvailable = enhancedScholarship.SlotsAvailable,
                        MinimumGPA = enhancedScholarship.MinimumGPA,
                        RequiredCourse = enhancedScholarship.RequiredCourse,
                        RequiredYearLevel = enhancedScholarship.RequiredYearLevel,
                        RequiredUniversity = enhancedScholarship.RequiredUniversity,
                        ExternalApplicationUrl = enhancedScholarship.ExternalApplicationUrl,
                        SourceUrl = enhancedScholarship.SourceUrl,
                        ScrapedAt = enhancedScholarship.ScrapedAt,
                        ParsingConfidence = enhancedScholarship.ParsingConfidence,
                        Status = c2_eskolar.Models.ScrapingStatus.Scraped,
                        IsEnhanced = true, // Mark as AI-enhanced
                        RawText = enhancedScholarship.RawText,
                        ParsingNotes = string.Join("; ", enhancedScholarship.ParsingNotes),
                        AuthorAttribution = "EskoBot Intelligence",
                        AiModel = "GPT-4.1 Mini",
                        AiPromptVersion = "1.0",
                        EnhancedAt = DateTime.Now,
                        CreatedAt = DateTime.Now,
                        UpdatedAt = DateTime.Now,
                        CreatedBy = "WebScrapingManagement"
                    };

                    // Save to database using ScrapedScholarshipService
                    var saved = await ScrapedScholarshipService.CreateAsync(scrapedEntity);
                    if (saved != null)
                    {
                        savedCount++;
                    }
                    // Update progress per saved item
                    index++;
                    progressPercent = 30 + (int)((double)index / total * 60); // allocate 30-90% for saves
                    progressText = $"Saving {index} of {total} scholarships... ({savedCount} saved)";
                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "Failed to save scholarship: {Title}", enhancedScholarship.Title);
                }
            }
            
            // Step 3: Add to display list for immediate viewing
            enhancedScholarships.AddRange(newScholarships);
            lastEnhancedScrapeTime = DateTime.Now.ToString("MMM dd, HH:mm");
            
            successMessage = $"Successfully scraped {newScholarships.Count} scholarships and saved {savedCount} to database from {new Uri(enhancedScholarshipUrl).Host}";
            
            if (savedCount < newScholarships.Count)
            {
                errorMessage = $"Warning: Only {savedCount} of {newScholarships.Count} scholarships were saved to database. Check logs for details.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in AI-enhanced scraping");
            errorMessage = $"Failed to scrape with AI: {ex.Message}";
        }
        finally
        {
            // Complete progress and hide
            progressPercent = 100;
            progressText = "Completed";
            StateHasChanged();
            await Task.Delay(700);
            showProgress = false;
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ExportEnhancedCsv()
    {
        try
        {
            var csvContent = await EnhancedWebScrapingService.GenerateScholarshipCsvAsync(enhancedScholarships);
            var fileName = $"ai_scholarships_{DateTime.Now:yyyyMMdd_HHmmss}.csv";
            
            // Convert to base64 for download
            var csvBytes = System.Text.Encoding.UTF8.GetBytes(csvContent);
            var base64Content = Convert.ToBase64String(csvBytes);
            
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, base64Content);
            successMessage = $"Exported {enhancedScholarships.Count} scholarships to CSV file";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error exporting enhanced CSV");
            errorMessage = $"Failed to export CSV: {ex.Message}";
        }
    }

    private void UpdateProgress(int percent, string message)
    {
        progressPercent = percent;
        progressText = message;
        StateHasChanged();
    }

    private void ViewScholarshipDetails(EnhancedScrapedScholarship scholarship)
    {
        selectedScholarship = scholarship;
        StateHasChanged();
    }

    // Modal support properties and methods
    private bool showRawText = false;

    private void CloseModal()
    {
        selectedScholarship = null;
        showRawText = false;
        StateHasChanged();
    }

    private void ToggleRawText()
    {
        showRawText = !showRawText;
        StateHasChanged();
    }

    private async Task ExportSingleScholarship()
    {
        if (selectedScholarship == null) return;

        try
        {
            var singleScholarshipList = new List<EnhancedScrapedScholarship> { selectedScholarship };
            var csvContent = await EnhancedWebScrapingService.GenerateScholarshipCsvAsync(singleScholarshipList);
            var fileName = $"scholarship_{selectedScholarship.Title.Replace(" ", "_").Replace("/", "_").Replace("\\", "_")}_{DateTime.Now:yyyyMMdd_HHmmss}.csv";
            
            // Convert to base64 for download
            var csvBytes = System.Text.Encoding.UTF8.GetBytes(csvContent);
            var base64Content = Convert.ToBase64String(csvBytes);
            
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, base64Content);
            successMessage = $"Exported scholarship '{selectedScholarship.Title}' to CSV file";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error exporting single scholarship CSV");
            errorMessage = $"Failed to export scholarship CSV: {ex.Message}";
        }
    }

    private string GetSourceHost(string? url)
    {
        if (string.IsNullOrEmpty(url)) return "Unknown";
        try
        {
            return new Uri(url!).Host.Replace("www.", "");
        }
        catch
        {
            return url!;
        }
    }

    // Approval Tab Methods
    protected override async Task OnInitializedAsync()
    {
        await LoadEnhancedScholarshipData();
        await LoadApprovalScholarshipData();
        CalculateApprovalStatistics();
        ApplyApprovalFilters();
    }

    private async Task LoadEnhancedScholarshipData()
    {
        try
        {
            // Load recent enhanced scholarships to restore statistics
            var recentScholarships = await ScrapedScholarshipService.GetRecentAsync(7);
            if (recentScholarships != null && recentScholarships.Any())
            {
                // Convert to enhanced scholarships and filter for AI-enhanced ones
                var recentEnhanced = recentScholarships
                    .Where(s => s.IsEnhanced && !string.IsNullOrEmpty(s.AiModel))
                    .Select(s => new EnhancedScrapedScholarship
                    {
                        Title = s.Title ?? "",
                        Description = s.Description ?? "",
                        Requirements = s.Requirements ?? "",
                        Benefits = s.Benefits ?? "",
                        MonetaryValue = s.MonetaryValue,
                        ApplicationDeadline = s.ApplicationDeadline,
                        SourceUrl = s.SourceUrl ?? "",
                        ExternalApplicationUrl = s.ExternalApplicationUrl ?? "",
                        ParsingConfidence = s.ParsingConfidence,
                        ScrapedAt = s.ScrapedAt,
                        RawText = s.RawText ?? ""
                    })
                    .ToList();
                
                enhancedScholarships = recentEnhanced;
                if (enhancedScholarships.Any())
                {
                    lastEnhancedScrapeTime = $"Last updated: {enhancedScholarships.Max(s => s.ScrapedAt):MMM dd, yyyy HH:mm}";
                }
                else
                {
                    lastEnhancedScrapeTime = "No AI-enhanced scholarships found";
                }
            }
            else
            {
                enhancedScholarships = new List<EnhancedScrapedScholarship>();
                lastEnhancedScrapeTime = "No recent data available";
            }
        }
        catch (Exception)
        {
            // Handle any errors gracefully
            enhancedScholarships = new List<EnhancedScrapedScholarship>();
            lastEnhancedScrapeTime = "Error loading data";
        }
    }

    private async Task LoadApprovalScholarshipData()
    {
        approvalIsLoading = true;
        StateHasChanged();

        try
        {
            // Load scholarships from the actual service
            var scholarships = await ScrapedScholarshipService.GetAllAsync();
            approvalAllScholarships = scholarships.ToList();
            
            // Extract unique sources
            approvalAvailableSources = approvalAllScholarships
                .Where(s => !string.IsNullOrEmpty(s.SourceUrl))
                .Select(s => GetApprovalSourceName(s.SourceUrl))
                .Distinct()
                .OrderBy(s => s)
                .ToList();
        }
        catch (Exception ex)
        {
            // Handle error - if no data is available, create empty list
            Console.WriteLine($"Error loading approval scholarship data: {ex.Message}");
            approvalAllScholarships = new List<c2_eskolar.Models.ScrapedScholarship>();
        }
        finally
        {
            approvalIsLoading = false;
            StateHasChanged();
        }
    }

    private void CalculateApprovalStatistics()
    {
        scrapedTotalCount = approvalAllScholarships.Count;
        scrapedTodayCount = approvalAllScholarships.Count(s => s.ScrapedAt.Date == DateTime.Today);
        scrapedPendingCount = approvalAllScholarships.Count(s => s.Status == c2_eskolar.Models.ScrapingStatus.Scraped || s.Status == c2_eskolar.Models.ScrapingStatus.UnderReview);
        scrapedApprovedCount = approvalAllScholarships.Count(s => s.Status == c2_eskolar.Models.ScrapingStatus.Approved);
        scrapedAverageConfidence = approvalAllScholarships.Any() ? approvalAllScholarships.Average(s => s.ParsingConfidence) : 0.0;
    }

    private void ApplyApprovalFilters()
    {
        var filtered = approvalAllScholarships.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(approvalSearchQuery))
        {
            var query = approvalSearchQuery.ToLowerInvariant();
            filtered = filtered.Where(s => 
                (s.Title?.ToLowerInvariant().Contains(query) ?? false) ||
                (s.Description?.ToLowerInvariant().Contains(query) ?? false) ||
                (s.Requirements?.ToLowerInvariant().Contains(query) ?? false));
        }

        // Apply other filters
        if (!string.IsNullOrWhiteSpace(approvalStatusFilter))
            filtered = filtered.Where(s => s.Status.ToString() == approvalStatusFilter);

        if (!string.IsNullOrWhiteSpace(approvalConfidenceFilter))
        {
            filtered = approvalConfidenceFilter switch
            {
                "high" => filtered.Where(s => s.ParsingConfidence >= 0.8),
                "medium" => filtered.Where(s => s.ParsingConfidence >= 0.6 && s.ParsingConfidence < 0.8),
                "low" => filtered.Where(s => s.ParsingConfidence < 0.6),
                _ => filtered
            };
        }

        if (!string.IsNullOrWhiteSpace(approvalSourceFilter))
            filtered = filtered.Where(s => GetApprovalSourceName(s.SourceUrl) == approvalSourceFilter);

        if (!string.IsNullOrWhiteSpace(approvalDateFilter))
        {
            var now = DateTime.Now;
            filtered = approvalDateFilter switch
            {
                "today" => filtered.Where(s => s.ScrapedAt.Date == now.Date),
                "week" => filtered.Where(s => s.ScrapedAt >= now.AddDays(-7)),
                "month" => filtered.Where(s => s.ScrapedAt >= now.AddDays(-30)),
                _ => filtered
            };
        }

        // Apply sorting
        filtered = approvalSortColumn switch
        {
            "Title" => approvalSortAscending ? filtered.OrderBy(s => s.Title) : filtered.OrderByDescending(s => s.Title),
            "Status" => approvalSortAscending ? filtered.OrderBy(s => s.Status) : filtered.OrderByDescending(s => s.Status),
            "ParsingConfidence" => approvalSortAscending ? filtered.OrderBy(s => s.ParsingConfidence) : filtered.OrderByDescending(s => s.ParsingConfidence),
            "ScrapedAt" => approvalSortAscending ? filtered.OrderBy(s => s.ScrapedAt) : filtered.OrderByDescending(s => s.ScrapedAt),
            _ => filtered.OrderByDescending(s => s.ScrapedAt)
        };

        approvalFilteredScholarships = filtered.ToList();
        approvalTotalPages = (int)Math.Ceiling((double)approvalFilteredScholarships.Count() / approvalPageSize);
        approvalCurrentPage = Math.Min(approvalCurrentPage, Math.Max(1, approvalTotalPages));
        UpdateApprovalPaginatedData();
    }

    private void UpdateApprovalPaginatedData()
    {
        var skip = (approvalCurrentPage - 1) * approvalPageSize;
        approvalPaginatedScholarships = approvalFilteredScholarships.Skip(skip).Take(approvalPageSize);
        StateHasChanged();
    }

    // Approval Tab Event Handlers
    private void ClearApprovalFilters()
    {
        approvalSearchQuery = approvalStatusFilter = approvalConfidenceFilter = approvalSourceFilter = approvalDateFilter = "";
        approvalCurrentPage = 1;
        ApplyApprovalFilters();
    }

    private Timer? searchDebounceTimer;
    
    private void OnSearchInputChanged()
    {
        // Debounce search to avoid too many filter applications
        searchDebounceTimer?.Dispose();
        searchDebounceTimer = new Timer(_ => 
        {
            InvokeAsync(() => {
                ApplyApprovalFilters();
                StateHasChanged();
            });
        }, null, 300, Timeout.Infinite);
    }

    private void ApprovalSortBy(string column)
    {
        if (approvalSortColumn == column)
            approvalSortAscending = !approvalSortAscending;
        else
        {
            approvalSortColumn = column;
            approvalSortAscending = true;
        }
        ApplyApprovalFilters();
    }

    private void ChangeApprovalPage(int page)
    {
        if (page >= 1 && page <= approvalTotalPages)
        {
            approvalCurrentPage = page;
            UpdateApprovalPaginatedData();
        }
    }

    private void SetApprovalViewMode(string mode)
    {
        approvalViewMode = mode;
        StateHasChanged();
    }

    private void ToggleApprovalSelectAll(ChangeEventArgs e)
    {
        var isChecked = (bool)(e.Value ?? false);
        approvalSelectedScholarshipIds = isChecked ? 
            approvalPaginatedScholarships.Select(s => GetApprovalScholarshipId(s)).ToHashSet() : 
            new HashSet<string>();
        StateHasChanged();
    }

    private void ToggleApprovalSelectAllButton()
    {
        var allSelected = approvalSelectedScholarshipIds.Count == approvalPaginatedScholarships.Count() && approvalPaginatedScholarships.Any();
        approvalSelectedScholarshipIds = allSelected ? 
            new HashSet<string>() : 
            approvalPaginatedScholarships.Select(s => GetApprovalScholarshipId(s)).ToHashSet();
        StateHasChanged();
    }

    private void ToggleApprovalScholarshipSelection(c2_eskolar.Models.ScrapedScholarship scholarship, ChangeEventArgs e)
    {
        var isChecked = (bool)(e.Value ?? false);
        var scholarshipId = GetApprovalScholarshipId(scholarship);
        if (isChecked)
            approvalSelectedScholarshipIds.Add(scholarshipId);
        else
            approvalSelectedScholarshipIds.Remove(scholarshipId);
        StateHasChanged();
    }

    private void ToggleRowSelection(c2_eskolar.Models.ScrapedScholarship scholarship)
    {
        var scholarshipId = GetApprovalScholarshipId(scholarship);
        if (approvalSelectedScholarshipIds.Contains(scholarshipId))
            approvalSelectedScholarshipIds.Remove(scholarshipId);
        else
            approvalSelectedScholarshipIds.Add(scholarshipId);
        StateHasChanged();
    }

    // Approval Tab UI Helper Methods
    private string GetApprovalScholarshipId(c2_eskolar.Models.ScrapedScholarship scholarship)
    {
        return scholarship?.Id ?? "";
    }

    private string GetApprovalScholarshipStatus(c2_eskolar.Models.ScrapedScholarship scholarship)
    {
        return scholarship.Status.ToString();
    }

    private string GetApprovalRowClass(c2_eskolar.Models.ScrapedScholarship scholarship)
    {
        if (scholarship == null) return "";
        
        var classes = new List<string>();
        var scholarshipId = GetApprovalScholarshipId(scholarship);
        if (approvalSelectedScholarshipIds.Contains(scholarshipId))
            classes.Add("table-primary");
        if (scholarship.ParsingConfidence > 0.8)
            classes.Add("enhanced-row");
        return string.Join(" ", classes);
    }

    private string GetApprovalStatusClass(string status) => status?.ToLowerInvariant() switch
    {
        "scraped" => "status-scraped",
        "underreview" => "status-underreview", 
        "approved" => "status-approved",
        "rejected" => "status-rejected",
        "archived" => "status-archived",
        _ => "status-scraped"
    };

    private string GetApprovalStatusIcon(string status) => status?.ToLowerInvariant() switch
    {
        "scraped" => "🔵",
        "underreview" => "🟡",
        "approved" => "🟢", 
        "rejected" => "🔴",
        "archived" => "⚪",
        _ => "🔵"
    };

    private string GetApprovalSourceName(string? sourceUrl)
    {
        if (string.IsNullOrEmpty(sourceUrl)) return "Unknown";
        try
        {
            var uri = new Uri(sourceUrl!);
            return uri.Host.Replace("www.", "");
        }
        catch
        {
            return "Unknown";
        }
    }

    // Approval Tab Action Methods
    private void EditApprovalScholarship(c2_eskolar.Models.ScrapedScholarship scholarship)
    {
        editingApprovalScholarship = new c2_eskolar.Models.ScrapedScholarship
        {
            Id = scholarship.Id,
            Title = scholarship.Title ?? "",
            Description = scholarship.Description ?? "",
            Requirements = scholarship.Requirements ?? "",
            Benefits = scholarship.Benefits ?? "",
            MonetaryValue = scholarship.MonetaryValue,
            ApplicationDeadline = scholarship.ApplicationDeadline,
            SourceUrl = scholarship.SourceUrl ?? "",
            ExternalApplicationUrl = scholarship.ExternalApplicationUrl ?? "",
            ParsingConfidence = scholarship.ParsingConfidence,
            ScrapedAt = scholarship.ScrapedAt,
            RawText = scholarship.RawText ?? "",
            MinimumGPA = scholarship.MinimumGPA,
            RequiredCourse = scholarship.RequiredCourse ?? "",
            RequiredYearLevel = scholarship.RequiredYearLevel,
            RequiredUniversity = scholarship.RequiredUniversity ?? "",
            SlotsAvailable = scholarship.SlotsAvailable,
            ParsingNotes = scholarship.ParsingNotes ?? "",
            Status = scholarship.Status,
            IsEnhanced = scholarship.IsEnhanced,
            AuthorAttribution = scholarship.AuthorAttribution ?? "",
            AiModel = scholarship.AiModel ?? "",
            AiPromptVersion = scholarship.AiPromptVersion ?? "",
            EnhancedAt = scholarship.EnhancedAt,
            CreatedAt = scholarship.CreatedAt,
            UpdatedAt = scholarship.UpdatedAt,
            CreatedBy = scholarship.CreatedBy ?? "System",
            ApprovedBy = scholarship.ApprovedBy,
            ApprovedAt = scholarship.ApprovedAt,
            ReviewNotes = scholarship.ReviewNotes ?? "",
            PublishedScholarshipId = scholarship.PublishedScholarshipId
        };
        showEditModal = true;
        StateHasChanged();
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        editingApprovalScholarship = null;
        isEditModalLoading = false;
        StateHasChanged();
    }

    private async Task SaveEditedApprovalScholarship()
    {
        if (editingApprovalScholarship == null) 
        {
            Console.WriteLine("ERROR: editingApprovalScholarship is null");
            approvalToasts.Add("❌ No scholarship selected for editing");
            return;
        }
        
        isEditModalLoading = true;
        StateHasChanged();
        
        try
        {
            Console.WriteLine($"Starting update for scholarship ID: {editingApprovalScholarship.Id}");
            
            // Check for incomplete fields and show warnings instead of blocking save
            var warnings = new List<string>();
            
            if (string.IsNullOrWhiteSpace(editingApprovalScholarship.Title))
                warnings.Add("Title is empty");
            if (string.IsNullOrWhiteSpace(editingApprovalScholarship.Description))
                warnings.Add("Description is empty");
            if (string.IsNullOrWhiteSpace(editingApprovalScholarship.Requirements))
                warnings.Add("Requirements are empty");
            if (string.IsNullOrWhiteSpace(editingApprovalScholarship.Benefits))
                warnings.Add("Benefits are empty");
            if (!editingApprovalScholarship.ApplicationDeadline.HasValue)
                warnings.Add("Application deadline is not set");
            if (!editingApprovalScholarship.MonetaryValue.HasValue)
                warnings.Add("Monetary value is not set");
            
            // Show warnings but allow save to continue
            if (warnings.Any())
            {
                var warningMessage = "⚠️ Some fields are incomplete: " + string.Join(", ", warnings);
                approvalToasts.Add(warningMessage);
                Console.WriteLine($"WARNING: {warningMessage}");
            }
            
            // Ensure UpdatedBy is set
            editingApprovalScholarship.UpdatedBy = "WebScrapingManagement";
            editingApprovalScholarship.UpdatedAt = DateTime.Now;
            
            // Check if service is available
            if (ScrapedScholarshipService == null)
            {
                Console.WriteLine("ERROR: ScrapedScholarshipService is null");
                approvalToasts.Add("❌ Service unavailable");
                return;
            }
            
            Console.WriteLine($"Calling ScrapedScholarshipService.UpdateAsync for: {editingApprovalScholarship.Title}");
            var updated = await ScrapedScholarshipService.UpdateAsync(editingApprovalScholarship);
            
            if (updated != null)
            {
                Console.WriteLine("Update successful, updating local list");
                // Update the local scholarship in the list
                if (approvalAllScholarships != null)
                {
                    var index = approvalAllScholarships.FindIndex(s => s.Id == editingApprovalScholarship.Id);
                    if (index >= 0)
                    {
                        approvalAllScholarships[index] = updated;
                        Console.WriteLine($"Updated local list at index {index}");
                    }
                    else
                    {
                        Console.WriteLine("WARNING: Could not find scholarship in local list");
                    }
                    
                    ApplyApprovalFilters();
                }
                else
                {
                    Console.WriteLine("ERROR: approvalAllScholarships is null");
                }
                
                CloseEditModal();
                approvalToasts.Add($"✅ Updated: {editingApprovalScholarship.Title}");
                
                // Auto-dismiss toast
                var _ = Task.Run(async () => {
                    await Task.Delay(3000);
                    if (approvalToasts?.Any() == true)
                    {
                        approvalToasts.RemoveAt(0);
                        await InvokeAsync(StateHasChanged);
                    }
                }).ContinueWith(t => { if (t.Exception != null) { try { Console.WriteLine($"WebScrapingManagement Task.Run exception: {t.Exception}"); } catch { } } }, TaskScheduler.Current);
            }
            else
            {
                Console.WriteLine("ERROR: UpdateAsync returned null");
                approvalToasts.Add($"❌ Failed to update: {editingApprovalScholarship.Title}");
            }
        }
        catch (NullReferenceException ex)
        {
            Console.WriteLine($"NULL REFERENCE ERROR: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            approvalToasts.Add($"❌ Null reference error: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"GENERAL ERROR updating scholarship: {ex.Message}");
            Console.WriteLine($"Exception type: {ex.GetType().Name}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            approvalToasts.Add($"❌ Error updating scholarship: {ex.Message}");
        }
        finally
        {
            isEditModalLoading = false;
            StateHasChanged();
        }
    }

    private void CancelEditScholarship()
    {
        isEditingScholarship = false;
        editableScholarship = null;
        parsingNotesText = "";
        StateHasChanged();
    }

    private async Task SaveEditedScholarship()
    {
        if (editableScholarship == null) return;
        // Find the original scholarship
        var original = approvalAllScholarships.FirstOrDefault(s => s.Title == editableScholarship.Title && s.ScrapedAt == editableScholarship.ScrapedAt);
        if (original != null)
        {
            // Update fields
            original.Title = editableScholarship.Title;
            original.Description = editableScholarship.Description;
            original.Requirements = editableScholarship.Requirements;
            original.Benefits = editableScholarship.Benefits;
            original.MonetaryValue = editableScholarship.MonetaryValue;
            original.ApplicationDeadline = editableScholarship.ApplicationDeadline;
            original.SourceUrl = editableScholarship.SourceUrl;
            original.ExternalApplicationUrl = editableScholarship.ExternalApplicationUrl;
            original.MinimumGPA = editableScholarship.MinimumGPA;
            original.RequiredCourse = editableScholarship.RequiredCourse;
            original.RequiredYearLevel = editableScholarship.RequiredYearLevel;
            original.RequiredUniversity = editableScholarship.RequiredUniversity;
            original.SlotsAvailable = editableScholarship.SlotsAvailable;
            original.ParsingNotes = parsingNotesText;
            // Update editable scholarship parsing notes from text
            editableScholarship.ParsingNotes = parsingNotesText.Split(';').Select(s => s.Trim()).Where(s => !string.IsNullOrEmpty(s)).ToList();
            // Persist changes (if needed, call update service)
            try
            {
                await ScrapedScholarshipService.UpdateAsync(original);
                successMessage = $"Scholarship '{original.Title}' updated successfully.";
            }
            catch (Exception ex)
            {
                errorMessage = $"Failed to update scholarship: {ex.Message}";
            }
            // Update modal view
            selectedScholarship = editableScholarship;
            isEditingScholarship = false;
            editableScholarship = null;
            StateHasChanged();
        }
    }

    private async Task PreviewApprovalScholarship(c2_eskolar.Models.ScrapedScholarship scholarship)
    {
        // Map ScrapedScholarship to EnhancedScrapedScholarship for modal display
        selectedScholarship = new EnhancedScrapedScholarship
        {
            Title = scholarship.Title ?? "",
            Description = scholarship.Description ?? "",
            Requirements = scholarship.Requirements ?? "",
            Benefits = scholarship.Benefits ?? "",
            MonetaryValue = scholarship.MonetaryValue,
            ApplicationDeadline = scholarship.ApplicationDeadline,
            SourceUrl = scholarship.SourceUrl ?? "",
            ExternalApplicationUrl = scholarship.ExternalApplicationUrl ?? "",
            ParsingConfidence = scholarship.ParsingConfidence,
            ScrapedAt = scholarship.ScrapedAt,
            RawText = scholarship.RawText ?? "",
            MinimumGPA = scholarship.MinimumGPA,
            RequiredCourse = scholarship.RequiredCourse,
            RequiredYearLevel = scholarship.RequiredYearLevel,
            RequiredUniversity = scholarship.RequiredUniversity,
            SlotsAvailable = scholarship.SlotsAvailable,
            ParsingNotes = scholarship.ParsingNotes?.Split(';').ToList() ?? new List<string>()
        };
        StateHasChanged();
    }

    private async Task ApproveApprovalScholarship(c2_eskolar.Models.ScrapedScholarship scholarship)
    {
        if (approvalInProgress.Contains(scholarship.Id)) return;
        approvalInProgress.Add(scholarship.Id);
        StateHasChanged();

        try
        {
            // First approve the scraped scholarship
            var approved = await ScrapedScholarshipService.ApproveAsync(scholarship.Id, "EskoBot", "Approved and published by EskoBot AI");
            if (!approved)
            {
                errorMessage = "Failed to approve scholarship.";
                approvalToasts.Add($"❌ Failed to approve: {scholarship.Title}");
                return;
            }

            // Update local status
            scholarship.Status = c2_eskolar.Models.ScrapingStatus.Approved;
            scholarship.ApprovedBy = "EskoBot";
            scholarship.ApprovedAt = DateTime.UtcNow;
            scholarship.ReviewNotes = "Approved and published by EskoBot AI";

            // Create the main scholarship record with EskoBot as author
            try
            {
                using var context = await DbContextFactory.CreateDbContextAsync();
                
                var mainScholarship = new c2_eskolar.Models.Scholarship
                {
                    Title = scholarship.Title,
                    Description = scholarship.Description ?? "",
                    Benefits = scholarship.Benefits ?? "",
                    MonetaryValue = scholarship.MonetaryValue,
                    ApplicationDeadline = scholarship.ApplicationDeadline ?? DateTime.Now.AddYears(1),
                    Requirements = scholarship.Requirements ?? "",
                    SlotsAvailable = scholarship.SlotsAvailable,
                    MinimumGPA = scholarship.MinimumGPA,
                    ExternalApplicationUrl = scholarship.ExternalApplicationUrl,
                    CreatedAt = DateTime.UtcNow,
                    UpdatedAt = DateTime.UtcNow,
                    IsActive = true,
                    IsInternal = false
                };

                context.Scholarships.Add(mainScholarship);
                await context.SaveChangesAsync();

                // Update the scraped scholarship to mark it as published
                var scrapedEntity = await context.ScrapedScholarships.FindAsync(scholarship.Id);
                if (scrapedEntity != null)
                {
                    scrapedEntity.Status = c2_eskolar.Models.ScrapingStatus.Published;
                    scrapedEntity.PublishedScholarshipId = mainScholarship.ScholarshipId;
                    scrapedEntity.UpdatedAt = DateTime.UtcNow;
                    await context.SaveChangesAsync();
                }

                approvalToasts.Add($"✅ Published: {scholarship.Title} by EskoBot");
                
                // Remove the approved scholarship from the local list since it's been published
                approvalAllScholarships.Remove(scholarship);
                
                // Recalculate statistics after successful approval
                CalculateApprovalStatistics();
                ApplyApprovalFilters();
            }
            catch (Exception publishEx)
            {
                // If publishing fails, still show success for approval
                approvalToasts.Add($"✅ Approved but ❌ publish failed: {scholarship.Title}");
                Console.WriteLine($"Publish error: {publishEx.Message}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error approving scholarship: {ex.Message}";
            approvalToasts.Add($"❌ Error: {scholarship.Title}");
        }
        finally
        {
            approvalInProgress.Remove(scholarship.Id);
            StateHasChanged();
            // auto-dismiss toasts after a short delay
            var _ = Task.Run(async () => {
                await Task.Delay(4000);
                if (approvalToasts.Any())
                {
                    approvalToasts.RemoveAt(0);
                    await InvokeAsync(StateHasChanged);
                }
            }).ContinueWith(t => { if (t.Exception != null) { try { Console.WriteLine($"WebScrapingManagement Task.Run exception: {t.Exception}"); } catch { } } }, TaskScheduler.Current);
        }
    }

    private void DismissToast(string message)
    {
        approvalToasts.Remove(message);
    }

    private async Task DeleteApprovalScholarship(c2_eskolar.Models.ScrapedScholarship scholarship)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{scholarship.Title}'?");
        if (confirmed)
        {
            try
            {
                var deleted = await ScrapedScholarshipService.DeleteAsync(scholarship.Id);
                if (deleted)
                {
                    approvalAllScholarships.Remove(scholarship);
                    CalculateApprovalStatistics();
                    ApplyApprovalFilters();
                    successMessage = $"Scholarship '{scholarship.Title}' has been deleted successfully!";
                }
                else
                {
                    errorMessage = "Failed to delete scholarship.";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Error deleting scholarship: {ex.Message}";
            }
        }
    }

    private async Task ExportApprovalFilteredData()
    {
        try
        {
            var csvContent = GenerateApprovalCsvContent();
            var fileName = $"scraped_scholarships_{DateTime.Now:yyyyMMdd_HHmmss}.csv";
            var base64Content = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(csvContent));
            
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, base64Content);
            approvalToasts.Add($"✅ Exported {approvalFilteredScholarships.Count()} scholarships to {fileName}");
            
            // Auto-dismiss toast
            var _ = Task.Run(async () => {
                await Task.Delay(3000);
                if (approvalToasts.Any())
                {
                    approvalToasts.RemoveAt(0);
                    await InvokeAsync(StateHasChanged);
                }
            }).ContinueWith(t => { if (t.Exception != null) { try { Console.WriteLine($"WebScrapingManagement Task.Run exception: {t.Exception}"); } catch { } } }, TaskScheduler.Current);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Export error: {ex.Message}");
            approvalToasts.Add($"❌ Export failed: {ex.Message}");
        }
    }

    private string GenerateApprovalCsvContent()
    {
        var csv = new StringBuilder();
        
        // CSV Headers
        csv.AppendLine("Title,Status,Confidence,Source,Scraped Date,Description,Requirements,Benefits,Monetary Value,Application Deadline,External URL,Minimum GPA,Required Course,Required Year Level,Required University,Slots Available");
        
        // CSV Data
        foreach (var scholarship in approvalFilteredScholarships)
        {
            var row = new[]
            {
                EscapeCsvField(scholarship.Title),
                EscapeCsvField(GetApprovalScholarshipStatus(scholarship)),
                ((scholarship.ParsingConfidence * 100).ToString("F1") + "%"),
                EscapeCsvField(GetApprovalSourceName(scholarship.SourceUrl)),
                scholarship.ScrapedAt.ToString("yyyy-MM-dd HH:mm:ss"),
                EscapeCsvField(scholarship.Description),
                EscapeCsvField(scholarship.Requirements),
                EscapeCsvField(scholarship.Benefits),
                scholarship.MonetaryValue?.ToString("C") ?? "",
                scholarship.ApplicationDeadline?.ToString("yyyy-MM-dd") ?? "",
                EscapeCsvField(scholarship.ExternalApplicationUrl),
                scholarship.MinimumGPA?.ToString("F2") ?? "",
                EscapeCsvField(scholarship.RequiredCourse),
                scholarship.RequiredYearLevel?.ToString() ?? "",
                EscapeCsvField(scholarship.RequiredUniversity),
                scholarship.SlotsAvailable?.ToString() ?? ""
            };
            
            csv.AppendLine(string.Join(",", row));
        }
        
        return csv.ToString();
    }

    private string EscapeCsvField(string? field)
    {
        if (string.IsNullOrEmpty(field))
            return "";

        // Escape quotes and wrap in quotes if contains comma, quote, or newline
        var safe = field.Replace("\"", "\"\"");
        if (safe.Contains(",") || safe.Contains("\"") || safe.Contains("\n") || safe.Contains("\r"))
        {
            safe = $"\"{safe}\"";
        }

        return safe;
    }

    // Cleanup
    public void Dispose()
    {
        searchDebounceTimer?.Dispose();
    }
}

<script>
    window.downloadFile = function(filename, content) {
        const byteCharacters = atob(content);
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        
        // Determine content type based on file extension
        let mimeType = 'application/octet-stream';
        if (filename.endsWith('.csv')) {
            mimeType = 'text/csv;charset=utf-8;';
        } else if (filename.endsWith('.json')) {
            mimeType = 'application/json';
        }
        
        const blob = new Blob([byteArray], { type: mimeType });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
    };
</script>
