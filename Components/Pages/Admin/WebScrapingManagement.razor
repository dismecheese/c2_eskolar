@page "/admin/webscraping"
@attribute [Authorize(Roles = "SuperAdmin")]
@layout Layout.SuperAdminDashLayout
@inject c2_eskolar.Services.WebScraping.IWebScrapingService WebScrapingService
@inject c2_eskolar.Services.WebScraping.IEnhancedWebScrapingService EnhancedWebScrapingService
@inject c2_eskolar.Services.IScrapedScholarshipService ScrapedScholarshipService
@inject IJSRuntime JSRuntime
@inject ILogger<WebScrapingManagement> Logger
@using c2_eskolar.Services.WebScraping
@using c2_eskolar.Services
@using Microsoft.AspNetCore.Authorization

<div class="dashboard-center-container">
    <!-- Top Bar -->
    <div class="dashboard-topbar">
        <div style="position: relative; flex: 1; max-width: 500px;">
            <i class="bi bi-search" style="position: absolute; left: 16px; top: 50%; transform: translateY(-50%); color: #64748b; z-index: 1;"></i>
            <input class="university-input" type="text" placeholder="Search scraping operations..." 
                   style="padding-left: 45px; padding-right: 18px;" readonly />
        </div>
        <span class="dashboard-date">@DateTime.Now.ToString("dd MMM yyyy, ddd")</span>
    </div>

    <!-- Welcome Banner -->
    <div class="dashboard-banner-centered">
        <div class="banner-text">
            <h2>Web Scraping Management</h2>
            <p>Configure and monitor automated data collection operations</p>
        </div>
        <img src="images/eskolar_books.svg" alt="Books" class="banner-img" />
    </div>

    <!-- Alert Messages -->
    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show mb-4" role="alert">
            <i class="bi bi-exclamation-triangle me-2"></i>@errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
        </div>
    }
    @if (!string.IsNullOrWhiteSpace(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show mb-4" role="alert">
            <i class="bi bi-check-circle me-2"></i>@successMessage
            <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
        </div>
    }

    <!-- Dashboard Tabs -->
    <div class="dashboard-tabs">
        <button class="dashboard-tab @(activeTab == 0 ? "active" : "")" @onclick="() => SetTab(0)">AI-Enhanced Scraping</button>
        <button class="dashboard-tab @(activeTab == 1 ? "active" : "")" @onclick="() => SetTab(1)">Scholarship Approval</button>
        <button class="dashboard-tab @(activeTab == 2 ? "active" : "")" @onclick="() => SetTab(2)">Institution & Organization Verification</button>
    </div>

    @if (activeTab == 0)
    {
        <!-- AI-Enhanced Scraping Tab -->
        <div class="scraping-section">
            <div class="row g-4">
                <div class="col-lg-8">
                    <div class="scraping-card">
                        <div class="scraping-card-header">
                            <div class="scraping-card-icon scholarship">
                                <i class="bi bi-robot"></i>
                            </div>
                            <div>
                                <h5>AI-Enhanced Scholarship Scraping</h5>
                                <p class="mb-0">Intelligent parsing with OpenAI GPT-4</p>
                            </div>
                        </div>
                        <div class="scraping-card-body">
                            <div class="mb-3">
                                <label class="form-label">Website URL</label>
                                <input type="url" class="form-control scraping-input" @bind="enhancedScholarshipUrl" placeholder="https://scholarships.example.com">
                            </div>
                            <div class="scraping-actions">
                                <button class="btn-scraping btn-primary" @onclick="ScrapeWithAI" disabled="@isLoading">
                                    @if (isLoading)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    <i class="bi bi-brain me-2"></i>Scrape with AI
                                </button>
                                <button class="btn-scraping btn-success" @onclick="ExportEnhancedCsv" disabled="@(enhancedScholarships.Count == 0)">
                                    <i class="bi bi-file-earmark-csv me-2"></i>Export CSV
                                </button>
                            </div>
                            <div class="scraping-help mt-3">
                                <i class="bi bi-info-circle me-2"></i>
                                AI will automatically extract and structure scholarship data into database-ready format
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-4">
                    <div class="scraping-stats">
                        <div class="stat-item">
                            <div class="stat-value">@enhancedScholarships.Count</div>
                            <div class="stat-label">AI Parsed Scholarships</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value">@(enhancedScholarships.Count > 0 ? (enhancedScholarships.Average(s => s.ParsingConfidence) * 100).ToString("F1") + "%" : "0%")</div>
                            <div class="stat-label">Average Confidence</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value">@lastEnhancedScrapeTime</div>
                            <div class="stat-label">Last AI Scrape</div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Enhanced Scraped Scholarships Table -->
            @if (enhancedScholarships.Any())
            {
                <div class="scraped-data-card mt-4">
                    <div class="scraped-data-header">
                        <div class="scraped-data-icon">
                            <i class="bi bi-table"></i>
                        </div>
                        <div>
                            <h5>AI-Parsed Scholarship Data</h5>
                            <p class="mb-0">@enhancedScholarships.Count scholarships ready for database import</p>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table scraped-data-table">
                            <thead>
                                <tr>
                                    <th>Title</th>
                                    <th>Monetary Value</th>
                                    <th>Deadline</th>
                                    <th>GPA Requirement</th>
                                    <th>Confidence</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var scholarship in enhancedScholarships.Take(10))
                                {
                                    <tr>
                                        <td>
                                            <strong>@scholarship.Title</strong>
                                            @if (!string.IsNullOrEmpty(scholarship.RequiredCourse))
                                            {
                                                <br><small class="text-muted">Course: @scholarship.RequiredCourse</small>
                                            }
                                        </td>
                                        <td>
                                            @if (scholarship.MonetaryValue.HasValue)
                                            {
                                                <span class="badge bg-success">â‚±@scholarship.MonetaryValue.Value.ToString("N0")</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">N/A</span>
                                            }
                                        </td>
                                        <td>
                                            @if (scholarship.ApplicationDeadline.HasValue)
                                            {
                                                @scholarship.ApplicationDeadline.Value.ToString("MMM dd, yyyy")
                                            }
                                            else
                                            {
                                                <span class="text-muted">Not specified</span>
                                            }
                                        </td>
                                        <td>
                                            @if (scholarship.MinimumGPA.HasValue)
                                            {
                                                @scholarship.MinimumGPA.Value.ToString("F2")
                                            }
                                            else
                                            {
                                                <span class="text-muted">N/A</span>
                                            }
                                        </td>
                                        <td>
                                            <span class="badge @(scholarship.ParsingConfidence >= 0.7 ? "bg-success" : scholarship.ParsingConfidence >= 0.4 ? "bg-warning" : "bg-danger")">
                                                @((scholarship.ParsingConfidence * 100).ToString("F0"))%
                                            </span>
                                        </td>
                                        <td>
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewScholarshipDetails(scholarship)">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        </div>
    }
    else if (activeTab == 1)
    {
        <!-- Scholarship Approval Tab -->
        <div class="scholarship-management-container">
            <!-- Statistics Cards -->
            <div class="stats-grid">
                <div class="stat-card total-scraped">
                    <div class="stat-icon">
                        <i class="fas fa-database"></i>
                    </div>
                    <div class="stat-content">
                        <h3 class="stat-number">@scrapedTotalCount</h3>
                        <p class="stat-label">Total Scraped</p>
                        <span class="stat-trend positive">+@scrapedTodayCount today</span>
                    </div>
                </div>

                <div class="stat-card pending-review">
                    <div class="stat-icon">
                        <i class="fas fa-clock"></i>
                    </div>
                    <div class="stat-content">
                        <h3 class="stat-number">@scrapedPendingCount</h3>
                        <p class="stat-label">Pending Review</p>
                        <span class="stat-trend neutral">Awaiting approval</span>
                    </div>
                </div>

                <div class="stat-card approved">
                    <div class="stat-icon">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <div class="stat-content">
                        <h3 class="stat-number">@scrapedApprovedCount</h3>
                        <p class="stat-label">Approved</p>
                        <span class="stat-trend positive">Live on platform</span>
                    </div>
                </div>

                <div class="stat-card avg-confidence">
                    <div class="stat-icon">
                        <i class="fas fa-brain"></i>
                    </div>
                    <div class="stat-content">
                        <h3 class="stat-number">@($"{scrapedAverageConfidence:P0}")</h3>
                        <p class="stat-label">Avg Confidence</p>
                        <span class="stat-trend @(scrapedAverageConfidence > 0.8 ? "positive" : "neutral")">AI Quality Score</span>
                    </div>
                </div>
            </div>

            <!-- Filters and Search -->
            <div class="filters-section">
                <div class="filters-header">
                    <h3>
                        <i class="fas fa-filter me-2"></i>
                        Filter & Search Scholarships
                    </h3>
                    <button class="btn btn-outline-secondary btn-sm" @onclick="ClearApprovalFilters">
                        <i class="fas fa-undo me-1"></i>
                        Clear Filters
                    </button>
                </div>

                <div class="filters-content">
                    <div class="row">
                        <div class="col-md-6 col-lg-3">
                            <div class="filter-group">
                                <label class="form-label">Search</label>
                                <input type="text" class="form-control" @bind="approvalSearchQuery" @bind:event="oninput" @onkeyup="() => ApplyApprovalFilters()" placeholder="Search scholarships...">
                            </div>
                        </div>
                        <div class="col-md-6 col-lg-2">
                            <div class="filter-group">
                                <label class="form-label">Status</label>
                                <select class="form-select" @bind="approvalStatusFilter">
                                    <option value="">All Statuses</option>
                                    <option value="Scraped">Scraped</option>
                                    <option value="UnderReview">Under Review</option>
                                    <option value="Approved">Approved</option>
                                    <option value="Rejected">Rejected</option>
                                    <option value="Archived">Archived</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6 col-lg-2">
                            <div class="filter-group">
                                <label class="form-label">Confidence</label>
                                <select class="form-select" @bind="approvalConfidenceFilter">
                                    <option value="">All Levels</option>
                                    <option value="high">High (80%+)</option>
                                    <option value="medium">Medium (60-80%)</option>
                                    <option value="low">Low (&lt;60%)</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6 col-lg-2">
                            <div class="filter-group">
                                <label class="form-label">Source</label>
                                <select class="form-select" @bind="approvalSourceFilter">
                                    <option value="">All Sources</option>
                                    @foreach (var source in approvalAvailableSources)
                                    {
                                        <option value="@source">@source</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6 col-lg-2">
                            <div class="filter-group">
                                <label class="form-label">Date</label>
                                <select class="form-select" @bind="approvalDateFilter">
                                    <option value="">All Dates</option>
                                    <option value="today">Today</option>
                                    <option value="week">This Week</option>
                                    <option value="month">This Month</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Scholarships Data Table -->
            <div class="scholarships-table-section">
                <div class="table-header">
                    <div>
                        <h3>
                            <i class="fas fa-table me-2"></i>
                            Scraped Scholarships
                        </h3>
                        <div class="record-count">
                            Showing @approvalPaginatedScholarships.Count() of @approvalFilteredScholarships.Count() scholarships
                        </div>
                    </div>
                    <div class="table-actions">
                        <div class="view-toggle">
                            <button class="btn @(approvalViewMode == "table" ? "btn-primary" : "btn-outline-primary") btn-sm" @onclick='() => SetApprovalViewMode("table")'>
                                <i class="fas fa-table"></i>
                            </button>
                            <button class="btn @(approvalViewMode == "cards" ? "btn-primary" : "btn-outline-primary") btn-sm" @onclick='() => SetApprovalViewMode("cards")'>
                                <i class="fas fa-th"></i>
                            </button>
                        </div>
                        <button class="btn btn-success btn-sm" @onclick="ExportApprovalFilteredData">
                            <i class="fas fa-download me-1"></i>
                            Export
                        </button>
                    </div>
                </div>

                @if (approvalIsLoading)
                {
                    <div class="loading-spinner">
                        <div class="spinner-border text-primary" role="status"></div>
                        <p class="mt-3">Loading scholarship data...</p>
                    </div>
                }
                else if (approvalViewMode == "table")
                {
                    <div class="table-responsive">
                        <table class="table scholarship-table">
                            <thead>
                                <tr>
                                    <th style="width: 40px;">
                                        <input type="checkbox" class="form-check-input" @onchange="ToggleApprovalSelectAll" />
                                    </th>
                                    <th class="sortable" @onclick='() => ApprovalSortBy("Title")'>
                                        Title
                                        @if (approvalSortColumn == "Title")
                                        {
                                            <i class="fas @(approvalSortAscending ? "fa-sort-up" : "fa-sort-down") ms-1"></i>
                                        }
                                    </th>
                                    <th class="sortable" @onclick='() => ApprovalSortBy("Status")'>
                                        Status
                                        @if (approvalSortColumn == "Status")
                                        {
                                            <i class="fas @(approvalSortAscending ? "fa-sort-up" : "fa-sort-down") ms-1"></i>
                                        }
                                    </th>
                                    <th class="sortable" @onclick='() => ApprovalSortBy("ParsingConfidence")'>
                                        Confidence
                                        @if (approvalSortColumn == "ParsingConfidence")
                                        {
                                            <i class="fas @(approvalSortAscending ? "fa-sort-up" : "fa-sort-down") ms-1"></i>
                                        }
                                    </th>
                                    <th class="sortable" @onclick='() => ApprovalSortBy("ScrapedAt")'>
                                        Scraped At
                                        @if (approvalSortColumn == "ScrapedAt")
                                        {
                                            <i class="fas @(approvalSortAscending ? "fa-sort-up" : "fa-sort-down") ms-1"></i>
                                        }
                                    </th>
                                    <th style="width: 200px;">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var scholarship in approvalPaginatedScholarships)
                                {
                                    <tr class="@GetApprovalRowClass(scholarship)">
                                        <td>
                                            <input type="checkbox" class="form-check-input" 
                                                   checked="@approvalSelectedScholarshipIds.Contains(GetApprovalScholarshipId(scholarship))"
                                                   @onchange="(e) => ToggleApprovalScholarshipSelection(scholarship, e)" />
                                        </td>
                                        <td>
                                            <div class="scholarship-title">
                                                @scholarship.Title
                                            </div>
                                            <small class="text-muted">@GetApprovalSourceName(scholarship.SourceUrl)</small>
                                        </td>
                                        <td>
                                            <span class="badge @GetApprovalStatusClass(GetApprovalScholarshipStatus(scholarship))">
                                                @GetApprovalStatusIcon(GetApprovalScholarshipStatus(scholarship))
                                                @GetApprovalScholarshipStatus(scholarship)
                                            </span>
                                        </td>
                                        <td>
                                            <div class="confidence-indicator">
                                                <div class="confidence-bar">
                                                    <div class="confidence-fill" style="width: @((scholarship.ParsingConfidence * 100).ToString("F0"))%"></div>
                                                </div>
                                                <span class="confidence-text">@((scholarship.ParsingConfidence * 100).ToString("F0"))%</span>
                                            </div>
                                        </td>
                                        <td>
                                            @scholarship.ScrapedAt.ToString("MMM dd, yyyy")
                                            <br><small class="time-ago">@((DateTime.Now - scholarship.ScrapedAt).TotalHours < 24 ? (DateTime.Now - scholarship.ScrapedAt).TotalHours.ToString("F0") + "h ago" : (DateTime.Now - scholarship.ScrapedAt).TotalDays.ToString("F0") + "d ago")</small>
                                        </td>
                                        <td>
                                            <div class="btn-group btn-group-sm" role="group">
                                                <button class="btn btn-outline-primary" @onclick="() => EditApprovalScholarship(scholarship)" title="Edit">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-outline-info" @onclick="() => PreviewApprovalScholarship(scholarship)" title="Preview">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                                <button class="btn btn-outline-success" @onclick="() => ApproveApprovalScholarship(scholarship)" title="Approve">
                                                    <i class="fas fa-check"></i>
                                                </button>
                                                <button class="btn btn-outline-danger" @onclick="() => DeleteApprovalScholarship(scholarship)" title="Delete">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <!-- Pagination -->
                    <div class="pagination-section">
                        <div class="pagination-info">
                            Page @approvalCurrentPage of @approvalTotalPages (@approvalFilteredScholarships.Count() total scholarships)
                        </div>
                        <nav>
                            <ul class="pagination pagination-sm">
                                <li class="page-item @(approvalCurrentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangeApprovalPage(1)" disabled="@(approvalCurrentPage == 1)">First</button>
                                </li>
                                <li class="page-item @(approvalCurrentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangeApprovalPage(approvalCurrentPage - 1)" disabled="@(approvalCurrentPage == 1)">Previous</button>
                                </li>
                                @for (int i = Math.Max(1, approvalCurrentPage - 2); i <= Math.Min(approvalTotalPages, approvalCurrentPage + 2); i++)
                                {
                                    int page = i;
                                    <li class="page-item @(approvalCurrentPage == page ? "active" : "")">
                                        <button class="page-link" @onclick="() => ChangeApprovalPage(page)">@(page)</button>
                                    </li>
                                }
                                <li class="page-item @(approvalCurrentPage == approvalTotalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangeApprovalPage(approvalCurrentPage + 1)" disabled="@(approvalCurrentPage == approvalTotalPages)">Next</button>
                                </li>
                                <li class="page-item @(approvalCurrentPage == approvalTotalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangeApprovalPage(approvalTotalPages)" disabled="@(approvalCurrentPage == approvalTotalPages)">Last</button>
                                </li>
                            </ul>
                        </nav>
                    </div>
                }
                else
                {
                    <div class="cards-view">
                        <p class="text-center text-muted">Card view coming soon...</p>
                    </div>
                }
            </div>
        </div>
    }
    else if (activeTab == 2)
    {
        <!-- Institution & Organization Verification Tab -->
        <div class="scraping-section">
            <div class="row g-4">
                <div class="col-lg-6">
                    <div class="scraping-card">
                        <div class="scraping-card-header">
                            <div class="scraping-card-icon institution">
                                <i class="bi bi-building"></i>
                            </div>
                            <div>
                                <h5>Institution Verification</h5>
                                <p class="mb-0">Verify educational institutions</p>
                            </div>
                        </div>
                        <div class="scraping-card-body">
                            <div class="mb-3">
                                <label class="form-label fw-semibold">Institution Name</label>
                                <input type="text" class="form-control scraping-input" @bind="institutionName" 
                                       placeholder="University of the Philippines" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-semibold">Website (Optional)</label>
                                <input type="url" class="form-control scraping-input" @bind="institutionWebsite" 
                                       placeholder="https://up.edu.ph" />
                            </div>
                            <button class="btn-scraping btn-info" @onclick="VerifyInstitution" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                <i class="bi bi-check2-circle me-2"></i>Verify Institution
                            </button>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="scraping-card">
                        <div class="scraping-card-header">
                            <div class="scraping-card-icon organization">
                                <i class="bi bi-bank"></i>
                            </div>
                            <div>
                                <h5>Organization Verification</h5>
                                <p class="mb-0">Verify benefactor organizations</p>
                            </div>
                        </div>
                        <div class="scraping-card-body">
                            <div class="mb-3">
                                <label class="form-label fw-semibold">Organization Name</label>
                                <input type="text" class="form-control scraping-input" @bind="organizationName" 
                                       placeholder="Philippine Foundation" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-semibold">Website</label>
                                <input type="url" class="form-control scraping-input" @bind="organizationWebsite" 
                                       placeholder="https://foundation.org.ph" />
                            </div>
                            <button class="btn-scraping btn-warning" @onclick="VerifyOrganization" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                <i class="bi bi-shield-check me-2"></i>Verify Organization
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Verified Institutions Table -->
            @if (verifiedInstitutionsList.Any())
            {
                <div class="scraped-data-section mt-4">
                    <div class="scraped-data-header">
                        <h5><i class="bi bi-building me-2"></i>Verified Institutions</h5>
                        <div class="data-actions">
                            <button class="btn-scraping btn-outline-primary btn-sm" @onclick="() => ExportInstitutionData()">
                                <i class="bi bi-download me-1"></i>Export
                            </button>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-hover scraped-data-table">
                            <thead>
                                <tr>
                                    <th>Institution Name</th>
                                    <th>Website</th>
                                    <th>Status</th>
                                    <th>Verified At</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var institution in verifiedInstitutionsList)
                                {
                                    <tr>
                                        <td>@institution.Name</td>
                                        <td>@(string.IsNullOrEmpty(institution.Website) ? "N/A" : institution.Website)</td>
                                        <td>
                                            <span class="badge @(institution.IsVerified ? "bg-success" : "bg-danger")">
                                                @(institution.IsVerified ? "âœ“ Verified" : "âœ— Not Verified")
                                            </span>
                                        </td>
                                        <td>@institution.VerifiedAt.ToString("MMM dd, yyyy HH:mm")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
            
            <!-- Verified Organizations Table -->
            @if (verifiedOrganizationsList.Any())
            {
                <div class="scraped-data-section mt-4">
                    <div class="scraped-data-header">
                        <h5><i class="bi bi-bank me-2"></i>Verified Organizations</h5>
                        <div class="data-actions">
                            <button class="btn-scraping btn-outline-primary btn-sm" @onclick="() => ExportOrganizationData()">
                                <i class="bi bi-download me-1"></i>Export
                            </button>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-hover scraped-data-table">
                            <thead>
                                <tr>
                                    <th>Organization Name</th>
                                    <th>Website</th>
                                    <th>Status</th>
                                    <th>Verified At</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var organization in verifiedOrganizationsList)
                                {
                                    <tr>
                                        <td>@organization.Name</td>
                                        <td>@organization.Website</td>
                                        <td>
                                            <span class="badge @(organization.IsVerified ? "bg-success" : "bg-danger")">
                                                @(organization.IsVerified ? "âœ“ Verified" : "âœ— Not Verified")
                                            </span>
                                        </td>
                                        <td>@organization.VerifiedAt.ToString("MMM dd, yyyy HH:mm")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        </div>
    }

    <!-- Scholarship Details Modal -->


    <!-- Scholarship Details Modal -->
    @if (selectedScholarship != null)
    {
        <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
            <div class="modal-dialog modal-lg modal-dialog-scrollable">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="bi bi-mortarboard me-2"></i>
                            Scholarship Details
                        </h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="scholarship-details">
                            <!-- Basic Information -->
                            <div class="detail-section">
                                <h6 class="detail-section-title">
                                    <i class="bi bi-info-circle me-2"></i>Basic Information
                                </h6>
                                <div class="detail-grid">
                                    <div class="detail-item">
                                        <label>Title:</label>
                                        <span class="detail-value">@selectedScholarship.Title</span>
                                    </div>
                                    <div class="detail-item">
                                        <label>Source URL:</label>
                                        <span class="detail-value">
                                            <a href="@selectedScholarship.SourceUrl" target="_blank" class="text-decoration-none">
                                                @GetSourceHost(selectedScholarship.SourceUrl)
                                                <i class="bi bi-box-arrow-up-right ms-1"></i>
                                            </a>
                                        </span>
                                    </div>
                                    <div class="detail-item">
                                        <label>Scraped At:</label>
                                        <span class="detail-value">@selectedScholarship.ScrapedAt.ToString("MMM dd, yyyy HH:mm")</span>
                                    </div>
                                    <div class="detail-item">
                                        <label>AI Confidence:</label>
                                        <span class="detail-value">
                                            <span class="badge @(selectedScholarship.ParsingConfidence >= 0.7 ? "bg-success" : selectedScholarship.ParsingConfidence >= 0.4 ? "bg-warning" : "bg-danger")">
                                                @((selectedScholarship.ParsingConfidence * 100).ToString("F1"))%
                                            </span>
                                        </span>
                                    </div>
                                </div>
                            </div>

                            <!-- Financial Information -->
                            <div class="detail-section">
                                <h6 class="detail-section-title">
                                    <i class="bi bi-currency-dollar me-2"></i>Financial Information
                                </h6>
                                <div class="detail-grid">
                                    <div class="detail-item">
                                        <label>Benefits:</label>
                                        <span class="detail-value">@(string.IsNullOrWhiteSpace(selectedScholarship.Benefits) ? "Not specified" : selectedScholarship.Benefits)</span>
                                    </div>
                                    <div class="detail-item">
                                        <label>Monetary Value:</label>
                                        <span class="detail-value">
                                            @if (selectedScholarship.MonetaryValue.HasValue)
                                            {
                                                <span class="text-success fw-bold">â‚±@selectedScholarship.MonetaryValue.Value.ToString("N0")</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Not specified</span>
                                            }
                                        </span>
                                    </div>
                                    <div class="detail-item">
                                        <label>Available Slots:</label>
                                        <span class="detail-value">
                                            @(selectedScholarship.SlotsAvailable?.ToString() ?? "Not specified")
                                        </span>
                                    </div>
                                </div>
                            </div>

                            <!-- Application Information -->
                            <div class="detail-section">
                                <h6 class="detail-section-title">
                                    <i class="bi bi-calendar-event me-2"></i>Application Information
                                </h6>
                                <div class="detail-grid">
                                    <div class="detail-item">
                                        <label>Application Deadline:</label>
                                        <span class="detail-value">
                                            @if (selectedScholarship.ApplicationDeadline.HasValue)
                                            {
                                                <span class="text-warning fw-bold">@selectedScholarship.ApplicationDeadline.Value.ToString("MMMM dd, yyyy")</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Not specified</span>
                                            }
                                        </span>
                                    </div>
                                    <div class="detail-item">
                                        <label>External Application URL:</label>
                                        <span class="detail-value">
                                            @if (!string.IsNullOrWhiteSpace(selectedScholarship.ExternalApplicationUrl))
                                            {
                                                <a href="@selectedScholarship.ExternalApplicationUrl" target="_blank" class="text-decoration-none">
                                                    Apply Here <i class="bi bi-box-arrow-up-right ms-1"></i>
                                                </a>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Not available</span>
                                            }
                                        </span>
                                    </div>
                                </div>
                            </div>

                            <!-- Eligibility Requirements -->
                            <div class="detail-section">
                                <h6 class="detail-section-title">
                                    <i class="bi bi-check-circle me-2"></i>Eligibility Requirements
                                </h6>
                                <div class="detail-grid">
                                    <div class="detail-item">
                                        <label>Minimum GPA:</label>
                                        <span class="detail-value">
                                            @(selectedScholarship.MinimumGPA?.ToString("F2") ?? "Not specified")
                                        </span>
                                    </div>
                                    <div class="detail-item">
                                        <label>Required Course:</label>
                                        <span class="detail-value">
                                            @(string.IsNullOrWhiteSpace(selectedScholarship.RequiredCourse) ? "Any course" : selectedScholarship.RequiredCourse)
                                        </span>
                                    </div>
                                    <div class="detail-item">
                                        <label>Required Year Level:</label>
                                        <span class="detail-value">
                                            @if (selectedScholarship.RequiredYearLevel.HasValue)
                                            {
                                                @($"Year {selectedScholarship.RequiredYearLevel.Value}")
                                            }
                                            else
                                            {
                                                <span class="text-muted">Any year level</span>
                                            }
                                        </span>
                                    </div>
                                    <div class="detail-item">
                                        <label>Required University:</label>
                                        <span class="detail-value">
                                            @(string.IsNullOrWhiteSpace(selectedScholarship.RequiredUniversity) ? "Any university" : selectedScholarship.RequiredUniversity)
                                        </span>
                                    </div>
                                </div>
                            </div>

                            <!-- Full Description -->
                            @if (!string.IsNullOrWhiteSpace(selectedScholarship.Description))
                            {
                                <div class="detail-section">
                                    <h6 class="detail-section-title">
                                        <i class="bi bi-file-text me-2"></i>Description
                                    </h6>
                                    <div class="detail-description">
                                        @selectedScholarship.Description
                                    </div>
                                </div>
                            }

                            <!-- Requirements -->
                            @if (!string.IsNullOrWhiteSpace(selectedScholarship.Requirements))
                            {
                                <div class="detail-section">
                                    <h6 class="detail-section-title">
                                        <i class="bi bi-list-check me-2"></i>Requirements
                                    </h6>
                                    <div class="detail-description">
                                        @selectedScholarship.Requirements
                                    </div>
                                </div>
                            }

                            <!-- AI Parsing Notes -->
                            @if (selectedScholarship.ParsingNotes.Any())
                            {
                                <div class="detail-section">
                                    <h6 class="detail-section-title">
                                        <i class="bi bi-robot me-2"></i>AI Parsing Notes
                                    </h6>
                                    <div class="parsing-notes">
                                        @foreach (var note in selectedScholarship.ParsingNotes)
                                        {
                                            <span class="badge bg-info me-1">@note</span>
                                        }
                                    </div>
                                </div>
                            }

                            <!-- Raw Text (Collapsible) -->
                            <div class="detail-section">
                                <h6 class="detail-section-title">
                                    <button class="btn btn-link p-0 text-decoration-none" @onclick="ToggleRawText">
                                        <i class="bi bi-@(showRawText ? "chevron-down" : "chevron-right") me-2"></i>Raw Scraped Text
                                    </button>
                                </h6>
                                @if (showRawText)
                                {
                                    <div class="raw-text-container">
                                        <pre class="raw-text">@selectedScholarship.RawText</pre>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                        <button type="button" class="btn btn-primary" @onclick="ExportSingleScholarship">
                            <i class="bi bi-download me-2"></i>Export as CSV
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

</div>

@code {
    private string enhancedScholarshipUrl = "";
    private string institutionName = "";
    private string institutionWebsite = "";
    private string organizationName = "";
    private string organizationWebsite = "";
    private string errorMessage = "";
    private string successMessage = "";
    private bool isLoading = false;
    private int activeTab = 0;
    
    // Statistics
    private string lastEnhancedScrapeTime = "Never";
    
    // Data Lists
    private List<EnhancedScrapedScholarship> enhancedScholarships = new();
    private List<VerifiedInstitution> verifiedInstitutionsList = new();
    private List<VerifiedOrganization> verifiedOrganizationsList = new();
    
    // Selected scholarship for details view
    private EnhancedScrapedScholarship? selectedScholarship = null;
    
    // Approval Tab Variables
    private int scrapedTotalCount = 0;
    private int scrapedTodayCount = 0;
    private int scrapedPendingCount = 0;
    private int scrapedApprovedCount = 0;
    private double scrapedAverageConfidence = 0.0;
    
    // Approval Tab Data Properties
    private List<c2_eskolar.Models.ScrapedScholarship> approvalAllScholarships = new();
    private IEnumerable<c2_eskolar.Models.ScrapedScholarship> approvalFilteredScholarships = new List<c2_eskolar.Models.ScrapedScholarship>();
    private IEnumerable<c2_eskolar.Models.ScrapedScholarship> approvalPaginatedScholarships = new List<c2_eskolar.Models.ScrapedScholarship>();
    private List<string> approvalAvailableSources = new();
    private HashSet<string> approvalSelectedScholarshipIds = new();

    // Approval Tab Filter Properties
    private string approvalSearchQuery = "";
    private string approvalStatusFilter = "";
    private string approvalConfidenceFilter = "";
    private string approvalSourceFilter = "";
    private string approvalDateFilter = "";

    // Approval Tab UI State Properties
    private bool approvalIsLoading = true;
    private string approvalViewMode = "table";
    private string approvalSortColumn = "ScrapedAt";
    private bool approvalSortAscending = false;

    // Approval Tab Pagination Properties
    private int approvalCurrentPage = 1;
    private int approvalPageSize = 20;
    private int approvalTotalPages = 1;
    
    // Data Models
    public class ScrapedScholarship
    {
        public string Title { get; set; } = "";
        public string Source { get; set; } = "";
        public string Amount { get; set; } = "";
        public string DeadlineDate { get; set; } = "";
        public DateTime ScrapedAt { get; set; }
    }
    
    public class VerifiedInstitution
    {
        public string Name { get; set; } = "";
        public string? Website { get; set; }
        public bool IsVerified { get; set; }
        public DateTime VerifiedAt { get; set; }
    }
    
    public class VerifiedOrganization
    {
        public string Name { get; set; } = "";
        public string Website { get; set; } = "";
        public bool IsVerified { get; set; }
        public DateTime VerifiedAt { get; set; }
    }

    private void SetTab(int tab)
    {
        activeTab = tab;
    }

    private void ExportInstitutionData()
    {
        try
        {
            var json = System.Text.Json.JsonSerializer.Serialize(verifiedInstitutionsList, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
            var fileName = $"institutions-{DateTime.Now:yyyy-MM-dd-HH-mm}.json";
            var fileContent = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(json));
            JSRuntime.InvokeVoidAsync("downloadFile", fileName, fileContent);
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to export institution data: {ex.Message}";
        }
    }
    
    private void ExportOrganizationData()
    {
        try
        {
            var json = System.Text.Json.JsonSerializer.Serialize(verifiedOrganizationsList, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
            var fileName = $"organizations-{DateTime.Now:yyyy-MM-dd-HH-mm}.json";
            var fileContent = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(json));
            JSRuntime.InvokeVoidAsync("downloadFile", fileName, fileContent);
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to export organization data: {ex.Message}";
        }
    }

    private async Task VerifyInstitution()
    {
        if (string.IsNullOrWhiteSpace(institutionName))
        {
            errorMessage = "Please enter an institution name.";
            return;
        }

        isLoading = true;
        errorMessage = "";
        successMessage = "";
        
        try
        {
            var result = await WebScrapingService.VerifyInstitutionAsync(institutionName, institutionWebsite);
            
            verifiedInstitutionsList.Add(new VerifiedInstitution
            {
                Name = institutionName,
                Website = institutionWebsite,
                IsVerified = result.IsVerified,
                VerifiedAt = DateTime.Now
            });
            
            successMessage = $"Institution '{institutionName}' verification completed. Status: {(result.IsVerified ? "âœ“ Verified" : "âœ— Not Verified")}";
            
            // Clear form
            institutionName = "";
            institutionWebsite = "";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error verifying institution");
            errorMessage = $"Failed to verify institution: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }



    private async Task VerifyOrganization()
    {
        if (string.IsNullOrWhiteSpace(organizationName) || string.IsNullOrWhiteSpace(organizationWebsite))
        {
            errorMessage = "Please enter both organization name and website.";
            return;
        }

        isLoading = true;
        errorMessage = "";
        successMessage = "";
        
        try
        {
            var isVerified = await WebScrapingService.VerifyOrganizationAsync(organizationName, organizationWebsite);
            
            verifiedOrganizationsList.Add(new VerifiedOrganization
            {
                Name = organizationName,
                Website = organizationWebsite,
                IsVerified = isVerified,
                VerifiedAt = DateTime.Now
            });
            
            successMessage = $"Organization '{organizationName}' verification completed. Status: {(isVerified ? "âœ“ Verified" : "âœ— Not Verified")}";
            
            // Clear form
            organizationName = "";
            organizationWebsite = "";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error verifying organization");
            errorMessage = $"Failed to verify organization: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    // Enhanced AI Scraping Methods
    private async Task ScrapeWithAI()
    {
        if (string.IsNullOrWhiteSpace(enhancedScholarshipUrl))
        {
            errorMessage = "Please enter a valid URL for AI scraping.";
            return;
        }

        isLoading = true;
        errorMessage = "";
        successMessage = "";
        
        try
        {
            // Step 1: Scrape and parse with AI
            var newScholarships = await EnhancedWebScrapingService.ScrapeAndParseScholarshipsAsync(enhancedScholarshipUrl);
            
            // Step 2: Convert EnhancedScrapedScholarship to database entity and save
            int savedCount = 0;
            foreach (var enhancedScholarship in newScholarships)
            {
                try
                {
                    // Create ScrapedScholarship entity from EnhancedScrapedScholarship
                    var scrapedEntity = new c2_eskolar.Models.ScrapedScholarship
                    {
                        Id = Guid.NewGuid().ToString(),
                        Title = enhancedScholarship.Title,
                        Description = enhancedScholarship.Description,
                        Benefits = enhancedScholarship.Benefits,
                        MonetaryValue = enhancedScholarship.MonetaryValue,
                        ApplicationDeadline = enhancedScholarship.ApplicationDeadline,
                        Requirements = enhancedScholarship.Requirements,
                        SlotsAvailable = enhancedScholarship.SlotsAvailable,
                        MinimumGPA = enhancedScholarship.MinimumGPA,
                        RequiredCourse = enhancedScholarship.RequiredCourse,
                        RequiredYearLevel = enhancedScholarship.RequiredYearLevel,
                        RequiredUniversity = enhancedScholarship.RequiredUniversity,
                        ExternalApplicationUrl = enhancedScholarship.ExternalApplicationUrl,
                        SourceUrl = enhancedScholarship.SourceUrl,
                        ScrapedAt = enhancedScholarship.ScrapedAt,
                        ParsingConfidence = enhancedScholarship.ParsingConfidence,
                        Status = c2_eskolar.Models.ScrapingStatus.Scraped,
                        IsEnhanced = true, // Mark as AI-enhanced
                        RawText = enhancedScholarship.RawText,
                        ParsingNotes = string.Join("; ", enhancedScholarship.ParsingNotes),
                        AuthorAttribution = "EskoBot Intelligence",
                        AiModel = "GPT-4.1 Mini",
                        AiPromptVersion = "1.0",
                        EnhancedAt = DateTime.Now,
                        CreatedAt = DateTime.Now,
                        UpdatedAt = DateTime.Now,
                        CreatedBy = "WebScrapingManagement"
                    };

                    // Save to database using ScrapedScholarshipService
                    var saved = await ScrapedScholarshipService.CreateAsync(scrapedEntity);
                    if (saved != null)
                    {
                        savedCount++;
                    }
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "Failed to save scholarship: {Title}", enhancedScholarship.Title);
                }
            }
            
            // Step 3: Add to display list for immediate viewing
            enhancedScholarships.AddRange(newScholarships);
            lastEnhancedScrapeTime = DateTime.Now.ToString("MMM dd, HH:mm");
            
            successMessage = $"Successfully scraped {newScholarships.Count} scholarships and saved {savedCount} to database from {new Uri(enhancedScholarshipUrl).Host}";
            
            if (savedCount < newScholarships.Count)
            {
                errorMessage = $"Warning: Only {savedCount} of {newScholarships.Count} scholarships were saved to database. Check logs for details.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in AI-enhanced scraping");
            errorMessage = $"Failed to scrape with AI: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ExportEnhancedCsv()
    {
        try
        {
            var csvContent = await EnhancedWebScrapingService.GenerateScholarshipCsvAsync(enhancedScholarships);
            var fileName = $"ai_scholarships_{DateTime.Now:yyyyMMdd_HHmmss}.csv";
            
            // Convert to base64 for download
            var csvBytes = System.Text.Encoding.UTF8.GetBytes(csvContent);
            var base64Content = Convert.ToBase64String(csvBytes);
            
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, base64Content);
            successMessage = $"Exported {enhancedScholarships.Count} scholarships to CSV file";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error exporting enhanced CSV");
            errorMessage = $"Failed to export CSV: {ex.Message}";
        }
    }

    private void ViewScholarshipDetails(EnhancedScrapedScholarship scholarship)
    {
        selectedScholarship = scholarship;
        StateHasChanged();
    }

    // Modal support properties and methods
    private bool showRawText = false;

    private void CloseModal()
    {
        selectedScholarship = null;
        showRawText = false;
        StateHasChanged();
    }

    private void ToggleRawText()
    {
        showRawText = !showRawText;
        StateHasChanged();
    }

    private async Task ExportSingleScholarship()
    {
        if (selectedScholarship == null) return;

        try
        {
            var singleScholarshipList = new List<EnhancedScrapedScholarship> { selectedScholarship };
            var csvContent = await EnhancedWebScrapingService.GenerateScholarshipCsvAsync(singleScholarshipList);
            var fileName = $"scholarship_{selectedScholarship.Title.Replace(" ", "_").Replace("/", "_").Replace("\\", "_")}_{DateTime.Now:yyyyMMdd_HHmmss}.csv";
            
            // Convert to base64 for download
            var csvBytes = System.Text.Encoding.UTF8.GetBytes(csvContent);
            var base64Content = Convert.ToBase64String(csvBytes);
            
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, base64Content);
            successMessage = $"Exported scholarship '{selectedScholarship.Title}' to CSV file";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error exporting single scholarship CSV");
            errorMessage = $"Failed to export scholarship CSV: {ex.Message}";
        }
    }

    private string GetSourceHost(string url)
    {
        try
        {
            return new Uri(url).Host;
        }
        catch
        {
            return url;
        }
    }

    // Approval Tab Methods
    protected override async Task OnInitializedAsync()
    {
        await LoadEnhancedScholarshipData();
        await LoadApprovalScholarshipData();
        CalculateApprovalStatistics();
        ApplyApprovalFilters();
    }

    private async Task LoadEnhancedScholarshipData()
    {
        try
        {
            // Load recent enhanced scholarships to restore statistics
            var recentScholarships = await ScrapedScholarshipService.GetRecentAsync(7);
            if (recentScholarships != null && recentScholarships.Any())
            {
                // Convert to enhanced scholarships and filter for AI-enhanced ones
                var recentEnhanced = recentScholarships
                    .Where(s => s.IsEnhanced && !string.IsNullOrEmpty(s.AiModel))
                    .Select(s => new EnhancedScrapedScholarship
                    {
                        Title = s.Title ?? "",
                        Description = s.Description ?? "",
                        Requirements = s.Requirements ?? "",
                        Benefits = s.Benefits ?? "",
                        MonetaryValue = s.MonetaryValue,
                        ApplicationDeadline = s.ApplicationDeadline,
                        SourceUrl = s.SourceUrl ?? "",
                        ExternalApplicationUrl = s.ExternalApplicationUrl ?? "",
                        ParsingConfidence = s.ParsingConfidence,
                        ScrapedAt = s.ScrapedAt,
                        RawText = s.RawText ?? ""
                    })
                    .ToList();
                
                enhancedScholarships = recentEnhanced;
                if (enhancedScholarships.Any())
                {
                    lastEnhancedScrapeTime = $"Last updated: {enhancedScholarships.Max(s => s.ScrapedAt):MMM dd, yyyy HH:mm}";
                }
                else
                {
                    lastEnhancedScrapeTime = "No AI-enhanced scholarships found";
                }
            }
            else
            {
                enhancedScholarships = new List<EnhancedScrapedScholarship>();
                lastEnhancedScrapeTime = "No recent data available";
            }
        }
        catch (Exception ex)
        {
            // Handle any errors gracefully
            enhancedScholarships = new List<EnhancedScrapedScholarship>();
            lastEnhancedScrapeTime = "Error loading data";
        }
    }

    private async Task LoadApprovalScholarshipData()
    {
        approvalIsLoading = true;
        StateHasChanged();

        try
        {
            // Load scholarships from the actual service
            var scholarships = await ScrapedScholarshipService.GetAllAsync();
            approvalAllScholarships = scholarships.ToList();
            
            // Extract unique sources
            approvalAvailableSources = approvalAllScholarships
                .Where(s => !string.IsNullOrEmpty(s.SourceUrl))
                .Select(s => GetApprovalSourceName(s.SourceUrl))
                .Distinct()
                .OrderBy(s => s)
                .ToList();
        }
        catch (Exception ex)
        {
            // Handle error - if no data is available, create empty list
            Console.WriteLine($"Error loading approval scholarship data: {ex.Message}");
            approvalAllScholarships = new List<c2_eskolar.Models.ScrapedScholarship>();
        }
        finally
        {
            approvalIsLoading = false;
            StateHasChanged();
        }
    }

    private void CalculateApprovalStatistics()
    {
        scrapedTotalCount = approvalAllScholarships.Count;
        scrapedTodayCount = approvalAllScholarships.Count(s => s.ScrapedAt.Date == DateTime.Today);
        scrapedPendingCount = approvalAllScholarships.Count(s => s.Status == c2_eskolar.Models.ScrapingStatus.Scraped || s.Status == c2_eskolar.Models.ScrapingStatus.UnderReview);
        scrapedApprovedCount = approvalAllScholarships.Count(s => s.Status == c2_eskolar.Models.ScrapingStatus.Approved);
        scrapedAverageConfidence = approvalAllScholarships.Any() ? approvalAllScholarships.Average(s => s.ParsingConfidence) : 0.0;
    }

    private void ApplyApprovalFilters()
    {
        var filtered = approvalAllScholarships.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(approvalSearchQuery))
        {
            var query = approvalSearchQuery.ToLowerInvariant();
            filtered = filtered.Where(s => 
                (s.Title?.ToLowerInvariant().Contains(query) ?? false) ||
                (s.Description?.ToLowerInvariant().Contains(query) ?? false) ||
                (s.Requirements?.ToLowerInvariant().Contains(query) ?? false));
        }

        // Apply other filters
        if (!string.IsNullOrWhiteSpace(approvalStatusFilter))
            filtered = filtered.Where(s => s.Status.ToString() == approvalStatusFilter);

        if (!string.IsNullOrWhiteSpace(approvalConfidenceFilter))
        {
            filtered = approvalConfidenceFilter switch
            {
                "high" => filtered.Where(s => s.ParsingConfidence >= 0.8),
                "medium" => filtered.Where(s => s.ParsingConfidence >= 0.6 && s.ParsingConfidence < 0.8),
                "low" => filtered.Where(s => s.ParsingConfidence < 0.6),
                _ => filtered
            };
        }

        if (!string.IsNullOrWhiteSpace(approvalSourceFilter))
            filtered = filtered.Where(s => GetApprovalSourceName(s.SourceUrl) == approvalSourceFilter);

        if (!string.IsNullOrWhiteSpace(approvalDateFilter))
        {
            var now = DateTime.Now;
            filtered = approvalDateFilter switch
            {
                "today" => filtered.Where(s => s.ScrapedAt.Date == now.Date),
                "week" => filtered.Where(s => s.ScrapedAt >= now.AddDays(-7)),
                "month" => filtered.Where(s => s.ScrapedAt >= now.AddDays(-30)),
                _ => filtered
            };
        }

        // Apply sorting
        filtered = approvalSortColumn switch
        {
            "Title" => approvalSortAscending ? filtered.OrderBy(s => s.Title) : filtered.OrderByDescending(s => s.Title),
            "Status" => approvalSortAscending ? filtered.OrderBy(s => s.Status) : filtered.OrderByDescending(s => s.Status),
            "ParsingConfidence" => approvalSortAscending ? filtered.OrderBy(s => s.ParsingConfidence) : filtered.OrderByDescending(s => s.ParsingConfidence),
            "ScrapedAt" => approvalSortAscending ? filtered.OrderBy(s => s.ScrapedAt) : filtered.OrderByDescending(s => s.ScrapedAt),
            _ => filtered.OrderByDescending(s => s.ScrapedAt)
        };

        approvalFilteredScholarships = filtered.ToList();
        approvalTotalPages = (int)Math.Ceiling((double)approvalFilteredScholarships.Count() / approvalPageSize);
        approvalCurrentPage = Math.Min(approvalCurrentPage, Math.Max(1, approvalTotalPages));
        UpdateApprovalPaginatedData();
    }

    private void UpdateApprovalPaginatedData()
    {
        var skip = (approvalCurrentPage - 1) * approvalPageSize;
        approvalPaginatedScholarships = approvalFilteredScholarships.Skip(skip).Take(approvalPageSize);
        StateHasChanged();
    }

    // Approval Tab Event Handlers
    private void ClearApprovalFilters()
    {
        approvalSearchQuery = approvalStatusFilter = approvalConfidenceFilter = approvalSourceFilter = approvalDateFilter = "";
        approvalCurrentPage = 1;
        ApplyApprovalFilters();
    }

    private void ApprovalSortBy(string column)
    {
        if (approvalSortColumn == column)
            approvalSortAscending = !approvalSortAscending;
        else
        {
            approvalSortColumn = column;
            approvalSortAscending = true;
        }
        ApplyApprovalFilters();
    }

    private void ChangeApprovalPage(int page)
    {
        if (page >= 1 && page <= approvalTotalPages)
        {
            approvalCurrentPage = page;
            UpdateApprovalPaginatedData();
        }
    }

    private void SetApprovalViewMode(string mode)
    {
        approvalViewMode = mode;
        StateHasChanged();
    }

    private void ToggleApprovalSelectAll(ChangeEventArgs e)
    {
        var isChecked = (bool)(e.Value ?? false);
        approvalSelectedScholarshipIds = isChecked ? 
            approvalPaginatedScholarships.Select(s => GetApprovalScholarshipId(s)).ToHashSet() : 
            new HashSet<string>();
        StateHasChanged();
    }

    private void ToggleApprovalScholarshipSelection(c2_eskolar.Models.ScrapedScholarship scholarship, ChangeEventArgs e)
    {
        var isChecked = (bool)(e.Value ?? false);
        var scholarshipId = GetApprovalScholarshipId(scholarship);
        if (isChecked)
            approvalSelectedScholarshipIds.Add(scholarshipId);
        else
            approvalSelectedScholarshipIds.Remove(scholarshipId);
        StateHasChanged();
    }

    // Approval Tab UI Helper Methods
    private string GetApprovalScholarshipId(c2_eskolar.Models.ScrapedScholarship scholarship)
    {
        return scholarship.Id;
    }

    private string GetApprovalScholarshipStatus(c2_eskolar.Models.ScrapedScholarship scholarship)
    {
        return scholarship.Status.ToString();
    }

    private string GetApprovalRowClass(c2_eskolar.Models.ScrapedScholarship scholarship)
    {
        var classes = new List<string>();
        var scholarshipId = GetApprovalScholarshipId(scholarship);
        if (approvalSelectedScholarshipIds.Contains(scholarshipId))
            classes.Add("table-primary");
        if (scholarship.ParsingConfidence > 0.8)
            classes.Add("enhanced-row");
        return string.Join(" ", classes);
    }

    private string GetApprovalStatusClass(string status) => status?.ToLowerInvariant() switch
    {
        "scraped" => "status-scraped",
        "underreview" => "status-underreview", 
        "approved" => "status-approved",
        "rejected" => "status-rejected",
        "archived" => "status-archived",
        _ => "status-scraped"
    };

    private string GetApprovalStatusIcon(string status) => status?.ToLowerInvariant() switch
    {
        "scraped" => "ðŸ”µ",
        "underreview" => "ðŸŸ¡",
        "approved" => "ðŸŸ¢", 
        "rejected" => "ðŸ”´",
        "archived" => "âšª",
        _ => "ðŸ”µ"
    };

    private string GetApprovalSourceName(string sourceUrl)
    {
        if (string.IsNullOrEmpty(sourceUrl)) return "Unknown";
        try
        {
            var uri = new Uri(sourceUrl);
            return uri.Host.Replace("www.", "");
        }
        catch
        {
            return "Unknown";
        }
    }

    // Approval Tab Action Methods
    private async Task EditApprovalScholarship(c2_eskolar.Models.ScrapedScholarship scholarship)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Edit scholarship: {scholarship.Title}");
    }

    private async Task PreviewApprovalScholarship(c2_eskolar.Models.ScrapedScholarship scholarship)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Preview scholarship: {scholarship.Title}");
    }

    private async Task ApproveApprovalScholarship(c2_eskolar.Models.ScrapedScholarship scholarship)
    {
        try
        {
            var approved = await ScrapedScholarshipService.ApproveAsync(scholarship.Id, "SuperAdmin", "Approved via WebScraping dashboard");
            if (approved)
            {
                scholarship.Status = c2_eskolar.Models.ScrapingStatus.Approved;
                scholarship.ApprovedBy = "SuperAdmin";
                scholarship.ApprovedAt = DateTime.UtcNow;
                scholarship.ReviewNotes = "Approved via WebScraping dashboard";
                
                CalculateApprovalStatistics();
                ApplyApprovalFilters();
                successMessage = $"Scholarship '{scholarship.Title}' has been approved successfully!";
            }
            else
            {
                errorMessage = "Failed to approve scholarship.";
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error approving scholarship: {ex.Message}");
        }
    }

    private async Task DeleteApprovalScholarship(c2_eskolar.Models.ScrapedScholarship scholarship)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{scholarship.Title}'?");
        if (confirmed)
        {
            try
            {
                var deleted = await ScrapedScholarshipService.DeleteAsync(scholarship.Id);
                if (deleted)
                {
                    approvalAllScholarships.Remove(scholarship);
                    CalculateApprovalStatistics();
                    ApplyApprovalFilters();
                    successMessage = $"Scholarship '{scholarship.Title}' has been deleted successfully!";
                }
                else
                {
                    errorMessage = "Failed to delete scholarship.";
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting scholarship: {ex.Message}");
            }
        }
    }

    private async Task ExportApprovalFilteredData()
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Exporting {approvalFilteredScholarships.Count()} scholarships to CSV...");
    }
}

<script>
    window.downloadFile = function(filename, content) {
        const byteCharacters = atob(content);
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        
        // Determine content type based on file extension
        let mimeType = 'application/octet-stream';
        if (filename.endsWith('.csv')) {
            mimeType = 'text/csv;charset=utf-8;';
        } else if (filename.endsWith('.json')) {
            mimeType = 'application/json';
        }
        
        const blob = new Blob([byteArray], { type: mimeType });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
    };
</script>

<style>
    /* Web Scraping Management Styles */
    .scraping-section {
        margin-bottom: 32px;
    }

    .scraping-card {
        background: linear-gradient(135deg, #fff 0%, #f8fafc 100%);
        border-radius: 16px;
        padding: 24px;
        box-shadow: 0 4px 16px rgba(0,0,0,0.08);
        border: 1px solid rgba(0,0,0,0.05);
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        height: 100%;
    }

    .scraping-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #1560d4, #0d387e);
    }

    .scraping-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    }

    .scraping-card-header {
        display: flex;
        align-items: center;
        margin-bottom: 20px;
    }

    .scraping-card-icon {
        width: 48px;
        height: 48px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 20px;
        color: white;
        margin-right: 16px;
        flex-shrink: 0;
    }

    .scraping-card-icon.scholarship { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
    .scraping-card-icon.institution { background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); }
    .scraping-card-icon.organization { background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%); }
    .scraping-card-icon.news { background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%); }

    .scraping-card-header h5 {
        font-size: 1.25rem;
        font-weight: 600;
        color: #2d3748;
        margin: 0 0 4px 0;
    }

    .scraping-card-header p {
        color: #4a5568;
        margin: 0;
        font-size: 0.9rem;
    }

    .scraping-card-body {
        flex: 1;
    }

    .scraping-input {
        border: 2px solid #e2e8f0;
        border-radius: 8px;
        padding: 12px 16px;
        font-size: 0.95rem;
        transition: all 0.3s ease;
    }

    .scraping-input:focus {
        border-color: #1560d4;
        box-shadow: 0 0 0 3px rgba(21, 96, 212, 0.1);
        outline: none;
    }

    .scraping-actions {
        display: flex;
        align-items: center;
        gap: 16px;
        flex-wrap: wrap;
    }

    .btn-scraping {
        padding: 12px 24px;
        border-radius: 8px;
        font-weight: 600;
        font-size: 0.95rem;
        border: none;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        cursor: pointer;
        text-decoration: none;
    }

    .btn-scraping.btn-primary {
        background: linear-gradient(135deg, #1560d4, #0d387e);
        color: white;
    }

    .btn-scraping.btn-primary:hover {
        background: linear-gradient(135deg, #0d387e, #1560d4);
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(21, 96, 212, 0.4);
    }

    .btn-scraping.btn-info {
        background: linear-gradient(135deg, #4299e1, #3182ce);
        color: white;
    }

    .btn-scraping.btn-info:hover {
        background: linear-gradient(135deg, #3182ce, #4299e1);
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(66, 153, 225, 0.4);
    }

    .btn-scraping.btn-warning {
        background: linear-gradient(135deg, #fbbf24, #f59e0b);
        color: white;
    }

    .btn-scraping.btn-warning:hover {
        background: linear-gradient(135deg, #f59e0b, #d97706);
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(245, 158, 11, 0.4);
    }

    .btn-scraping.btn-success {
        background: linear-gradient(135deg, #48bb78, #38a169);
        color: white;
    }

    .btn-scraping.btn-success:hover {
        background: linear-gradient(135deg, #38a169, #48bb78);
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(72, 187, 120, 0.4);
    }

    .btn-scraping.btn-outline-primary {
        background: transparent;
        border: 2px solid #1560d4;
        color: #1560d4;
    }

    .btn-scraping.btn-outline-primary:hover {
        background: #1560d4;
        color: white;
    }

    .btn-scraping.btn-outline-secondary {
        background: transparent;
        border: 2px solid #6b7280;
        color: #6b7280;
    }

    .btn-scraping.btn-outline-secondary:hover {
        background: #6b7280;
        color: white;
    }

    .scraping-help {
        display: flex;
        align-items: center;
        color: #4a5568;
        font-size: 0.85rem;
    }

    .scraping-stats {
        display: flex;
        flex-direction: column;
        gap: 16px;
    }

    .stat-item {
        background: linear-gradient(135deg, #fff 0%, #f8fafc 100%);
        border-radius: 12px;
        padding: 20px;
        text-align: center;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        border: 1px solid rgba(0,0,0,0.05);
    }

    .stat-value {
        font-size: 2rem;
        font-weight: 700;
        color: #2d3748;
        margin-bottom: 4px;
    }

    .stat-label {
        font-size: 0.9rem;
        color: #4a5568;
        font-weight: 500;
    }

    .scraped-data-card {
        background: linear-gradient(135deg, #fff 0%, #f8fafc 100%);
        border-radius: 16px;
        padding: 24px;
        box-shadow: 0 4px 16px rgba(0,0,0,0.08);
        border: 1px solid rgba(0,0,0,0.05);
        position: relative;
        overflow: hidden;
    }

    .scraped-data-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #43e97b, #38f9d7);
    }

    .scraped-data-header {
        display: flex;
        align-items: center;
        margin-bottom: 20px;
    }

    .scraped-data-icon {
        width: 48px;
        height: 48px;
        border-radius: 12px;
        background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 20px;
        color: white;
        margin-right: 16px;
    }

    .scraped-data-header h5 {
        font-size: 1.25rem;
        font-weight: 600;
        color: #2d3748;
        margin: 0 0 4px 0;
    }

    .scraped-data-header p {
        color: #4a5568;
        margin: 0;
        font-size: 0.9rem;
    }

    .data-preview {
        background: #f7fafc;
        border-radius: 8px;
        border: 1px solid #e2e8f0;
        margin-bottom: 16px;
        max-height: 400px;
        overflow-y: auto;
    }

    .data-content {
        padding: 16px;
        margin: 0;
        font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
        font-size: 0.85rem;
        line-height: 1.5;
        color: #2d3748;
        background: transparent;
        border: none;
    }

    .data-actions {
        display: flex;
        gap: 12px;
        flex-wrap: wrap;
    }

    .empty-state {
        text-align: center;
        padding: 60px 20px;
        color: #4a5568;
    }

    .empty-state-icon {
        font-size: 4rem;
        color: #cbd5e0;
        margin-bottom: 20px;
    }

    .empty-state h5 {
        color: #2d3748;
        margin-bottom: 12px;
        font-weight: 600;
    }

    .empty-state p {
        margin-bottom: 24px;
        font-size: 1rem;
    }
    
    .scraped-data-section {
        background: linear-gradient(135deg, #fff 0%, #f8fafc 100%);
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        border: 1px solid rgba(0,0,0,0.05);
    }
    
    .scraped-data-header {
        display: flex;
        justify-content: between;
        align-items: center;
        margin-bottom: 16px;
        flex-wrap: wrap;
        gap: 12px;
    }
    
    .scraped-data-header h5 {
        color: #2d3748;
        font-weight: 600;
        margin: 0;
        flex: 1;
    }
    
    .scraped-data-table {
        margin-bottom: 0;
    }
    
    .scraped-data-table thead th {
        background: linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%);
        border: none;
        color: #4a5568;
        font-weight: 600;
        padding: 12px;
        border-bottom: 2px solid #e2e8f0;
    }
    
    .scraped-data-table tbody td {
        padding: 12px;
        vertical-align: middle;
        border-bottom: 1px solid #f0f0f0;
    }
    
    .scraped-data-table tbody tr:hover {
        background-color: #f7fafc;
    }
    
    .btn-sm {
        padding: 6px 12px;
        font-size: 0.85rem;
    }
    
    .badge {
        font-size: 0.8rem;
        padding: 4px 8px;
    }

    .dashboard-tabs {
        display: flex;
        gap: 8px;
        margin-bottom: 32px;
        justify-content: center;
        flex-wrap: wrap;
    }

    .dashboard-tab {
        background: linear-gradient(135deg, #fbbf24, #f59e0b);
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 25px;
        font-weight: 600;
        font-size: 0.95rem;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-block;
    }

    .dashboard-tab:hover {
        background: linear-gradient(135deg, #f59e0b, #d97706);
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(245, 158, 11, 0.4);
        color: white;
        text-decoration: none;
    }

    .dashboard-tab.active {
        background: linear-gradient(135deg, #1560d4, #0d387e);
        box-shadow: 0 4px 12px rgba(21, 96, 212, 0.4);
    }

    @@media (max-width: 768px) {
        .scraping-actions {
            flex-direction: column;
            align-items: stretch;
        }
        
        .btn-scraping {
            justify-content: center;
        }
        
        .dashboard-tabs {
            flex-direction: column;
            gap: 12px;
        }
        
        .dashboard-tab {
            width: 100%;
        }
        
        .data-actions {
            flex-direction: column;
        }
    }

    /* Modal Styles */
    .scholarship-details {
        margin: 0;
    }

    .detail-section {
        margin-bottom: 24px;
        border-radius: 8px;
        background: #f7fafc;
        padding: 16px;
        border: 1px solid #e2e8f0;
    }

    .detail-section-title {
        color: #2d3748;
        font-weight: 600;
        margin-bottom: 12px;
        display: flex;
        align-items: center;
        font-size: 1rem;
    }

    .detail-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 12px;
    }

    .detail-item {
        display: flex;
        flex-direction: column;
        gap: 4px;
    }

    .detail-item label {
        font-weight: 600;
        color: #4a5568;
        font-size: 0.85rem;
        margin-bottom: 0;
    }

    .detail-value {
        color: #2d3748;
        font-size: 0.95rem;
        word-wrap: break-word;
    }

    .detail-description {
        background: white;
        border: 1px solid #e2e8f0;
        border-radius: 6px;
        padding: 12px;
        color: #2d3748;
        font-size: 0.95rem;
        line-height: 1.5;
        white-space: pre-wrap;
        word-wrap: break-word;
    }

    .parsing-notes {
        display: flex;
        flex-wrap: wrap;
        gap: 6px;
    }

    .raw-text-container {
        margin-top: 8px;
    }

    .raw-text {
        background: white;
        border: 1px solid #e2e8f0;
        border-radius: 6px;
        padding: 12px;
        font-size: 0.8rem;
        color: #4a5568;
        max-height: 300px;
        overflow-y: auto;
        white-space: pre-wrap;
        word-wrap: break-word;
    }

    .modal-dialog-scrollable {
        max-height: 90vh;
    }

    @@media (max-width: 576px) {
        .detail-grid {
            grid-template-columns: 1fr;
        }
        
        .modal-dialog {
            margin: 0.5rem;
        }
    }

    /* Scholarship Management Styles for Approval Tab */
    .scholarship-management-container {
        padding: 20px;
        background-color: #f8f9fa;
        min-height: 100vh;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-card {
        background: linear-gradient(135deg, #fff 0%, #f8fafc 100%);
        border-radius: 16px;
        padding: 24px;
        box-shadow: 0 4px 16px rgba(0,0,0,0.08);
        border: 1px solid rgba(0,0,0,0.05);
        position: relative;
        overflow: hidden;
        display: flex;
        align-items: center;
    }

    .stat-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #1560d4, #0d387e);
    }

    .stat-card.total-scraped::before { background: linear-gradient(90deg, #667eea, #764ba2); }
    .stat-card.pending-review::before { background: linear-gradient(90deg, #f093fb, #f5576c); }
    .stat-card.approved::before { background: linear-gradient(90deg, #4facfe, #00f2fe); }
    .stat-card.avg-confidence::before { background: linear-gradient(90deg, #43e97b, #38f9d7); }

    .stat-icon {
        width: 60px;
        height: 60px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        color: white;
        margin-right: 20px;
        flex-shrink: 0;
    }

    .stat-card.total-scraped .stat-icon { background: linear-gradient(135deg, #667eea, #764ba2); }
    .stat-card.pending-review .stat-icon { background: linear-gradient(135deg, #f093fb, #f5576c); }
    .stat-card.approved .stat-icon { background: linear-gradient(135deg, #4facfe, #00f2fe); }
    .stat-card.avg-confidence .stat-icon { background: linear-gradient(135deg, #43e97b, #38f9d7); }

    .stat-content {
        flex: 1;
    }

    .stat-number {
        font-size: 2.5rem;
        font-weight: 700;
        color: #2d3748;
        margin: 0 0 4px 0;
        line-height: 1;
    }

    .stat-label {
        font-size: 0.95rem;
        color: #4a5568;
        font-weight: 500;
        margin: 0 0 4px 0;
    }

    .stat-trend {
        font-size: 0.8rem;
        padding: 2px 8px;
        border-radius: 12px;
        font-weight: 500;
    }

    .stat-trend.positive {
        background-color: rgba(72, 187, 120, 0.1);
        color: #38a169;
    }

    .stat-trend.neutral {
        background-color: rgba(160, 174, 192, 0.1);
        color: #4a5568;
    }

    .filters-section {
        background: white;
        border-radius: 16px;
        padding: 24px;
        margin-bottom: 30px;
        box-shadow: 0 4px 16px rgba(0,0,0,0.08);
        border: 1px solid rgba(0,0,0,0.05);
    }

    .filters-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 16px;
        border-bottom: 1px solid #e2e8f0;
    }

    .filters-header h3 {
        margin: 0;
        font-size: 1.25rem;
        font-weight: 600;
        color: #2d3748;
    }

    .filter-row {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .filter-group {
        display: flex;
        flex-direction: column;
    }

    .scholarships-table-section {
        background: white;
        border-radius: 16px;
        padding: 24px;
        box-shadow: 0 4px 16px rgba(0,0,0,0.08);
        border: 1px solid rgba(0,0,0,0.05);
    }

    .table-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 16px;
        border-bottom: 1px solid #e2e8f0;
    }

    .table-header h3 {
        margin: 0;
        font-size: 1.25rem;
        font-weight: 600;
        color: #2d3748;
    }

    .record-count {
        color: #6b7280;
        font-size: 0.9rem;
    }

    .table-actions {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .view-toggle {
        display: flex;
        border: 1px solid #d1d5db;
        border-radius: 6px;
        overflow: hidden;
    }

    .view-toggle .btn {
        border: none;
        border-radius: 0;
    }

    .scholarship-table {
        margin-bottom: 0;
    }

    .scholarship-table th {
        background-color: #f8fafc;
        font-weight: 600;
        color: #374151;
        border: none;
        padding: 16px 12px;
    }

    .scholarship-table th.sortable {
        cursor: pointer;
        user-select: none;
        transition: background-color 0.2s;
    }

    .scholarship-table th.sortable:hover {
        background-color: #e5e7eb;
    }

    .scholarship-table td {
        padding: 16px 12px;
        border: none;
        border-bottom: 1px solid #f3f4f6;
        vertical-align: middle;
    }

    .scholarship-title {
        font-weight: 600;
        color: #1f2937;
        margin-bottom: 4px;
    }

    .confidence-indicator {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .confidence-bar {
        width: 60px;
        height: 8px;
        background-color: #e5e7eb;
        border-radius: 4px;
        overflow: hidden;
    }

    .confidence-fill {
        height: 100%;
        background: linear-gradient(90deg, #ef4444, #f59e0b, #10b981);
        transition: width 0.3s ease;
    }

    .confidence-text {
        font-size: 0.8rem;
        font-weight: 600;
        color: #374151;
        min-width: 35px;
    }

    .loading-spinner {
        text-align: center;
        padding: 60px 20px;
        color: #6b7280;
    }

    .loading-spinner .spinner-border {
        width: 3rem;
        height: 3rem;
        margin-bottom: 16px;
    }

    .pagination-section {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 24px;
        padding-top: 16px;
        border-top: 1px solid #e5e7eb;
    }

    .pagination-info {
        color: #6b7280;
        font-size: 0.9rem;
    }

    .enhanced-row {
        background-color: rgba(16, 185, 129, 0.05);
    }

    .status-scraped { background-color: rgba(59, 130, 246, 0.1); color: #1d4ed8; }
    .status-underreview { background-color: rgba(245, 158, 11, 0.1); color: #d97706; }
    .status-approved { background-color: rgba(16, 185, 129, 0.1); color: #059669; }
    .status-rejected { background-color: rgba(239, 68, 68, 0.1); color: #dc2626; }
    .status-archived { background-color: rgba(107, 114, 128, 0.1); color: #374151; }

    .time-ago {
        font-size: 0.75rem;
        color: #9ca3af;
    }

    .cards-view {
        padding: 40px 20px;
    }

    @@media (max-width: 768px) {
        .stats-grid {
            grid-template-columns: 1fr;
        }
        
        .filter-row {
            grid-template-columns: 1fr;
        }
        
        .table-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 16px;
        }
        
        .table-actions {
            width: 100%;
            justify-content: space-between;
        }
    }
</style>