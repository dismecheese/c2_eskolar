@page "/admin/webscraping"
@attribute [Authorize(Roles = "SuperAdmin")]
@inject c2_eskolar.Services.WebScraping.IWebScrapingService WebScrapingService
@inject IJSRuntime JSRuntime
@inject ILogger<WebScrapingManagement> Logger
@using c2_eskolar.Services.WebScraping
@using Microsoft.AspNetCore.Authorization

<div class="container-fluid p-4">
    <div class="row mb-4">
        <div class="col-12">
            <h2 class="mb-0">Web Scraping Management</h2>
            <p class="text-muted">Manage scholarship and news scraping operations</p>
        </div>
    </div>

    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>@errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
        </div>
    }
    @if (!string.IsNullOrWhiteSpace(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i>@successMessage
            <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
        </div>
    }

    <div class="row">
        <!-- Manual Scholarship Scraping -->
        <div class="col-lg-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-graduation-cap me-2"></i>Scholarship Scraping</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Target URL</label>
                        <input type="url" class="form-control" @bind="scholarshipUrl" 
                               placeholder="https://example.com/scholarships" />
                    </div>
                    <button class="btn btn-primary" @onclick="ScrapeScholarships" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        <i class="fas fa-search me-2"></i>Scrape Scholarships
                    </button>
                </div>
            </div>
        </div>

        <!-- Institution Verification -->
        <div class="col-lg-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-university me-2"></i>Institution Verification</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Institution Name</label>
                        <input type="text" class="form-control" @bind="institutionName" 
                               placeholder="University of Example" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Website (Optional)</label>
                        <input type="url" class="form-control" @bind="institutionWebsite" 
                               placeholder="https://university.edu" />
                    </div>
                    <button class="btn btn-info" @onclick="VerifyInstitution" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        <i class="fas fa-check me-2"></i>Verify Institution
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- News Scraping -->
        <div class="col-lg-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-newspaper me-2"></i>News Scraping</h5>
                </div>
                <div class="card-body">
                    <p class="text-muted">Scrape latest scholarship-related news from configured sources.</p>
                    <button class="btn btn-success" @onclick="ScrapeNews" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        <i class="fas fa-sync me-2"></i>Scrape News
                    </button>
                </div>
            </div>
        </div>

        <!-- Organization Verification -->
        <div class="col-lg-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-building me-2"></i>Organization Verification</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Organization Name</label>
                        <input type="text" class="form-control" @bind="organizationName" 
                               placeholder="Example Foundation" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Website</label>
                        <input type="url" class="form-control" @bind="organizationWebsite" 
                               placeholder="https://foundation.org" />
                    </div>
                    <button class="btn btn-warning" @onclick="VerifyOrganization" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        <i class="fas fa-shield-alt me-2"></i>Verify Organization
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Results Section -->
    @if (lastResults != null)
    {
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="fas fa-chart-bar me-2"></i>Last Operation Results</h5>
                    </div>
                    <div class="card-body">
                        <pre class="bg-light p-3 rounded">@lastResults</pre>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private string scholarshipUrl = "";
    private string institutionName = "";
    private string institutionWebsite = "";
    private string organizationName = "";
    private string organizationWebsite = "";
    private string errorMessage = "";
    private string successMessage = "";
    private string? lastResults;
    private bool isLoading = false;

    private async Task ScrapeScholarships()
    {
        if (string.IsNullOrWhiteSpace(scholarshipUrl))
        {
            errorMessage = "Please enter a valid URL.";
            return;
        }

        isLoading = true;
        errorMessage = "";
        successMessage = "";
        
        try
        {
            var scholarships = await WebScrapingService.ScrapeScholarshipsAsync(scholarshipUrl);
            successMessage = $"Successfully scraped {scholarships.Count} scholarships.";
            lastResults = System.Text.Json.JsonSerializer.Serialize(scholarships, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error scraping scholarships");
            errorMessage = $"Error scraping scholarships: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task VerifyInstitution()
    {
        if (string.IsNullOrWhiteSpace(institutionName))
        {
            errorMessage = "Please enter an institution name.";
            return;
        }

        isLoading = true;
        errorMessage = "";
        successMessage = "";
        
        try
        {
            var result = await WebScrapingService.VerifyInstitutionAsync(institutionName, institutionWebsite);
            successMessage = $"Institution verification completed. Status: {(result.IsVerified ? "Verified" : "Not Verified")}";
            lastResults = System.Text.Json.JsonSerializer.Serialize(result, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error verifying institution");
            errorMessage = $"Error verifying institution: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ScrapeNews()
    {
        isLoading = true;
        errorMessage = "";
        successMessage = "";
        
        try
        {
            var news = await WebScrapingService.ScrapeScholarshipNewsAsync();
            successMessage = $"Successfully scraped {news.Count} news articles.";
            lastResults = System.Text.Json.JsonSerializer.Serialize(news, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error scraping news");
            errorMessage = $"Error scraping news: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task VerifyOrganization()
    {
        if (string.IsNullOrWhiteSpace(organizationName) || string.IsNullOrWhiteSpace(organizationWebsite))
        {
            errorMessage = "Please enter both organization name and website.";
            return;
        }

        isLoading = true;
        errorMessage = "";
        successMessage = "";
        
        try
        {
            var isVerified = await WebScrapingService.VerifyOrganizationAsync(organizationName, organizationWebsite);
            successMessage = $"Organization verification completed. Status: {(isVerified ? "Verified" : "Not Verified")}";
            lastResults = $"{{\"OrganizationName\": \"{organizationName}\", \"Website\": \"{organizationWebsite}\", \"IsVerified\": {isVerified.ToString().ToLower()}}}";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error verifying organization");
            errorMessage = $"Error verifying organization: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}