@page "/admin/scholarships"
@attribute [Authorize(Roles = "SuperAdmin")]
@layout Layout.SuperAdminDashLayout
@using c2_eskolar.Models
@using c2_eskolar.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using System.Text
@inject IDbContextFactory<c2_eskolar.Data.ApplicationDbContext> DbContextFactory
@inject IJSRuntime JSRuntime
@attribute [StreamRendering(true)]
@implements IDisposable

<PageTitle>Scholarship Management - Eskolar</PageTitle>

<div class="dashboard-center-container">
    <!-- Top Bar -->
    <div class="dashboard-topbar">
        <span class="dashboard-date">@DateTime.Now.ToString("dd MMM yyyy, ddd")</span>
    </div>

    <!-- Welcome Banner -->
    <div class="dashboard-banner-centered">
        <div class="banner-text">
            <h2>Scholarship Management</h2>
            <p>Manage and monitor all scholarship programs across the platform</p>
        </div>
        <img src="images/eskolar_books.svg" alt="Books" class="banner-img" />
    </div>

    <!-- Main Content -->
    <div class="scholarship-management-container">
        <!-- Statistics Cards -->
        <div class="stats-grid">
            <div class="stat-card total-scraped">
                <div class="stat-icon">
                    <i class="fas fa-database"></i>
                </div>
                <div class="stat-content">
                    <h3 class="stat-number">@totalCount</h3>
                    <p class="stat-label">Total Scholarships</p>
                    <span class="stat-trend positive">All programs</span>
                </div>
            </div>

            <div class="stat-card pending-review">
                <div class="stat-icon">
                    <i class="fas fa-check-circle"></i>
                </div>
                <div class="stat-content">
                    <h3 class="stat-number">@activeCount</h3>
                    <p class="stat-label">Active</p>
                    <span class="stat-trend positive">Currently available</span>
                </div>
            </div>

            <div class="stat-card approved">
                <div class="stat-icon">
                    <i class="fas fa-times-circle"></i>
                </div>
                <div class="stat-content">
                    <h3 class="stat-number">@inactiveCount</h3>
                    <p class="stat-label">Inactive</p>
                    <span class="stat-trend neutral">Not available</span>
                </div>
            </div>

            <div class="stat-card avg-confidence">
                <div class="stat-icon">
                    <i class="fas fa-external-link-alt"></i>
                </div>
                <div class="stat-content">
                    <h3 class="stat-number">@externalCount</h3>
                    <p class="stat-label">External</p>
                    <span class="stat-trend neutral">With external links</span>
                </div>
            </div>
        </div>

        <!-- Filters and Search -->
        <div class="filters-section">
            <div class="filters-header">
                <div class="filters-title-section">
                    <div class="filters-icon">
                        <i class="fas fa-filter"></i>
                    </div>
                    <div class="filters-title-content">
                        <h3 class="filters-title">Filter & Search Scholarships</h3>
                        <p class="filters-subtitle">Refine your search to find specific scholarships</p>
                    </div>
                </div>
                <button class="btn btn-modern-secondary btn-sm" @onclick="ClearFilters">
                    <i class="fas fa-undo me-1"></i>
                    Clear Filters
                </button>
            </div>

            <div class="filters-content">
                <!-- Search Row - Full Width -->
                <div class="row search-row">
                    <div class="col-12">
                        <div class="filter-group">
                            <label class="form-label">Search Scholarships</label>
                            <div class="search-input-container">
                                <input type="text" class="form-control" @bind="searchQuery" @bind:event="oninput" @bind:after="OnSearchInputChanged" placeholder="Search by title, description, requirements, or benefits...">
                                <i class="fas fa-search search-input-icon"></i>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Filters Row - Evenly Spaced -->
                <div class="row filters-row">
                    <div class="col-sm-6 col-md-3">
                        <div class="filter-group">
                            <label class="form-label">Status</label>
                            <select class="form-select" @bind="statusFilter" @bind:after="ApplyFilters">
                                <option value="">All Statuses</option>
                                <option value="Active">Active</option>
                                <option value="Inactive">Inactive</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-sm-6 col-md-3">
                        <div class="filter-group">
                            <label class="form-label">Type</label>
                            <select class="form-select" @bind="typeFilter" @bind:after="ApplyFilters">
                                <option value="">All Types</option>
                                <option value="Internal">Internal</option>
                                <option value="External">External</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-sm-6 col-md-3">
                        <div class="filter-group">
                            <label class="form-label">Institution</label>
                            <select class="form-select" @bind="institutionFilter" @bind:after="ApplyFilters">
                                <option value="">All Institutions</option>
                                @foreach (var institution in availableInstitutions)
                                {
                                    <option value="@institution">@institution</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="col-sm-6 col-md-3">
                        <div class="filter-group">
                            <label class="form-label">Benefactor</label>
                            <select class="form-select" @bind="benefactorFilter" @bind:after="ApplyFilters">
                                <option value="">All Benefactors</option>
                                @foreach (var benefactor in availableBenefactors)
                                {
                                    <option value="@benefactor">@benefactor</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Scholarships Data Table -->
        <div class="scholarships-table-section">
            <div class="table-header">
                <div class="table-title-section centered">
                    <div class="table-icon">
                        <i class="fas fa-table"></i>
                    </div>
                    <div class="table-title-content">
                        <h3 class="table-title">Scholarships</h3>
                        <div class="record-count">
                            Showing @paginatedScholarships.Count() of @filteredScholarships.Count() scholarships
                        </div>
                    </div>
                </div>
                <div class="table-actions">
                    <button class="btn @(selectedScholarshipIds.Count == paginatedScholarships.Count() && paginatedScholarships.Any() ? "btn-primary" : "btn-outline-primary") btn-sm" @onclick="ToggleSelectAllButton" title="@(selectedScholarshipIds.Count == paginatedScholarships.Count() && paginatedScholarships.Any() ? "Deselect All" : "Select All")">
                        <i class="fas @(selectedScholarshipIds.Count == paginatedScholarships.Count() && paginatedScholarships.Any() ? "fa-check-square" : "fa-square")"></i>
                    </button>
                    <div class="view-toggle">
                        <button class="btn @(viewMode == "table" ? "btn-primary" : "btn-outline-primary") btn-sm" @onclick='() => SetViewMode("table")'>
                            <i class="fas fa-table"></i>
                        </button>
                        <button class="btn @(viewMode == "cards" ? "btn-primary" : "btn-outline-primary") btn-sm" @onclick='() => SetViewMode("cards")'>
                            <i class="fas fa-th"></i>
                        </button>
                    </div>
                    <button class="btn btn-success btn-sm" @onclick="ExportFilteredData">
                        <i class="fas fa-download me-1"></i>
                        Export
                    </button>
                </div>
            </div>

            @if (isLoading)
            {
                <div class="loading-spinner">
                    <div class="spinner-border text-primary" role="status"></div>
                    <p class="mt-3">Loading scholarship data...</p>
                </div>
            }
            else if (viewMode == "table")
            {
                <!-- Direct table without card wrapper -->
                <div class="table-responsive">
                    <table class="table scholarship-table">
                        <thead>
                            <tr>
                                <th class="sortable" @onclick='() => SortBy("Title")' style="width: 30%;">
                                    Title
                                    @if (sortColumn == "Title")
                                    {
                                        <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ms-1"></i>
                                    }
                                </th>
                                <th class="sortable" @onclick='() => SortBy("IsActive")' style="width: 12%;">
                                    Status
                                    @if (sortColumn == "IsActive")
                                    {
                                        <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ms-1"></i>
                                    }
                                </th>
                                <th class="sortable" @onclick='() => SortBy("IsInternal")' style="width: 12%;">
                                    Type
                                    @if (sortColumn == "IsInternal")
                                    {
                                        <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ms-1"></i>
                                    }
                                </th>
                                <th class="sortable" @onclick='() => SortBy("ApplicationDeadline")' style="width: 20%;">
                                    Deadline
                                    @if (sortColumn == "ApplicationDeadline")
                                    {
                                        <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ms-1"></i>
                                    }
                                </th>
                                <th style="width: 26%; text-align: center;">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var scholarship in paginatedScholarships)
                            {
                                <tr class="@GetRowClass(scholarship) selectable-row" @onclick="() => ToggleRowSelection(scholarship)" @onclick:stopPropagation="false">
                                    <td>
                                        <div class="scholarship-title">
                                            @scholarship.Title
                                        </div>
                                        @if (scholarship.MonetaryValue.HasValue)
                                        {
                                            <small class="text-muted">₱@scholarship.MonetaryValue.Value.ToString("N0")</small>
                                        }
                                    </td>
                                    <td>
                                        <span class="badge @GetStatusClass(scholarship.IsActive)" style="color: #000;">
                                            @GetStatusIcon(scholarship.IsActive)
                                            @(scholarship.IsActive ? "Active" : "Inactive")
                                        </span>
                                    </td>
                                    <td>
                                        <span class="badge @GetTypeClass(scholarship.IsInternal)" style="color: #000;">
                                            @(scholarship.IsInternal ? "Internal" : "External")
                                        </span>
                                    </td>
                                    <td class="scraped-date-cell" style="white-space: normal; word-wrap: break-word;">
                                        <div class="scraped-date-info">
                                            <div class="date-main">@scholarship.ApplicationDeadline.ToString("MM/dd/yyyy")</div>
                                            @if (scholarship.ApplicationDeadline < DateTime.Now)
                                            {
                                                <small class="d-block text-danger">(Expired)</small>
                                            }
                                            else
                                            {
                                                <small class="d-block text-muted">(@((scholarship.ApplicationDeadline - DateTime.Now).TotalDays.ToString("F0")) days left)</small>
                                            }
                                        </div>
                                    </td>
                                    <td style="text-align: center;" @onclick:stopPropagation="true">
                                        <div class="action-buttons-modern">
                                            <button class="btn btn-modern-primary btn-sm" @onclick="() => EditScholarship(scholarship)" title="Edit">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-modern-secondary btn-sm" @onclick="() => PreviewScholarship(scholarship)" title="View">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            @if (scholarship.IsActive)
                                            {
                                                <button class="btn btn-modern-warning btn-sm" @onclick="() => ToggleScholarshipStatus(scholarship)" title="Deactivate">
                                                    <i class="fas fa-pause"></i>
                                                </button>
                                            }
                                            else
                                            {
                                                <button class="btn btn-modern-success btn-sm" @onclick="() => ToggleScholarshipStatus(scholarship)" title="Activate">
                                                    <i class="fas fa-play"></i>
                                                </button>
                                            }
                                            <button class="btn btn-modern-danger btn-sm" @onclick="() => DeleteScholarship(scholarship)" title="Delete">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Modern Pagination -->
                <div class="modern-pagination-section">
                    <div class="pagination-info">
                        <span class="pagination-text">Page @currentPage of @totalPages</span>
                        <span class="pagination-count">(@filteredScholarships.Count() total scholarships)</span>
                    </div>
                    <nav class="pagination-nav">
                        <ul class="modern-pagination">
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(1)" disabled="@(currentPage == 1)">
                                    <i class="fas fa-angle-double-left"></i>
                                </button>
                            </li>
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage == 1)">
                                    <i class="fas fa-angle-left"></i>
                                </button>
                            </li>
                            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                            {
                                int page = i;
                                <li class="page-item @(currentPage == page ? "active" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(page)">@(page)</button>
                                </li>
                            }
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage == totalPages)">
                                    <i class="fas fa-angle-right"></i>
                                </button>
                            </li>
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(totalPages)" disabled="@(currentPage == totalPages)">
                                    <i class="fas fa-angle-double-right"></i>
                                </button>
                            </li>
                        </ul>
                    </nav>
                </div>
            }
            else
            {
                <!-- Cards centered view -->
                <div class="cards-view-centered">
                    <div class="row g-4 justify-content-center">
                        @foreach (var scholarship in paginatedScholarships)
                        {
                            <div class="col-lg-6 col-xl-4">
                                <div class="scholarship-card @GetRowClass(scholarship)">
                                    <div class="scholarship-card-header">
                                        <div class="scholarship-checkbox">
                                            <input type="checkbox" class="form-check-input" 
                                                   checked="@selectedScholarshipIds.Contains(scholarship.ScholarshipId)"
                                                   @onchange="(e) => ToggleScholarshipSelection(scholarship, e)" />
                                        </div>
                                        <div class="scholarship-status">
                                            <span class="badge @GetStatusClass(scholarship.IsActive)">
                                                @GetStatusIcon(scholarship.IsActive)
                                                @(scholarship.IsActive ? "Active" : "Inactive")
                                            </span>
                                        </div>
                                    </div>
                                    
                                    <div class="scholarship-card-body">
                                        <h5 class="scholarship-card-title">@scholarship.Title</h5>
                                        @if (scholarship.Institution != null)
                                        {
                                            <p class="scholarship-card-source">@scholarship.Institution.InstitutionName</p>
                                        }
                                        else if (scholarship.Benefactor != null)
                                        {
                                            <p class="scholarship-card-source">@scholarship.Benefactor.OrganizationName</p>
                                        }
                                        
                                        <div class="scholarship-card-meta">
                                            <div class="confidence-section">
                                                <label>Type</label>
                                                <div class="type-badge">
                                                    <span class="badge @GetTypeClass(scholarship.IsInternal)">
                                                        @(scholarship.IsInternal ? "Internal" : "External")
                                                    </span>
                                                </div>
                                            </div>
                                            
                                            <div class="scraped-date">
                                                <label>Deadline</label>
                                                <div class="date-info">
                                                    <span class="date">@scholarship.ApplicationDeadline.ToString("MMM dd, yyyy")</span>
                                                    @if (scholarship.ApplicationDeadline < DateTime.Now)
                                                    {
                                                        <span class="time-ago text-danger">Expired</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="time-ago">@((scholarship.ApplicationDeadline - DateTime.Now).TotalDays.ToString("F0")) days left</span>
                                                    }
                                                </div>
                                            </div>
                                        </div>

                                        @if (scholarship.MonetaryValue.HasValue)
                                        {
                                            <div class="monetary-value">
                                                <i class="fas fa-money-bill-wave me-2"></i>
                                                <strong>₱@scholarship.MonetaryValue.Value.ToString("N0")</strong>
                                            </div>
                                        }
                                    </div>
                                    
                                    <div class="scholarship-card-actions">
                                        <button class="btn btn-modern-primary btn-sm" @onclick="() => EditScholarship(scholarship)" title="Edit">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-modern-secondary btn-sm" @onclick="() => PreviewScholarship(scholarship)" title="View">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        @if (scholarship.IsActive)
                                        {
                                            <button class="btn btn-modern-warning btn-sm" @onclick="() => ToggleScholarshipStatus(scholarship)" title="Deactivate">
                                                <i class="fas fa-pause"></i>
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-modern-success btn-sm" @onclick="() => ToggleScholarshipStatus(scholarship)" title="Activate">
                                                <i class="fas fa-play"></i>
                                            </button>
                                        }
                                        <button class="btn btn-modern-danger btn-sm" @onclick="() => DeleteScholarship(scholarship)" title="Delete">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    
                    @if (!paginatedScholarships.Any())
                    {
                        <div class="no-results-card">
                            <div class="no-results-icon">
                                <i class="fas fa-search"></i>
                            </div>
                            <h5>No scholarships found</h5>
                            <p class="text-muted">Try adjusting your filters or search terms.</p>
                        </div>
                    }
                </div>

                <!-- Modern Pagination for Cards -->
                <div class="modern-pagination-section">
                    <div class="pagination-info">
                        <span class="pagination-text">Page @currentPage of @totalPages</span>
                        <span class="pagination-count">(@filteredScholarships.Count() total scholarships)</span>
                    </div>
                    <nav class="pagination-nav">
                        <ul class="modern-pagination">
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(1)" disabled="@(currentPage == 1)">
                                    <i class="fas fa-angle-double-left"></i>
                                </button>
                            </li>
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage == 1)">
                                    <i class="fas fa-angle-left"></i>
                                </button>
                            </li>
                            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                            {
                                int page = i;
                                <li class="page-item @(currentPage == page ? "active" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(page)">@(page)</button>
                                </li>
                            }
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage == totalPages)">
                                    <i class="fas fa-angle-right"></i>
                                </button>
                            </li>
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(totalPages)" disabled="@(currentPage == totalPages)">
                                    <i class="fas fa-angle-double-right"></i>
                                </button>
                            </li>
                        </ul>
                    </nav>
                </div>
            }
        </div>
    </div>
</div><!-- End dashboard-center-container -->

    <!-- Toast Notifications -->
    @if (toasts.Any())
    {
        <div class="toast-container">
            @foreach (var toast in toasts)
            {
                <div class="toast-notification @(toast.StartsWith("✅") ? "success" : "error")">
                    <span class="toast-message">@toast</span>
                    <button class="toast-close" @onclick="() => DismissToast(toast)">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            }
        </div>
    }

    <!-- View/Edit Modal -->
    @if (selectedScholarship != null)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-lg modal-dialog-scrollable modal-dialog-centered">
                <div class="modal-content modern-modal">
                    <div class="modal-header modern-modal-header">
                        <h5 class="modal-title">
                            <i class="fas @(isEditing ? "fa-edit" : "fa-graduation-cap") me-2"></i>
                            @(isEditing ? "Edit" : "View") Scholarship Details
                        </h5>
                        <button type="button" class="modern-btn-close" @onclick="CloseModal">
                            <i class="bi bi-x"></i>
                        </button>
                    </div>
                    
                    <div class="modal-body modern-modal-body">
                        @if (!isEditing)
                        {
                            <!-- View Mode -->
                            <div class="scholarship-details">
                                <div class="detail-section">
                                    <h5 class="detail-title">Basic Information</h5>
                                    <div class="detail-grid">
                                        <div class="detail-item">
                                            <label>Title</label>
                                            <p>@selectedScholarship.Title</p>
                                        </div>
                                        <div class="detail-item">
                                            <label>Status</label>
                                            <p><span class="badge @GetStatusClass(selectedScholarship.IsActive)">@(selectedScholarship.IsActive ? "Active" : "Inactive")</span></p>
                                        </div>
                                        <div class="detail-item">
                                            <label>Type</label>
                                            <p><span class="badge @GetTypeClass(selectedScholarship.IsInternal)">@(selectedScholarship.IsInternal ? "Internal" : "External")</span></p>
                                        </div>
                                        <div class="detail-item">
                                            <label>Deadline</label>
                                            <p>@selectedScholarship.ApplicationDeadline.ToString("MMMM dd, yyyy")</p>
                                        </div>
                                    </div>
                                </div>

                            @if (!string.IsNullOrEmpty(selectedScholarship.Description))
                            {
                                <div class="detail-section">
                                    <h5 class="detail-title">Description</h5>
                                    <p class="detail-text">@selectedScholarship.Description</p>
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(selectedScholarship.Benefits))
                            {
                                <div class="detail-section">
                                    <h5 class="detail-title">Benefits</h5>
                                    <p class="detail-text">@selectedScholarship.Benefits</p>
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(selectedScholarship.Requirements))
                            {
                                <div class="detail-section">
                                    <h5 class="detail-title">Requirements</h5>
                                    <p class="detail-text">@selectedScholarship.Requirements</p>
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(selectedScholarship.Eligibility))
                            {
                                <div class="detail-section">
                                    <h5 class="detail-title">Eligibility</h5>
                                    <p class="detail-text">@selectedScholarship.Eligibility</p>
                                </div>
                            }

                            <div class="detail-section">
                                <h5 class="detail-title">Additional Information</h5>
                                <div class="detail-grid">
                                    @if (selectedScholarship.MonetaryValue.HasValue)
                                    {
                                        <div class="detail-item">
                                            <label>Monetary Value</label>
                                            <p>₱@selectedScholarship.MonetaryValue.Value.ToString("N2")</p>
                                        </div>
                                    }
                                    @if (selectedScholarship.SlotsAvailable.HasValue)
                                    {
                                        <div class="detail-item">
                                            <label>Slots Available</label>
                                            <p>@selectedScholarship.SlotsAvailable</p>
                                        </div>
                                    }
                                    @if (selectedScholarship.MinimumGPA.HasValue)
                                    {
                                        <div class="detail-item">
                                            <label>Minimum GPA</label>
                                            <p>@selectedScholarship.MinimumGPA.Value.ToString("F2")</p>
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(selectedScholarship.RequiredCourse))
                                    {
                                        <div class="detail-item">
                                            <label>Required Course</label>
                                            <p>@selectedScholarship.RequiredCourse</p>
                                        </div>
                                    }
                                    @if (selectedScholarship.RequiredYearLevel.HasValue)
                                    {
                                        <div class="detail-item">
                                            <label>Required Year Level</label>
                                            <p>Year @selectedScholarship.RequiredYearLevel</p>
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(selectedScholarship.RequiredUniversity))
                                    {
                                        <div class="detail-item">
                                            <label>Required University</label>
                                            <p>@selectedScholarship.RequiredUniversity</p>
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(selectedScholarship.ExternalApplicationUrl))
                                    {
                                        <div class="detail-item">
                                            <label>External Application URL</label>
                                            <p><a href="@selectedScholarship.ExternalApplicationUrl" target="_blank">@selectedScholarship.ExternalApplicationUrl</a></p>
                                        </div>
                                    }
                                </div>
                            </div>
                            </div>
                        }
                        else
                        {
                            <!-- Edit Mode -->
                            <div class="edit-form">
                                <div class="mb-3">
                                    <label class="form-label">Title</label>
                                    <input type="text" class="form-control" @bind="selectedScholarship.Title" />
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Description</label>
                                    <textarea class="form-control" rows="4" @bind="selectedScholarship.Description"></textarea>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Benefits</label>
                                    <textarea class="form-control" rows="3" @bind="selectedScholarship.Benefits"></textarea>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Requirements</label>
                                    <textarea class="form-control" rows="3" @bind="selectedScholarship.Requirements"></textarea>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Eligibility</label>
                                    <textarea class="form-control" rows="3" @bind="selectedScholarship.Eligibility"></textarea>
                                </div>

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">Monetary Value</label>
                                        <input type="number" class="form-control" @bind="selectedScholarship.MonetaryValue" />
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">Application Deadline</label>
                                        <input type="date" class="form-control" @bind="selectedScholarship.ApplicationDeadline" />
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">Slots Available</label>
                                        <input type="number" class="form-control" @bind="selectedScholarship.SlotsAvailable" />
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">Minimum GPA</label>
                                        <input type="number" step="0.01" class="form-control" @bind="selectedScholarship.MinimumGPA" />
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">Required Course</label>
                                        <input type="text" class="form-control" @bind="selectedScholarship.RequiredCourse" />
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">Required Year Level</label>
                                        <input type="number" class="form-control" @bind="selectedScholarship.RequiredYearLevel" />
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Required University</label>
                                    <input type="text" class="form-control" @bind="selectedScholarship.RequiredUniversity" />
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">External Application URL</label>
                                    <input type="url" class="form-control" @bind="selectedScholarship.ExternalApplicationUrl" />
                                </div>

                                <div class="form-check mb-3">
                                    <input type="checkbox" class="form-check-input" id="isActive" @bind="selectedScholarship.IsActive" />
                                    <label class="form-check-label" for="isActive">Active</label>
                                </div>

                                <div class="form-check mb-3">
                                    <input type="checkbox" class="form-check-input" id="isInternal" @bind="selectedScholarship.IsInternal" />
                                    <label class="form-check-label" for="isInternal">Internal Scholarship</label>
                                </div>
                            </div>
                        }
                    </div>
                    
                    <div class="modal-footer modern-modal-footer">
                        @if (!isEditing)
                        {
                            <button class="btn btn-modern-secondary" @onclick="CloseModal">
                                <i class="fas fa-times me-2"></i>
                                Close
                            </button>
                            <button class="btn btn-modern-primary" @onclick="StartEditing">
                                <i class="fas fa-edit me-2"></i>
                                Edit
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-modern-secondary" @onclick="CancelEditing">
                                <i class="fas fa-times me-2"></i>
                                Cancel
                            </button>
                            <button class="btn btn-modern-success" @onclick="SaveScholarship" disabled="@isModalLoading">
                                @if (isModalLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                else
                                {
                                    <i class="fas fa-save me-2"></i>
                                }
                                Save Changes
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    @code {
    // Data
    private List<Scholarship> allScholarships = new();
    private List<Scholarship> filteredScholarships = new();
    private List<Scholarship> paginatedScholarships = new();
    private Scholarship? selectedScholarship = null;

    // Statistics
    private int totalCount = 0;
    private int activeCount = 0;
    private int inactiveCount = 0;
    private int externalCount = 0;

    // Filter variables
    private string searchQuery = "";
    private string statusFilter = "";
    private string typeFilter = "";
    private string institutionFilter = "";
    private string benefactorFilter = "";
    private List<string> availableInstitutions = new();
    private List<string> availableBenefactors = new();

    // Pagination
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;

    // Sorting
    private string sortColumn = "Title";
    private bool sortAscending = true;

    // UI State
    private string viewMode = "table";
    private bool isLoading = true;
    private bool isEditing = false;
    private bool isModalLoading = false;
    private HashSet<int> selectedScholarshipIds = new();
    private List<string> toasts = new();
    private Timer? searchDebounceTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            
            allScholarships = await context.Scholarships
                .Include(s => s.Institution)
                .Include(s => s.Benefactor)
                .OrderByDescending(s => s.CreatedAt)
                .ToListAsync();

            // Populate filter options
            availableInstitutions = allScholarships
                .Where(s => s.Institution != null)
                .Select(s => s.Institution!.InstitutionName)
                .Distinct()
                .OrderBy(n => n)
                .ToList();

            availableBenefactors = allScholarships
                .Where(s => s.Benefactor != null)
                .Select(s => s.Benefactor!.OrganizationName)
                .Distinct()
                .OrderBy(n => n)
                .ToList();

            CalculateStatistics();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading scholarships: {ex.Message}");
            toasts.Add($"❌ Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void CalculateStatistics()
    {
        totalCount = allScholarships.Count;
        activeCount = allScholarships.Count(s => s.IsActive);
        inactiveCount = allScholarships.Count(s => !s.IsActive);
        externalCount = allScholarships.Count(s => !string.IsNullOrEmpty(s.ExternalApplicationUrl));
    }

    private void ApplyFilters()
    {
        filteredScholarships = allScholarships.ToList();

        // Search filter
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            var query = searchQuery.ToLower();
            filteredScholarships = filteredScholarships.Where(s =>
                (s.Title?.ToLower().Contains(query) ?? false) ||
                (s.Description?.ToLower().Contains(query) ?? false) ||
                (s.Requirements?.ToLower().Contains(query) ?? false) ||
                (s.Benefits?.ToLower().Contains(query) ?? false)
            ).ToList();
        }

        // Status filter
        if (!string.IsNullOrEmpty(statusFilter))
        {
            bool isActive = statusFilter == "Active";
            filteredScholarships = filteredScholarships.Where(s => s.IsActive == isActive).ToList();
        }

        // Type filter
        if (!string.IsNullOrEmpty(typeFilter))
        {
            bool isInternal = typeFilter == "Internal";
            filteredScholarships = filteredScholarships.Where(s => s.IsInternal == isInternal).ToList();
        }

        // Institution filter
        if (!string.IsNullOrEmpty(institutionFilter))
        {
            filteredScholarships = filteredScholarships.Where(s => s.Institution?.InstitutionName == institutionFilter).ToList();
        }

        // Benefactor filter
        if (!string.IsNullOrEmpty(benefactorFilter))
        {
            filteredScholarships = filteredScholarships.Where(s => s.Benefactor?.OrganizationName == benefactorFilter).ToList();
        }

        // Apply sorting
        ApplySorting();

        // Calculate pagination
        totalPages = (int)Math.Ceiling(filteredScholarships.Count() / (double)pageSize);
        if (currentPage > totalPages && totalPages > 0)
        {
            currentPage = totalPages;
        }
        if (currentPage < 1) currentPage = 1;

        // Apply pagination
        paginatedScholarships = filteredScholarships
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();

        StateHasChanged();
    }

    private void ApplySorting()
    {
        filteredScholarships = sortColumn switch
        {
            "Title" => sortAscending 
                ? filteredScholarships.OrderBy(s => s.Title).ToList()
                : filteredScholarships.OrderByDescending(s => s.Title).ToList(),
            "IsActive" => sortAscending
                ? filteredScholarships.OrderBy(s => s.IsActive).ToList()
                : filteredScholarships.OrderByDescending(s => s.IsActive).ToList(),
            "IsInternal" => sortAscending
                ? filteredScholarships.OrderBy(s => s.IsInternal).ToList()
                : filteredScholarships.OrderByDescending(s => s.IsInternal).ToList(),
            "ApplicationDeadline" => sortAscending
                ? filteredScholarships.OrderBy(s => s.ApplicationDeadline).ToList()
                : filteredScholarships.OrderByDescending(s => s.ApplicationDeadline).ToList(),
            _ => filteredScholarships.ToList()
        };
    }

    private void SortBy(string column)
    {
        if (sortColumn == column)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortColumn = column;
            sortAscending = true;
        }
        ApplyFilters();
    }

    private void OnSearchInputChanged()
    {
        searchDebounceTimer?.Dispose();
        searchDebounceTimer = new Timer(_ =>
        {
            InvokeAsync(() =>
            {
                currentPage = 1;
                ApplyFilters();
            });
        }, null, 300, Timeout.Infinite);
    }

    private void ClearFilters()
    {
        searchQuery = "";
        statusFilter = "";
        typeFilter = "";
        institutionFilter = "";
        benefactorFilter = "";
        currentPage = 1;
        ApplyFilters();
    }

    private void ChangePage(int page)
    {
        currentPage = page;
        ApplyFilters();
    }

    private void SetViewMode(string mode)
    {
        viewMode = mode;
        StateHasChanged();
    }

    private void ToggleSelectAllButton()
    {
        if (selectedScholarshipIds.Count == paginatedScholarships.Count && paginatedScholarships.Any())
        {
            selectedScholarshipIds.Clear();
        }
        else
        {
            selectedScholarshipIds = paginatedScholarships.Select(s => s.ScholarshipId).ToHashSet();
        }
        StateHasChanged();
    }

    private void ToggleRowSelection(Scholarship scholarship)
    {
        if (selectedScholarshipIds.Contains(scholarship.ScholarshipId))
        {
            selectedScholarshipIds.Remove(scholarship.ScholarshipId);
        }
        else
        {
            selectedScholarshipIds.Add(scholarship.ScholarshipId);
        }
        StateHasChanged();
    }

    private void ToggleScholarshipSelection(Scholarship scholarship, ChangeEventArgs e)
    {
        if ((bool?)e.Value == true)
        {
            selectedScholarshipIds.Add(scholarship.ScholarshipId);
        }
        else
        {
            selectedScholarshipIds.Remove(scholarship.ScholarshipId);
        }
        StateHasChanged();
    }

    private void PreviewScholarship(Scholarship scholarship)
    {
        selectedScholarship = scholarship;
        isEditing = false;
        StateHasChanged();
    }

    private void EditScholarship(Scholarship scholarship)
    {
        selectedScholarship = scholarship;
        isEditing = true;
        StateHasChanged();
    }

    private void StartEditing()
    {
        isEditing = true;
        StateHasChanged();
    }

    private void CancelEditing()
    {
        isEditing = false;
        StateHasChanged();
    }

    private void CloseModal()
    {
        selectedScholarship = null;
        isEditing = false;
        StateHasChanged();
    }

    private async Task SaveScholarship()
    {
        if (selectedScholarship == null) return;

        isModalLoading = true;
        StateHasChanged();

        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            
            var entity = await context.Scholarships.FindAsync(selectedScholarship.ScholarshipId);
            if (entity != null)
            {
                entity.Title = selectedScholarship.Title;
                entity.Description = selectedScholarship.Description;
                entity.Benefits = selectedScholarship.Benefits;
                entity.Requirements = selectedScholarship.Requirements;
                entity.Eligibility = selectedScholarship.Eligibility;
                entity.MonetaryValue = selectedScholarship.MonetaryValue;
                entity.ApplicationDeadline = selectedScholarship.ApplicationDeadline;
                entity.SlotsAvailable = selectedScholarship.SlotsAvailable;
                entity.MinimumGPA = selectedScholarship.MinimumGPA;
                entity.RequiredCourse = selectedScholarship.RequiredCourse;
                entity.RequiredYearLevel = selectedScholarship.RequiredYearLevel;
                entity.RequiredUniversity = selectedScholarship.RequiredUniversity;
                entity.ExternalApplicationUrl = selectedScholarship.ExternalApplicationUrl;
                entity.IsActive = selectedScholarship.IsActive;
                entity.IsInternal = selectedScholarship.IsInternal;
                entity.UpdatedAt = DateTime.UtcNow;

                await context.SaveChangesAsync();

                toasts.Add($"✅ Successfully updated: {selectedScholarship.Title}");
                await LoadData();
                CloseModal();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving scholarship: {ex.Message}");
            toasts.Add($"❌ Error saving: {ex.Message}");
        }
        finally
        {
            isModalLoading = false;
            StateHasChanged();

            // Auto-dismiss toast
            var _ = Task.Run(async () =>
            {
                await Task.Delay(3000);
                if (toasts.Any())
                {
                    toasts.RemoveAt(0);
                    await InvokeAsync(StateHasChanged);
                }
            });
        }
    }

    private async Task ToggleScholarshipStatus(Scholarship scholarship)
    {
        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            
            var entity = await context.Scholarships.FindAsync(scholarship.ScholarshipId);
            if (entity != null)
            {
                entity.IsActive = !entity.IsActive;
                entity.UpdatedAt = DateTime.UtcNow;
                await context.SaveChangesAsync();

                scholarship.IsActive = entity.IsActive;
                CalculateStatistics();
                StateHasChanged();

                toasts.Add($"✅ {scholarship.Title} is now {(entity.IsActive ? "active" : "inactive")}");
                
                // Auto-dismiss toast
                var _ = Task.Run(async () =>
                {
                    await Task.Delay(3000);
                    if (toasts.Any())
                    {
                        toasts.RemoveAt(0);
                        await InvokeAsync(StateHasChanged);
                    }
                });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling status: {ex.Message}");
            toasts.Add($"❌ Error: {ex.Message}");
        }
    }

    private async Task DeleteScholarship(Scholarship scholarship)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{scholarship.Title}'? This action cannot be undone.");
        if (!confirmed) return;

        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            
            var entity = await context.Scholarships.FindAsync(scholarship.ScholarshipId);
            if (entity != null)
            {
                context.Scholarships.Remove(entity);
                await context.SaveChangesAsync();

                toasts.Add($"✅ Successfully deleted: {scholarship.Title}");
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting scholarship: {ex.Message}");
            toasts.Add($"❌ Error deleting: {ex.Message}");
        }
    }

    private void CreateNewScholarship()
    {
        // Navigate to create page or show create modal
        toasts.Add("ℹ️ Create scholarship functionality coming soon!");
    }

    private async Task ExportFilteredData()
    {
        try
        {
            var csvContent = GenerateCsvContent();
            var fileName = $"scholarships_{DateTime.Now:yyyyMMdd_HHmmss}.csv";
            var base64Content = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(csvContent));
            
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, base64Content);
            toasts.Add($"✅ Exported {filteredScholarships.Count()} scholarships to {fileName}");
            
            // Auto-dismiss toast
            var _ = Task.Run(async () =>
            {
                await Task.Delay(3000);
                if (toasts.Any())
                {
                    toasts.RemoveAt(0);
                    await InvokeAsync(StateHasChanged);
                }
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Export error: {ex.Message}");
            toasts.Add($"❌ Export failed: {ex.Message}");
        }
    }

    private string GenerateCsvContent()
    {
        var csv = new StringBuilder();
        
        csv.AppendLine("Title,Status,Type,Owner,Deadline,Monetary Value,Slots,Min GPA,Required Course,Required Year,Required University,External URL");
        
        foreach (var scholarship in filteredScholarships)
        {
            var owner = scholarship.Institution?.InstitutionName ?? scholarship.Benefactor?.OrganizationName ?? "No owner";
            var row = new[]
            {
                EscapeCsvField(scholarship.Title),
                scholarship.IsActive ? "Active" : "Inactive",
                scholarship.IsInternal ? "Internal" : "External",
                EscapeCsvField(owner),
                scholarship.ApplicationDeadline.ToString("yyyy-MM-dd"),
                scholarship.MonetaryValue?.ToString("N2") ?? "",
                scholarship.SlotsAvailable?.ToString() ?? "",
                scholarship.MinimumGPA?.ToString("F2") ?? "",
                EscapeCsvField(scholarship.RequiredCourse),
                scholarship.RequiredYearLevel?.ToString() ?? "",
                EscapeCsvField(scholarship.RequiredUniversity),
                EscapeCsvField(scholarship.ExternalApplicationUrl)
            };
            
            csv.AppendLine(string.Join(",", row));
        }
        
        return csv.ToString();
    }

    private string EscapeCsvField(string? field)
    {
        if (string.IsNullOrEmpty(field))
            return "";

        var safe = field.Replace("\"", "\"\"");
        if (safe.Contains(",") || safe.Contains("\"") || safe.Contains("\n") || safe.Contains("\r"))
        {
            safe = $"\"{safe}\"";
        }

        return safe;
    }

    private void DismissToast(string message)
    {
        toasts.Remove(message);
        StateHasChanged();
    }

    // Helper methods for styling
    private string GetRowClass(Scholarship scholarship)
    {
        return selectedScholarshipIds.Contains(scholarship.ScholarshipId) ? "table-primary" : "";
    }

    private string GetStatusClass(bool isActive)
    {
        return isActive ? "status-active" : "status-inactive";
    }

    private string GetStatusIcon(bool isActive)
    {
        return isActive ? "✓" : "✗";
    }

    private string GetTypeClass(bool isInternal)
    {
        return isInternal ? "type-internal" : "type-external";
    }

    public void Dispose()
    {
        searchDebounceTimer?.Dispose();
    }
}

<script>
    window.downloadFile = function(filename, content) {
        const byteCharacters = atob(content);
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        
        let mimeType = 'application/octet-stream';
        if (filename.endsWith('.csv')) {
            mimeType = 'text/csv;charset=utf-8;';
        } else if (filename.endsWith('.json')) {
            mimeType = 'application/json';
        }
        
        const blob = new Blob([byteArray], { type: mimeType });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
    };
</script>
