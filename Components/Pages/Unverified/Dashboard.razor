@page "/dashboard/unverified"
@layout Layout.UnverifiedDashLayout

@using c2_eskolar.Models
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore
@using c2_eskolar.Components.Pages

@using c2_eskolar.Data
@inject NavigationManager Navigation
@inject InstitutionProfileService InstitutionProfileService
@inject AuthenticationStateProvider AuthStateProvider
@inject ApplicationDbContext DbContext

<PageTitle>Institution Dashboard</PageTitle>

<div class="dashboard-center-container">
    <!-- Top Bar -->
    <div class="dashboard-topbar">
        <div style="position: relative; flex: 1; max-width: 500px; display: flex; flex-direction: column; align-items: center; gap: 8px;">
            <div class="university-input" style="padding-left: 25px; padding-right: 18px; color: #d84453; background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 8px; height: 40px; display: flex; align-items: center; font-size: 1rem; font-weight: 500; user-select: none; cursor: default;">Account not verified.</div>
        </div>
        <span class="dashboard-date">@DateTime.Now.ToString("dd MMM yyyy, ddd")</span>
    </div>

    <!-- Welcome Banner -->
    <div class="dashboard-banner-centered">
        <div class="banner-text">
            <h2>Welcome, @(profile?.AdminFirstName ?? "Institution")!</h2>
        </div>
        <img src="images/eskolar_books.svg" alt="Books" class="banner-img" />
    </div>
    <div style="width: 100%; display: flex; justify-content: center; align-items: center; margin-top: 40px;">
    <a href="/institution/verification" class="verify-account-btn">Verify Account</a>
    </div>
<style>
    .verify-account-btn {
        font-size: 1.15rem;
        padding: 10px 32px;
        border-radius: 8px;
        background: transparent;
        color: #3c7ee2;
        border: 2px solid #1560d4;
        text-decoration: none;
        box-shadow: none;
        transition: background 0.2s, color 0.2s;
        display: inline-block;
        margin: 0 auto;
        font-weight: 600;
        cursor: pointer;
    }
    .verify-account-btn:hover, .verify-account-btn:focus {
        background: #1560d4;
        color: #fff;
        box-shadow: 0 2px 8px rgba(21,96,212,0.10);
        text-decoration: none;
    }
</style>
</div>

@code {
    private int activeTab = -1;
    private bool showScholarshipList = false;
    private int scholarshipTab = 0;
    private c2_eskolar.Models.InstitutionProfile? profile;
    private string searchQuery = "";
    private List<Scholarship> scholarships = new();
    private List<Scholarship> filteredScholarships = new();
    
    // Filter and sort properties
    private string statusFilter = "";
    private string typeFilter = "";
    private string sortOption = "date-desc";
    
    // Statistics properties
    private int totalScholarships = 0;
    private int totalApplications = 0;
    private int pendingReviews = 0;
    private int activeScholarships = 0;

    protected override async Task OnInitializedAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("tab", out var tabValue) && int.TryParse(tabValue, out var tabIndex))
        {
            activeTab = tabIndex;
        }

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        if (userId != null)
        {
            profile = await InstitutionProfileService.GetProfileByUserIdAsync(userId);
        }
        
        await LoadDashboardData();
        StateHasChanged();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            // Load scholarships from the database
            scholarships = await DbContext.Scholarships
                .Include(s => s.Institution)
                .Include(s => s.Benefactor)
                .Include(s => s.Applications)
                .OrderByDescending(s => s.CreatedAt)
                .ToListAsync();

            filteredScholarships = scholarships;

            // Calculate statistics
            // Only count institutional scholarships created by this institution (when signed in)
            if (profile != null)
            {
                totalScholarships = scholarships.Count(s => s.InstitutionProfileId == profile.InstitutionProfileId && s.IsInternal == true);
            }
            else
            {
                // Fallback: show zero when no institution profile is available
                totalScholarships = 0;
            }
            activeScholarships = scholarships.Count(s => s.IsActive && s.InstitutionProfileId == profile?.InstitutionProfileId);
            if (profile != null)
            {
                var myInstitutionScholarships = scholarships.Where(s => s.InstitutionProfileId == profile.InstitutionProfileId && s.IsInternal == true).ToList();
                totalApplications = myInstitutionScholarships.SelectMany(s => s.Applications).Count();
                pendingReviews = myInstitutionScholarships.SelectMany(s => s.Applications).Count(); // Replace with real pending logic if available
            }
            else
            {
                totalApplications = scholarships.SelectMany(s => s.Applications).Count();
                pendingReviews = scholarships.SelectMany(s => s.Applications).Count(); // Assuming all are pending for now
            }
        }
        catch (Exception ex)
        {
            // Handle error - you might want to show a toast or error message
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
        FilterScholarships();
    }

    private void FilterScholarships()
    {
        var query = scholarships.AsQueryable();

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            query = query.Where(s => 
                s.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                (s.Description != null && s.Description.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) ||
                (s.Institution != null && s.Institution.InstitutionName != null && s.Institution.InstitutionName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) ||
                (s.Benefactor != null && s.Benefactor.OrganizationName != null && s.Benefactor.OrganizationName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            );
        }

        // Apply status filter
        if (!string.IsNullOrWhiteSpace(statusFilter))
        {
            if (statusFilter == "active")
                query = query.Where(s => s.IsActive);
            else if (statusFilter == "inactive")
                query = query.Where(s => !s.IsActive);
        }

        // Apply type filter
        if (!string.IsNullOrWhiteSpace(typeFilter))
        {
            if (typeFilter == "internal")
                query = query.Where(s => s.IsInternal);
            else if (typeFilter == "external")
                query = query.Where(s => !s.IsInternal);
        }

        // Apply sorting
        query = sortOption switch
        {
            "date-asc" => query.OrderBy(s => s.CreatedAt),
            "date-desc" => query.OrderByDescending(s => s.CreatedAt),
            "title-asc" => query.OrderBy(s => s.Title),
            "title-desc" => query.OrderByDescending(s => s.Title),
            "applications-asc" => query.OrderBy(s => s.Applications.Count),
            "applications-desc" => query.OrderByDescending(s => s.Applications.Count),
            _ => query.OrderByDescending(s => s.CreatedAt)
        };

        filteredScholarships = query.ToList();
        StateHasChanged();
    }

    private void OnStatusFilterChanged(ChangeEventArgs e)
    {
        statusFilter = e.Value?.ToString() ?? "";
        FilterScholarships();
    }

    private void OnTypeFilterChanged(ChangeEventArgs e)
    {
        typeFilter = e.Value?.ToString() ?? "";
        FilterScholarships();
    }

    private void OnSortChanged(ChangeEventArgs e)
    {
        sortOption = e.Value?.ToString() ?? "date-desc";
        FilterScholarships();
    }

    private void ClearAllFilters()
    {
        searchQuery = "";
        statusFilter = "";
        typeFilter = "";
        sortOption = "date-desc";
        FilterScholarships();
    }

    private void ClearSearch()
    {
        searchQuery = "";
        FilterScholarships();
    }

    private int GetMonthlyIncrease(string metric)
    {
        // Mock data for monthly increase percentages
        return metric switch
        {
            "scholarships" => 12,
            "applications" => 18,
            "pending" => -5,
            "active" => 8,
            _ => 0
        };
    }

    private List<Scholarship> GetFilteredScholarshipsForTab()
    {
        var baseScholarships = string.IsNullOrWhiteSpace(searchQuery) ? scholarships : filteredScholarships;
        
        return scholarshipTab switch
        {
            0 => baseScholarships.Where(s => s.IsInternal && profile != null && s.InstitutionProfileId == profile.InstitutionProfileId).ToList(),
            1 => baseScholarships.Where(s => !s.IsInternal).ToList(),
            2 => baseScholarships.ToList(),
            3 => baseScholarships.Where(s => s.IsActive).ToList(),
            _ => baseScholarships.ToList()
        };
    }

    private void SetTab(int tab)
    {
        activeTab = tab;
        showScholarshipList = false;
        StateHasChanged();
    }

    private void ShowScholarshipList(int tab)
    {
        showScholarshipList = true;
        scholarshipTab = tab;
        StateHasChanged();
    }

    private void SetScholarshipTab(int tab)
    {
        scholarshipTab = tab;
        StateHasChanged();
    }

    private void BackToDashboard()
    {
        showScholarshipList = false;
        activeTab = -1;
        StateHasChanged();
    }

    private void ClearRecentlyViewed()
    {
        // Add logic to clear recently viewed scholarships if needed
        StateHasChanged();
    }

    private void CloseProfilePopout()
    {
        // Add logic to close profile popout if needed
        StateHasChanged();
    }

    private void ViewScholarship(int scholarshipId)
    {
        Navigation.NavigateTo($"/dashboard/institution/scholarships-info/{scholarshipId}");
    }

    private void AddScholarship()
    {
        Navigation.NavigateTo("/dashboard/institution/scholarships/post");
    }

    private async Task DeleteScholarship(int scholarshipId)
    {
        try
        {
            var scholarship = await DbContext.Scholarships.FindAsync(scholarshipId);
            if (scholarship != null)
            {
                DbContext.Scholarships.Remove(scholarship);
                await DbContext.SaveChangesAsync();
                await LoadDashboardData(); // Refresh the data
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            // Handle error - you might want to show a toast or error message
            Console.WriteLine($"Error deleting scholarship: {ex.Message}");
        }
    }
}