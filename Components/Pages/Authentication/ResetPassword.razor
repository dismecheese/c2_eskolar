@page "/reset-password"
@using System.ComponentModel.DataAnnotations
@using c2_eskolar.Services
@inject IPasswordResetService PasswordResetService
@inject NavigationManager Navigation

<PageTitle>Reset Password</PageTitle>

<div class="forgot-container">
    <div class="card shadow forgot-card">
        <div class="card-body">
            <!-- Page Heading -->
            <h3 class="card-title text-center mb-3 text-primary">Reset Password</h3>
            
            @if (!string.IsNullOrEmpty(Token) && !isTokenValid.HasValue)
            {
                <!-- Loading state while validating token -->
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Validating...</span>
                    </div>
                    <p class="mt-2">Validating reset link...</p>
                </div>
            }
            else if (isTokenValid == false)
            {
                <!-- Invalid or expired token -->
                <div class="alert alert-danger text-center" role="alert">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    <strong>Invalid or Expired Link</strong>
                    <p class="mb-0 mt-2">This password reset link is invalid or has expired. Please request a new password reset.</p>
                </div>
                <div class="text-center mt-3">
                    <a href="/forgot-password" class="btn btn-primary">Request New Reset Link</a>
                </div>
            }
            else if (isTokenValid == true && !isPasswordReset)
            {
                <!-- Valid token - show reset form -->
                <p class="text-center text-muted mb-4">
                    Enter your new password below.
                </p>

                <EditForm Model="@resetModel" OnValidSubmit="HandlePasswordReset" OnFieldChanged="HandleFieldChanged">

                    <DataAnnotationsValidator />

                    <!-- New Password -->
                    <div class="mb-3">
                        <label for="password" class="form-label fw-semibold">New Password</label>
                        <input id="password" 
                            type="password"
                            class="form-control @(IsPasswordAllValid ? "pw-valid" : (resetModel.Password?.Length > 0 ? "pw-invalid" : ""))"
                            @bind="resetModel.Password"
                            @oninput="OnPasswordInput" />
                        <div class="password-hint">
                            Password must be at least 6 characters, contain at least one digit and one uppercase letter.
                        </div>
                        <ValidationMessage For="@(() => resetModel.Password)" class="form-text text-danger small" />
                    </div>

                    <!-- Confirm Password -->
                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label fw-semibold">Confirm Password</label>
                        <input id="confirmPassword" 
                            type="password"
                            class="form-control @(IsConfirmPasswordValid ? "pw-valid" : (resetModel.ConfirmPassword?.Length > 0 ? "pw-invalid" : ""))"
                            @bind="resetModel.ConfirmPassword"
                            @oninput="OnConfirmPasswordInput" />
                        <ValidationMessage For="@(() => resetModel.ConfirmPassword)" class="form-text text-danger small" />
                        @if (!string.IsNullOrEmpty(resetModel.ConfirmPassword) && !IsConfirmPasswordValid)
                        {
                            <div class="form-text text-danger small">Passwords do not match.</div>
                        }
                    </div>

                    <!-- Submit button -->
                    <button type="submit" class="btn btn-primary w-100" disabled="@(isLoading || !IsPasswordAllValid || !IsConfirmPasswordValid)">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            <span>Resetting Password...</span>
                        }
                        else
                        {
                            <span>Reset Password</span>
                        }
                    </button>
                </EditForm>
            }
            else if (isPasswordReset)
            {
                <!-- Success message -->
                <div class="alert alert-success text-center" role="alert">
                    <i class="bi bi-check-circle-fill me-2"></i>
                    <strong>Password Reset Successful!</strong>
                    <p class="mb-0 mt-2">Your password has been reset successfully. You can now sign in with your new password.</p>
                </div>
                <div class="text-center mt-3">
                    <a href="/login" class="btn btn-primary">Sign In</a>
                </div>
            }

            <!-- Error message -->
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3 text-center" role="alert">
                    @errorMessage
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Token { get; set; }

    private ResetPasswordModel resetModel = new();
    private bool? isTokenValid;
    private bool isPasswordReset = false;
    private bool isLoading = false;
    private string? errorMessage;
    
    // Live password requirement flags
    private bool IsPasswordLengthValid => resetModel.Password?.Length >= 6;
    private bool IsPasswordDigitValid => !string.IsNullOrEmpty(resetModel.Password) && resetModel.Password.Any(char.IsDigit);
    private bool IsPasswordUpperValid => !string.IsNullOrEmpty(resetModel.Password) && resetModel.Password.Any(char.IsUpper);
    private bool IsPasswordAllValid => IsPasswordLengthValid && IsPasswordDigitValid && IsPasswordUpperValid;
    
    // Confirm password validation
    private bool IsConfirmPasswordValid => !string.IsNullOrEmpty(resetModel.ConfirmPassword) && resetModel.ConfirmPassword == resetModel.Password;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Token))
        {
            // No token provided, redirect to forgot password
            Navigation.NavigateTo("/forgot-password");
            return;
        }

        // Validate the token
        isTokenValid = await PasswordResetService.ValidateResetTokenAsync(Token);
    }

    private void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        StateHasChanged();
    }
    
    // Called on every password input
    private void OnPasswordInput(ChangeEventArgs e)
    {
        resetModel.Password = e.Value?.ToString() ?? string.Empty;
        // Trigger UI update for live feedback
        StateHasChanged();
    }

    // Called on every confirm password input
    private void OnConfirmPasswordInput(ChangeEventArgs e)
    {
        resetModel.ConfirmPassword = e.Value?.ToString() ?? string.Empty;
        // Trigger UI update for live feedback
        StateHasChanged();
    }

    private async Task HandlePasswordReset()
    {
        if (isLoading) return;

        isLoading = true;
        errorMessage = null;

        try
        {
            var success = await PasswordResetService.ResetPasswordAsync(Token!, resetModel.Password);
            
            if (success)
            {
                isPasswordReset = true;
            }
            else
            {
                errorMessage = "Failed to reset password. Please try again or request a new reset link.";
            }
        }
        catch (Exception)
        {
            errorMessage = "An error occurred while resetting your password. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class ResetPasswordModel
    {
        [Required(ErrorMessage = "Password is required.")]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d@$!%*?&]{6,100}$", 
            ErrorMessage = "Password must be at least 6 characters, contain at least one digit and one uppercase letter.")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please confirm your password.")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}

<style>
    .forgot-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #f8f9fa;
        padding: 20px;
    }

    .forgot-card {
        width: 100%;
        max-width: 400px;
        border: none;
        border-radius: 15px;
        margin-bottom: 40px;
    }

    .card-body {
        padding: 2.5rem;
    }

    .card-title {
        font-size: 2rem;
        font-weight: 700;
        letter-spacing: 0.5px;
        margin-bottom: 1.5rem;
    }

    .form-label {
        font-size: 1.1rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
    }

    .form-control {
        border-radius: 8px;
        border: 1px solid #e0e6ed;
        padding: 0.85rem 1rem;
        font-size: 1.08rem;
    }

    .form-control:focus {
        border-color: #007bff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.18);
    }

    .btn {
        border-radius: 8px;
        padding: 0.85rem 1.5rem;
        font-weight: 600;
        font-size: 1.08rem;
        letter-spacing: 0.2px;
    }

    .alert {
        border-radius: 8px;
        border: none;
        font-size: 1.02rem;
    }

    .form-text.text-danger.small {
        font-size: 0.98rem;
        margin-top: 0.3rem;
    }

    .text-muted {
        font-size: 1.02rem;
    }

    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
    }

    /* Password validation states */
    .form-control.pw-valid {
        border-color: #26b050 !important;
        box-shadow: 0 0 0 0.2rem rgba(38, 176, 80, 0.18) !important;
    }

    .form-control.pw-invalid {
        border-color: #e53935 !important;
        box-shadow: 0 0 0 0.2rem rgba(229, 57, 53, 0.18) !important;
    }

    .form-control.pw-valid:focus,
    .form-control.pw-invalid:focus {
        outline: none;
    }

    /* Password hint text */
    .password-hint {
        font-size: 0.875rem;
        color: #6c757d;
        margin-top: 0.25rem;
        margin-bottom: 0.25rem;
    }
</style>
