@page "/forgot-password"
@using System.ComponentModel.DataAnnotations
@using c2_eskolar.Services
@inject IPasswordResetService PasswordResetService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Forgot Password</PageTitle>

<div class="forgot-container">
    <div class="card shadow forgot-card">
        <div class="card-body">
        <!-- Page Heading -->
            <h3 class="card-title text-center mb-3 text-primary">Forgot Password</h3>
            
            <!-- Instructional text -->
            <p class="text-center text-muted mb-4">
                Enter your email address and we'll send you a link to reset your password.
            </p>

            <!-- Form for email input -->
            <EditForm Model="@forgotModel" OnValidSubmit="HandleForgotPassword">
                <!-- Enables validation attributes -->
                <DataAnnotationsValidator />
                <!-- Displays all validation errors -->
                <ValidationSummary />

                <!-- Email input field -->
                <div class="mb-3">
                    <label for="email" class="form-label fw-semibold">Email address</label>
                    <InputText id="email" @bind-Value="forgotModel.Email" type="email" class="form-control" />
                    <ValidationMessage For="@(() => forgotModel.Email)" />
                </div>

                <!-- Submit button -->
                <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        <span>Sending Reset Link...</span>
                    }
                    else
                    {
                        <span>Send Reset Link</span>
                    }
                </button>
            </EditForm>

            <!-- Success message shown after submission -->
            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success mt-3 text-center" role="alert">
                    <i class="bi bi-check-circle-fill me-2"></i>
                    @successMessage
                </div>
            }

            <!-- Error message -->
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3 text-center" role="alert">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    @errorMessage
                </div>
            }

            <!-- Back to login link -->
            <div class="text-center mt-4">
                <a href="/login" class="text-muted">
                    <i class="bi bi-arrow-left me-1"></i>
                    Back to Sign In
                </a>
            </div>
        </div>
    </div>
</div>

@code {
    // Form model bound to EditForm
    private ForgotModel forgotModel = new();
    
    // Messages to display
    private string? successMessage;
    private string? errorMessage;
    private bool isLoading = false;

    // Handle the "Forgot Password" form submission
    private async Task HandleForgotPassword()
    {
        if (isLoading) return;

        isLoading = true;
        successMessage = null;
        errorMessage = null;

        try
        {
            // Get base URL for reset link
            var baseUrl = Navigation.BaseUri.TrimEnd('/');
            
            // Get client information (optional)
            var userAgent = await JSRuntime.InvokeAsync<string>("eval", "navigator.userAgent");
            
            // Send password reset email
            var success = await PasswordResetService.SendPasswordResetAsync(
                forgotModel.Email, 
                baseUrl, 
                null, // IP address would need to be obtained from HTTP context
                userAgent
            );

            if (success)
            {
                successMessage = "If an account with that email exists, a reset link has been sent. Please check your email and follow the instructions to reset your password.";
                forgotModel = new(); // Clear the form
            }
            else
            {
                errorMessage = "There was an error sending the reset email. Please try again later.";
            }
        }
        catch (Exception)
        {
            errorMessage = "An unexpected error occurred. Please try again later.";
        }
        finally
        {
            isLoading = false;
        }
    }

    // Model used for validation
    public class ForgotModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; } = null!;
    }
}

<style>
    .forgot-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
    }

    .forgot-card {
        width: 100%;
        max-width: 450px;
        border: none;
        border-radius: 15px;
    }

    .card-body {
        padding: 2.5rem;
    }

    .form-control {
        border-radius: 8px;
        border: 1px solid #e0e6ed;
        padding: 0.75rem 1rem;
        font-size: 1rem;
    }

    .form-control:focus {
        border-color: #007bff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    .btn {
        border-radius: 8px;
        padding: 0.75rem 1.5rem;
        font-weight: 600;
        font-size: 1rem;
    }

    .alert {
        border-radius: 8px;
        border: none;
    }

    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
    }

    .text-muted {
        text-decoration: none;
        transition: color 0.3s ease;
    }

    .text-muted:hover {
        color: #007bff !important;
    }
</style>

