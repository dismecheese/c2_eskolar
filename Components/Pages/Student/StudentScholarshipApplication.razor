@page "/dashboard/student/apply/{ScholarshipId:int}"
@attribute [Authorize(Roles = "Student,SuperAdmin")]
@layout Layout.StudentDashLayout

@using c2_eskolar.Data
@using c2_eskolar.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using Blazored.LocalStorage
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthProvider
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IWebHostEnvironment Env
@inject c2_eskolar.Services.BlobStorageService BlobStorageService
@inject Microsoft.Extensions.Logging.ILogger<StudentScholarshipApplication> Logger
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime
@inject c2_eskolar.Services.OpenAIService OpenAIService

<PageTitle>Scholarship Application</PageTitle>

<div class="container py-4" style="padding-top: 3rem !important; margin-top: 1rem;">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            @if (!isLoading && scholarship != null)
            {
                var progress = CalculateFormProgress();
                <div class="mb-4">
                    <h4 class="fw-bold mb-1">@scholarship.Title</h4>
                    <p class="text-muted mb-2">@scholarship.Institution?.AdminFullName</p>
                    <span class="badge bg-info text-dark mb-2">Deadline: @scholarship.ApplicationDeadline.ToString("MMMM dd, yyyy")</span>
                    <div class="mb-2"><strong>Description:</strong> @scholarship.Description</div>
                </div>
            }
            <div class="card shadow-lg border-0 mb-4">
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center align-items-center" style="min-height: 200px;">
                            <div class="spinner-border text-primary" role="status"></div>
                            <span class="ms-3">Loading...</span>
                        </div>
                    }
                    else if (scholarship == null)
                    {
                        <div class="alert alert-danger">Scholarship not found.</div>
                    }
                    else
                    {
                        <EditForm Model="application" OnValidSubmit="HandleSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            
                            <!-- Form fields section -->
                            <div class="mt-4">
                                <!-- Application Type Selection -->
                                <div class="mb-4">
                                    <div class="form-check form-switch mb-3">
                                        <input class="form-check-input" type="checkbox" id="isExternalApplication" @bind="application.IsExternalApplication" @bind:after="OnFieldChanged" aria-labelledby="isExternalApplicationLabel">
                                        <label class="form-check-label fw-bold" id="isExternalApplicationLabel" for="isExternalApplication">
                                            External Application (Apply through institution's own system)
                                        </label>
                                    </div>
                                </div>

                                @if (application.IsExternalApplication)
                                {
                                    <!-- External Application Fields -->
                                    <div class="mb-4">
                                        <label for="externalUrl" class="form-label fw-bold">External Application URL <span class="text-danger">*</span></label>
                         <input type="url" class="form-control" id="externalUrl" @bind="application.ExternalApplicationUrl" @bind:after="OnFieldChanged" 
                             placeholder="https://institution.edu/apply/scholarship-123" required aria-describedby="externalUrlHelp" />
                                        <div class="form-text">Please provide the direct link to the external application form</div>
                                        <div id="externalUrlHelp" class="form-text">Please provide the direct link to the external application form</div>
                                        <ValidationMessage For="@(() => application.ExternalApplicationUrl)" />
                                    </div>

                                    <div class="mb-4">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="hasAppliedExternally" @bind="application.HasAppliedExternally" @bind:after="OnFieldChanged" required>
                                            <label class="form-check-label" for="hasAppliedExternally">
                                                <span class="text-danger">*</span> I confirm that I have already submitted my application through the external system
                                            </label>
                                        </div>
                                        <ValidationMessage For="@(() => application.HasAppliedExternally)" />
                                    </div>
                                }
                                else
                                {
                                    <!-- Internal Application Fields -->
                                    <div class="mb-4">
                                        <label for="personalStatement" class="form-label fw-bold">Personal Statement <span class="text-danger">*</span></label>
                                        <textarea class="form-control" id="personalStatement" rows="6" @bind="application.PersonalStatement" @bind:after="OnFieldChanged" 
                                                  placeholder="Tell us about yourself, your academic goals, and why you deserve this scholarship..." required aria-describedby="personalStatementHelp"></textarea>
                                        <div class="form-text">Minimum 100 words recommended</div>
                                        <div id="personalStatementHelp" class="form-text">Minimum 100 words recommended</div>
                                        <ValidationMessage For="@(() => application.PersonalStatement)" />
                                    </div>
                                }

                                <!-- GWA Field (Always Required) -->
                                <div class="mb-4">
                                    <label for="gwa" class="form-label fw-bold">General Weighted Average (GWA) <span class="text-danger">*</span></label>
                     <input type="number" step="0.01" min="1.00" max="4.00" class="form-control" id="gwa" @bind="application.GWA" @bind:after="OnFieldChanged" 
                         placeholder="1.00 - 4.00" required aria-describedby="gwaHelp" />
                                    <div class="form-text">Enter your current GWA (1.00 = highest, 4.00 = lowest)</div>
                                    <div id="gwaHelp" class="form-text">Enter your current GWA (1.00 = highest, 4.00 = lowest)</div>
                                    <ValidationMessage For="@(() => application.GWA)" />
                                </div>

                                @if (!application.IsExternalApplication)
                                {
                                    <!-- Optional Grade Details for Internal Applications -->
                                    <div class="mb-4">
                                        <label for="firstSemGrades" class="form-label fw-bold">First Semester Grades (Optional)</label>
                                        <textarea class="form-control" id="firstSemGrades" rows="4" @bind="application.FirstSemesterGrades" @bind:after="OnFieldChanged" 
                                                  placeholder="List your first semester subjects and grades..." aria-describedby="firstSemGradesHelp"></textarea>
                                        <ValidationMessage For="@(() => application.FirstSemesterGrades)" />
                                    </div>

                                    <div class="mb-4">
                                        <label for="secondSemGrades" class="form-label fw-bold">Second Semester Grades (Optional)</label>
                                        <textarea class="form-control" id="secondSemGrades" rows="4" @bind="application.SecondSemesterGrades" @bind:after="OnFieldChanged" 
                                                  placeholder="List your second semester subjects and grades..." aria-describedby="secondSemGradesHelp"></textarea>
                                        <ValidationMessage For="@(() => application.SecondSemesterGrades)" />
                                    </div>

                                    <!-- File Upload Section -->
                                    <div class="mb-4">
                                        <label class="form-label fw-bold">Supporting Documents (Optional)</label>
                                        <div class="border rounded p-3" style="border-style: dashed !important;">
                                            <InputFile OnChange="OnFileSelected" class="form-control" multiple accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" aria-describedby="documentsHelp" />
                                            <div id="documentsHelp" class="form-text">
                                                Upload transcripts, certificates, or other supporting documents. 
                                                Supported formats: PDF, DOC, DOCX, JPG, PNG. Max file size: 10MB each, total: 50MB.
                                            </div>
                                        </div>
                                        @if (selectedFiles.Any())
                                        {
                                            <div class="mt-3">
                                                <h6>Selected Files:</h6>
                                                @foreach (var file in selectedFiles)
                                                {
                                                    <div class="d-flex align-items-center justify-content-between border rounded p-2 mb-2">
                                                        <div>
                                                            <i class="fas fa-file me-2"></i>
                                                            <span>@file.Name</span>
                                                            <small class="text-muted ms-2">(@(file.Size / 1024) KB)</small>
                                                            @if (processingFiles.Contains(file.Name))
                                                            {
                                                                <span class="badge bg-warning ms-2">Processing...</span>
                                                            }
                                                        </div>
                                                        <button type="button" class="btn btn-sm btn-outline-danger" @onclick="() => RemoveFile(file)">
                                                            <i class="fas fa-times"></i>
                                                        </button>
                                                    </div>
                                                    @if (uploadProgress.ContainsKey(file.Name) && uploadProgress[file.Name] > 0)
                                                    {
                                                        <div class="progress mb-2" style="height: 4px;">
                                                            <div class="progress-bar" role="progressbar" style="width: @(uploadProgress[file.Name])%"></div>
                                                        </div>
                                                    }
                                                }
                                            </div>
                                        }
                                    </div>
                                    <ValidationMessage For="@(() => application.UploadedDocuments)" />

                                    <!-- Extracted Grades & Confidence Feedback -->
                                    @if (!string.IsNullOrWhiteSpace(application.FirstSemesterGrades) || !string.IsNullOrWhiteSpace(application.SecondSemesterGrades) || application.GWA != null)
                                    {
                                        <div class="alert alert-info mt-3">
                                            <i class="fas fa-robot me-2"></i>
                                            <strong>AI Extracted Grades:</strong>
                                            
                                            @if (application.GWA != null)
                                            {
                                                <div class="text-center mb-3 p-3 bg-light rounded">
                                                    <div class="fw-bold text-muted small">GENERAL WEIGHTED AVERAGE</div>
                                                    <div class="display-6 fw-bold text-primary">@application.GWA.Value.ToString("0.00")</div>
                                                </div>
                                            }
                                            
                                            <ul class="mb-1">
                                                @if (!string.IsNullOrWhiteSpace(application.FirstSemesterGrades))
                                                {
                                                    <li><strong>First Semester Subjects:</strong>
                                                        <ul>
                                                            @foreach (var line in CleanSemesterGradesText(application.FirstSemesterGrades, "First Semester").Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries))
                                                            {
                                                                <li>@line</li>
                                                            }
                                                        </ul>
                                                    </li>
                                                }
                                                @if (!string.IsNullOrWhiteSpace(application.SecondSemesterGrades))
                                                {
                                                    <li><strong>Second Semester Subjects:</strong>
                                                        <ul>
                                                            @foreach (var line in CleanSemesterGradesText(application.SecondSemesterGrades, "Second Semester").Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries))
                                                            {
                                                                <li>@line</li>
                                                            }
                                                        </ul>
                                                    </li>
                                                }
                                            </ul>
                                            <span class="text-muted small">If the extracted grades are incorrect or incomplete, please review and manually correct them above before submitting.</span>
                                        </div>
                                    }
                                }

                                <div class="d-flex align-items-center mt-4">
                                    <button type="submit" class="btn btn-success px-4" disabled="@(!IsFormValid() || isSubmitting)">
                                        @if (isSubmitting)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                            @:Submitting...
                                        }
                                        else
                                        {
                                            @:Submit Application
                                        }
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary ms-3" @onclick="CancelAndClearAsync">Cancel</button>
                                </div>

                                @if (!string.IsNullOrEmpty(successMessage))
                                {
                                    <div class="alert alert-success mt-4" role="alert" aria-live="polite">
                                        <i class="fas fa-check-circle me-2" aria-hidden="true"></i>
                                        <span>@successMessage</span>
                                        <div class="mt-2">
                                            @if (application.ScholarshipApplicationId != Guid.Empty)
                                            {
                                                <a href="/dashboard/student/applications" class="btn btn-sm btn-outline-secondary ms-2">
                                                    View My Applications
                                                </a>
                                            }
                                        </div>
                                        @if (!string.IsNullOrWhiteSpace(application.FirstSemesterGrades) || !string.IsNullOrWhiteSpace(application.SecondSemesterGrades) || application.GWA != null)
                                        {
                                            <div class="mt-2">
                                                <span class="text-muted small"><i class="fas fa-robot me-1" aria-hidden="true"></i>AI grade extraction was used. Please verify your grades above.</span>
                                            </div>
                                        }
                                    </div>
                                }

                                @if (showSubmittedModal)
                                {
                                    <div style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.5); z-index: 1050; display: flex; align-items: center; justify-content: center;">
                                        <div class="modal-dialog modal-dialog-centered" style="z-index: 1060; max-width: 400px; width: 100%;">
                                            <div class="modal-content" style="background: #fff; border-radius: 12px; box-shadow: 0 8px 32px rgba(0,0,0,0.25); overflow: hidden;">
                                                <div class="modal-header bg-success text-white border-0" style="padding: 2rem 2rem 1rem;">
                                                    <div class="text-center w-100">
                                                        <i class="fas fa-check-circle fa-3x mb-3"></i>
                                                        <h4 class="mb-0">Application Submitted!</h4>
                                                    </div>
                                                </div>
                                                <div class="modal-body text-center" style="padding: 1rem 2rem 2rem;">
                                                    <p class="mb-3">Your scholarship application has been successfully submitted.</p>
                                                    <p class="text-muted small">You will receive updates via email regarding your application status.</p>
                                                    <button type="button" class="btn btn-success px-4 mt-2" @onclick="CloseSubmittedModal">
                                                        Continue to Dashboard
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(errorMessage))
                                {
                                    <div class="alert alert-danger mt-4" role="alert" aria-live="assertive">
                                        <i class="fas fa-exclamation-triangle me-2" aria-hidden="true"></i>
                                        <span>@errorMessage</span>
                                    </div>
                                }
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // --- Component parameters ---
    [Parameter] public int ScholarshipId { get; set; }

    // --- Private fields ---
    private Scholarship? scholarship;
    private ScholarshipApplication application = new();
    private bool isLoading = true;
    private bool isSubmitting = false;
    private string? errorMessage;
    private string? successMessage;
    private bool showSubmittedModal = false;
    private List<IBrowserFile> selectedFiles = new();
    private List<string> uploadedFileNames = new();
    private Dictionary<string, int> uploadProgress = new();
    private HashSet<string> processingFiles = new();
    private CancellationTokenSource? debounceCts;

    // --- File upload constraints ---
    private readonly string[] allowedExtensions = { ".pdf", ".doc", ".docx", ".jpg", ".jpeg", ".png" };
    private readonly long perFileMaxBytes = 10 * 1024 * 1024; // 10MB per file
    private readonly long totalMaxBytes = 50 * 1024 * 1024; // 50MB total
    private readonly string LocalStorageKey = "scholarship_application_draft_";

    // Removes a file from the selected files list and updates state.
    private void RemoveFile(IBrowserFile fileToRemove)
    {
        selectedFiles.Remove(fileToRemove);
        uploadedFileNames.Remove(fileToRemove.Name);
        uploadProgress.Remove(fileToRemove.Name);
        processingFiles.Remove(fileToRemove.Name);
        _ = DebouncedSaveFormStateAsync();
    }

    // Handles file selection, validates files, and triggers OCR for new files.
        private async Task OnFileSelected(InputFileChangeEventArgs e)
        {
            errorMessage = null;
            var validFiles = new List<IBrowserFile>();
            foreach (var file in e.GetMultipleFiles())
            {
                var ext = Path.GetExtension(file.Name).ToLowerInvariant();
                if (!allowedExtensions.Contains(ext))
                    continue;
                if (file.Size > perFileMaxBytes)
                    continue;
                validFiles.Add(file);
            }
            selectedFiles.AddRange(validFiles);
            uploadedFileNames.AddRange(validFiles.Select(f => f.Name));
            errorMessage = null;

            // Upload files to temp blob storage for Document Intelligence
            foreach (var file in validFiles)
            {
                var tempBlobName = $"temp/{Guid.NewGuid()}_{file.Name}";
                try
                {
                    await using var stream = file.OpenReadStream(perFileMaxBytes);
                    await BlobStorageService.UploadDocumentAsync(stream, tempBlobName, file.ContentType);
                    tempBlobFileNames.Add(tempBlobName);
                }
                catch (Exception ex)
                {
                    Logger?.LogError(ex, "Failed to upload temp file {FileName}", file.Name);
                }
            }

            // Persist a minimal safe state
            await DebouncedSaveFormStateAsync();

            // Automatically trigger OCR for the newly uploaded files
            if (validFiles.Any())
            {
                _ = Task.Run(async () => await TriggerOcrForFilesAsync(validFiles));
            }
        }

    // Persists non-PII form state to local storage.
    private async Task SaveFormStateAsync()
    {
        // Persist only safe, non-PII fields
        var state = new PersistedApplicationState
        {
            PersonalStatement = application?.PersonalStatement,
            FirstSemesterGrades = application?.FirstSemesterGrades,
            SecondSemesterGrades = application?.SecondSemesterGrades,
            GWA = application?.GWA,
            IsExternalApplication = application?.IsExternalApplication,
            ExternalApplicationUrl = application?.ExternalApplicationUrl,
            HasAppliedExternally = application?.HasAppliedExternally,
            UploadedFileNames = uploadedFileNames
        };
        try
        {
            await LocalStorage.SetItemAsync(LocalStorageKey + ScholarshipId, state);
            Logger?.LogDebug("Saved application draft for scholarship {ScholarshipId}", ScholarshipId);
        }
        catch (Exception ex)
        {
            // Do not surface LocalStorage errors to users; log and continue
            Logger?.LogWarning(ex, "Failed to persist application draft for scholarship {ScholarshipId}", ScholarshipId);
        }
    }

    // Debounces form state saving to avoid excessive writes.
    private async Task DebouncedSaveFormStateAsync(int delayMs = 800)
    {
        try
        {
            debounceCts?.Cancel();
        }
        catch { }
        debounceCts = new CancellationTokenSource();
        var token = debounceCts.Token;
        try
        {
            await Task.Delay(delayMs, token);
            if (!token.IsCancellationRequested)
            {
                await InvokeAsync(SaveFormStateAsync);
            }
        }
        catch (TaskCanceledException) { }
    }

    // Restores non-PII form state from local storage.
    private async Task RestoreFormStateAsync()
    {
        try
        {
            var state = await LocalStorage.GetItemAsync<PersistedApplicationState>(LocalStorageKey + ScholarshipId);
            if (state != null)
            {
                // Restore only non-PII fields
                application.PersonalStatement = state.PersonalStatement ?? application.PersonalStatement;
                application.FirstSemesterGrades = state.FirstSemesterGrades ?? application.FirstSemesterGrades;
                application.SecondSemesterGrades = state.SecondSemesterGrades ?? application.SecondSemesterGrades;
                application.GWA = state.GWA ?? application.GWA;
                application.IsExternalApplication = state.IsExternalApplication ?? application.IsExternalApplication;
                application.ExternalApplicationUrl = state.ExternalApplicationUrl ?? application.ExternalApplicationUrl;
                application.HasAppliedExternally = state.HasAppliedExternally ?? application.HasAppliedExternally;
                uploadedFileNames = state.UploadedFileNames ?? new List<string>();
            }
        }
        catch (Exception ex)
        {
            Logger?.LogWarning(ex, "Failed to restore application draft for scholarship {ScholarshipId}", ScholarshipId);
        }
    }

    // Clears persisted form state from local storage.
    private async Task ClearFormStateAsync()
    {
        await LocalStorage.RemoveItemAsync(LocalStorageKey + ScholarshipId);
    }

    // Handles field changes and triggers debounced state save and UI update.
    private async Task OnFieldChanged()
    {
        await DebouncedSaveFormStateAsync();
        await InvokeAsync(StateHasChanged); // Update progress bar
    }

    // Initializes the component, loads scholarship and student profile, and restores form state.
    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(200);

        // ✅ Include Institution when loading scholarship
        scholarship = await DbContext.Scholarships
            .Include(s => s.Institution)
            .FirstOrDefaultAsync(s => s.ScholarshipId == ScholarshipId);

        if (scholarship == null)
        {
            isLoading = false;
            return;
        }

        // Get the current user's ID from claims
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (string.IsNullOrEmpty(userId))
        {
            Navigation.NavigateTo("/login");
            return;
        }

        // Find the student's profile
        var studentProfile = await DbContext.StudentProfiles
            .FirstOrDefaultAsync(sp => sp.UserId == userId);

        if (studentProfile == null)
        {
            errorMessage = "Student profile not found. Please complete your profile first.";
            isLoading = false;
            return;
        }

    Guid studentId = studentProfile.StudentProfileId;

        // Try to restore form state
        await RestoreFormStateAsync();
        // If no state, initialize new application
        if (application == null || application.ScholarshipId == 0)
        {
            application = new ScholarshipApplication
            {
                ScholarshipId = scholarship.ScholarshipId,
                StudentProfileId = studentId,
                ApplicationDate = DateTime.Now
            };
        }

        isLoading = false;
    }

    // Handles form submission, validates, uploads files, and saves application.
    private async Task HandleSubmit()
    {
        if (isSubmitting || scholarship == null)
            return;

        try
        {
            Logger?.LogInformation("Starting submission for scholarship {ScholarshipId} by student {StudentProfileId}", ScholarshipId, application.StudentProfileId);
            isSubmitting = true;
            errorMessage = null;
            uploadProgress.Clear();

            // Minimal validation
            if (!application.IsExternalApplication && string.IsNullOrWhiteSpace(application.PersonalStatement))
            {
                errorMessage = "Personal statement is required for internal applications.";
                return;
            }

            // Prevent duplicate applications
            var exists = await DbContext.ScholarshipApplications
                .AnyAsync(a => a.ScholarshipId == application.ScholarshipId && a.StudentProfileId == application.StudentProfileId);
            if (exists)
            {
                Logger?.LogWarning("Duplicate application prevented for scholarship {ScholarshipId} student {StudentProfileId}", ScholarshipId, application.StudentProfileId);
                errorMessage = "You have already applied to this scholarship.";
                return;
            }

            // Move temp files to permanent blob storage on submit
            var savedUrls = new List<string>();
            foreach (var tempBlobName in tempBlobFileNames)
            {
                try
                {
                    // Copy temp file to permanent location (remove 'temp/' prefix)
                    var permanentBlobName = tempBlobName.Replace("temp/", "");
                    // Download temp blob
                    var tempStream = await BlobStorageService.DownloadDocumentAsync(tempBlobName);
                    // Upload to permanent location
                    await BlobStorageService.UploadDocumentAsync(tempStream, permanentBlobName, "application/octet-stream");
                    savedUrls.Add(permanentBlobName);
                    // Delete temp file after copy
                    await BlobStorageService.DeleteDocumentAsync(tempBlobName);
                }
                catch (Exception ex)
                {
                    Logger?.LogError(ex, "Failed to move temp file {TempBlobName} to permanent storage", tempBlobName);
                }
            }
            tempBlobFileNames.Clear();

            // Store the permanent blob URLs
            application.UploadedDocuments = string.Join(",", savedUrls);

            DbContext.ScholarshipApplications.Add(application);
            await DbContext.SaveChangesAsync();

            successMessage = $"Application submitted successfully! Reference ID: {application.ScholarshipApplicationId}";
            uploadedFileNames.Clear();
            selectedFiles.Clear();
            await ClearFormStateAsync();
            showSubmittedModal = true;
        }
        catch (InvalidOperationException ioe)
        {
            Logger?.LogWarning(ioe, "Validation/upload error during application submit for scholarship {ScholarshipId}", ScholarshipId);
            errorMessage = ioe.Message;
        }
        catch (Exception ex)
        {
            Logger?.LogError(ex, "Unhandled error during application submit for scholarship {ScholarshipId}", ScholarshipId);
            errorMessage = "Something went wrong while submitting your application. Please try again later.";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    // Track temp files for cleanup
    private List<string> tempBlobFileNames = new();

    // Cleanup temp files if user leaves page without submitting
    public async ValueTask DisposeAsync()
    {
        if (tempBlobFileNames.Any())
        {
            foreach (var tempBlobName in tempBlobFileNames)
            {
                try
                {
                    await BlobStorageService.DeleteDocumentAsync(tempBlobName);
                }
                catch (Exception ex)
                {
                    Logger?.LogWarning(ex, "Failed to cleanup temp blob file {TempBlobName}", tempBlobName);
                }
            }
            tempBlobFileNames.Clear();
        }
    }

    // Automatically trigger OCR for specific files
    // Triggers OCR processing for uploaded files and updates application fields.
    private async Task TriggerOcrForFilesAsync(List<IBrowserFile> filesToProcess)
    {
        if (!filesToProcess.Any())
            return;
        
        try
        {
            await InvokeAsync(() =>
            {
                errorMessage = null;
                successMessage = "🔄 Processing uploaded documents with Azure Document Intelligence...";
                StateHasChanged();
            });
            
            bool foundGwa = false;
            
            foreach (var file in filesToProcess)
            {
                // Mark file as processing
                await InvokeAsync(() =>
                {
                    processingFiles.Add(file.Name);
                    StateHasChanged();
                });
                
                try
                {
                    Logger?.LogInformation("Starting automatic OCR processing for file {FileName}", file.Name);
                    
                    // Update status to show processing with AI
                    await InvokeAsync(() =>
                    {
                        successMessage = $"🤖 Processing '{file.Name}' with Azure Document Intelligence...";
                        StateHasChanged();
                    });
                    
                    await using var stream = file.OpenReadStream(perFileMaxBytes);
                    using var ms = new MemoryStream();
                    await stream.CopyToAsync(ms);
                    ms.Position = 0;
                    
                    var extractedData = await ExtractGradesFromDocumentAsync(ms, file.Name, file.ContentType);
                    
                    bool foundAnyData = false;
                    var extractedItems = new List<string>();
                    
                    if (!string.IsNullOrWhiteSpace(extractedData.GWA) && double.TryParse(extractedData.GWA, out var gwaValue))
                    {
                        await InvokeAsync(() =>
                        {
                            application.GWA = gwaValue;
                            StateHasChanged();
                        });
                        extractedItems.Add($"GWA: {gwaValue}");
                        foundAnyData = true;
                    }
                    
                    if (!string.IsNullOrWhiteSpace(extractedData.FirstSemesterGrades))
                    {
                        await InvokeAsync(() =>
                        {
                            application.FirstSemesterGrades = extractedData.FirstSemesterGrades;
                            StateHasChanged();
                        });
                        extractedItems.Add($"1st Semester: {extractedData.FirstSemesterGrades.Substring(0, Math.Min(50, extractedData.FirstSemesterGrades.Length))}...");
                        foundAnyData = true;
                    }
                    
                    if (!string.IsNullOrWhiteSpace(extractedData.SecondSemesterGrades))
                    {
                        await InvokeAsync(() =>
                        {
                            application.SecondSemesterGrades = extractedData.SecondSemesterGrades;
                            StateHasChanged();
                        });
                        extractedItems.Add($"2nd Semester: {extractedData.SecondSemesterGrades.Substring(0, Math.Min(50, extractedData.SecondSemesterGrades.Length))}...");
                        foundAnyData = true;
                    }
                    
                    if (foundAnyData)
                    {
                        await InvokeAsync(() =>
                        {
                            successMessage = $"✅ Data extracted successfully from '{file.Name}': {string.Join(", ", extractedItems)}";
                            StateHasChanged();
                        });
                        foundGwa = true;
                        
                        await InvokeAsync(OnFieldChanged); // Save the updated data to localStorage
                        Logger?.LogInformation("Successfully extracted data from {FileName}: {ExtractedItems}", file.Name, string.Join(", ", extractedItems));
                        break; // Stop after finding valid data
                    }
                    else
                    {
                        Logger?.LogInformation("No grade data found in document {FileName}", file.Name);
                    }
                }
                catch (Exception ex)
                {
                    Logger?.LogError(ex, "Error during automatic OCR processing for file {FileName}", file.Name);
                    await InvokeAsync(() =>
                    {
                        errorMessage = $"❌ Error processing '{file.Name}': {ex.Message}";
                        StateHasChanged();
                    });
                    break; // Stop processing on error
                }
                finally
                {
                    // Remove file from processing status
                    await InvokeAsync(() =>
                    {
                        processingFiles.Remove(file.Name);
                        StateHasChanged();
                    });
                }
            }
            
            if (!foundGwa && string.IsNullOrEmpty(errorMessage))
            {
                await InvokeAsync(() =>
                {
                    successMessage = "📄 Documents processed successfully. If grade information wasn't extracted, please ensure your documents contain clear GWA or semester grades.";
                    StateHasChanged();
                });
            }
        }
        catch (Exception ex)
        {
            Logger?.LogError(ex, "Error during automatic OCR processing");
            await InvokeAsync(() =>
            {
                errorMessage = $"❌ Error during document processing: {ex.Message}";
                StateHasChanged();
            });
        }
    }
    
    // Keep the manual trigger method for backward compatibility (if needed elsewhere)
    // Manual trigger for OCR processing (for backward compatibility).
    private async Task TriggerOcrAsync()
    {
        await TriggerOcrForFilesAsync(selectedFiles);
    }

    // Closes the submitted modal and navigates to the dashboard.
    private void CloseSubmittedModal()
    {
        showSubmittedModal = false;
        Navigation.NavigateTo("/dashboard/student");
    }

    // Cancels the application and clears form state.
    private async Task CancelAndClearAsync()
    {
        await ClearFormStateAsync();
        Navigation.NavigateTo("/dashboard/student/scholarships");
    }

    // --- Helper class for persisting state ---
    public class PersistedApplicationState
    {
        // Only non-PII fields
        public string? PersonalStatement { get; set; }
        public string? FirstSemesterGrades { get; set; }
        public string? SecondSemesterGrades { get; set; }
    public double? GWA { get; set; }
        public bool? IsExternalApplication { get; set; }
        public string? ExternalApplicationUrl { get; set; }
        public bool? HasAppliedExternally { get; set; }
        public List<string>? UploadedFileNames { get; set; }
    }

    // Validates the form for required fields and application type.
    private bool IsFormValid()
    {
        if (scholarship == null || application == null)
            return false;

        // Always required fields
    if (application.StudentProfileId == Guid.Empty)
            return false;
        if (application.GWA == null || application.GWA <= 0)
            return false;

        // Internal application
        if (!application.IsExternalApplication)
        {
            if (string.IsNullOrWhiteSpace(application.PersonalStatement))
                return false;
            // Optionally require at least one file
            // if (selectedFiles.Count == 0) return false;
        }
        else // External application
        {
            if (string.IsNullOrWhiteSpace(application.ExternalApplicationUrl))
                return false;
            if (!application.HasAppliedExternally)
                return false;
        }
        return true;
    }

    // Extracts grades from a document using Azure Document Intelligence API with improved multi-step processing.
    private async Task<ExtractedGradeData> ExtractGradesFromDocumentAsync(Stream fileStream, string fileName, string contentType)
    {
        // Read endpoint and key from configuration
        string endpoint = Configuration["AzureDocumentIntelligence:Endpoint"] ?? "";
        string apiKey = Configuration["AzureDocumentIntelligence:ApiKey"] ?? "";
        string modelId = "prebuilt-layout"; // Use layout model for table extraction

        if (string.IsNullOrEmpty(endpoint) || string.IsNullOrEmpty(apiKey))
        {
            Logger?.LogWarning("Azure Document Intelligence not configured properly. Endpoint: {Endpoint}, ApiKey: {ApiKeyStatus}", endpoint ?? "NULL", string.IsNullOrEmpty(apiKey) ? "MISSING" : "PROVIDED");
            throw new InvalidOperationException("Azure Document Intelligence is not configured. Please check your appsettings.json file and ensure both 'AzureDocumentIntelligence:Endpoint' and 'AzureDocumentIntelligence:ApiKey' are set.");
        }
        if (!endpoint.StartsWith("https://") || !endpoint.Contains(".cognitiveservices.azure.com"))
        {
            Logger?.LogWarning("Azure Document Intelligence endpoint appears to be invalid: {Endpoint}", endpoint);
            throw new InvalidOperationException($"Invalid endpoint format: {endpoint}. Expected format: https://your-resource.cognitiveservices.azure.com/");
        }

        try
        {
            using var httpClient = new HttpClient();
            httpClient.Timeout = TimeSpan.FromMinutes(5);
            httpClient.DefaultRequestHeaders.Clear();
            httpClient.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", apiKey);

            var cleanEndpoint = endpoint.TrimEnd('/');
            // Use the updated API endpoint format like institution verification
            var url = $"{cleanEndpoint}/documentintelligence/documentModels/{modelId}:analyze?_overload=analyzeDocument&api-version=2024-11-30";

            var fileBytes = new byte[fileStream.Length];
            fileStream.Position = 0;
            await fileStream.ReadExactlyAsync(fileBytes);
            var base64Content = Convert.ToBase64String(fileBytes);

            // Create JSON request body with base64Source as required by the new API
            var requestBody = new
            {
                base64Source = base64Content
            };
            var jsonContent = new StringContent(System.Text.Json.JsonSerializer.Serialize(requestBody), System.Text.Encoding.UTF8, "application/json");

            Logger?.LogInformation("Sending document {FileName} ({ContentType}, {Size} bytes) to Azure Document Intelligence at {Url}", fileName, contentType, fileBytes.Length, url);
            var response = await httpClient.PostAsync(url, jsonContent);
            var responseContent = await response.Content.ReadAsStringAsync();

            if (response.StatusCode == System.Net.HttpStatusCode.Accepted)
            {
                // Handle async processing - get operation location and poll for results
                var operationLocation = response.Headers.GetValues("Operation-Location").FirstOrDefault();
                if (string.IsNullOrEmpty(operationLocation))
                {
                    Logger?.LogError("No Operation-Location header found in Document Intelligence response");
                    throw new InvalidOperationException("Document Intelligence API error: No operation location provided");
                }

                Logger?.LogInformation("Document Intelligence analysis started. Polling for results...");
                
                // Poll for results with better error handling
                responseContent = await PollForDocumentResults(httpClient, operationLocation, apiKey);
                if (string.IsNullOrEmpty(responseContent))
                {
                    throw new InvalidOperationException("Document processing failed or timed out");
                }
            }
            else if (!response.IsSuccessStatusCode)
            {
                Logger?.LogError("Azure Document Intelligence API error. Status: {StatusCode}, Response: {Response}", response.StatusCode, responseContent);
                throw new InvalidOperationException($"Document Intelligence API error: {response.StatusCode} - {responseContent}");
            }

            if (string.IsNullOrWhiteSpace(responseContent))
            {
                Logger?.LogWarning("Azure Document Intelligence returned empty response for {FileName}. Status: {StatusCode}", fileName, response.StatusCode);
                return ExtractGradesFromSimpleTextSearch(fileName);
            }

            Logger?.LogDebug("Document Intelligence response for {FileName} (first 500 chars): {Response}", fileName, responseContent.Length > 500 ? responseContent.Substring(0, 500) + "..." : responseContent);

            // Parse JSON to extract grades from tables and text
            using var doc = System.Text.Json.JsonDocument.Parse(responseContent);
            var root = doc.RootElement;
            var result = new ExtractedGradeData();
            double? gwaValue = null;
            string? firstSemGrades = null;
            string? secondSemGrades = null;
            bool foundTableGrades = false;

            // Try to extract tables with enhanced confidence filtering and structured data extraction
            if (root.TryGetProperty("analyzeResult", out var analyzeResult) && analyzeResult.TryGetProperty("tables", out var tablesElem))
            {
                foreach (var table in tablesElem.EnumerateArray())
                {
                    // Use confidence score to filter - slightly lower threshold for more inclusive extraction
                    double tableConfidence = table.TryGetProperty("confidence", out var confElem) ? confElem.GetDouble() : 0.0;
                    if (tableConfidence < 0.5) continue; // Lowered from 0.7 to catch more valid tables
                    
                    Logger?.LogDebug("Processing table with confidence: {Confidence}", tableConfidence);
                    
                    // Extract structured table data for grade tables
                    var extractedTableData = ExtractGradeTableData(table);
                    if (extractedTableData.Any())
                    {
                        // Convert table data to semester grades format
                        var tableGradeText = string.Join("\n", extractedTableData);
                        if (!string.IsNullOrEmpty(tableGradeText))
                        {
                            // Try to determine if it's first or second semester based on context
                            if (tableGradeText.ToLower().Contains("first") || tableGradeText.ToLower().Contains("1st"))
                            {
                                firstSemGrades = (firstSemGrades ?? "") + tableGradeText + "\n";
                            }
                            else if (tableGradeText.ToLower().Contains("second") || tableGradeText.ToLower().Contains("2nd"))
                            {
                                secondSemGrades = (secondSemGrades ?? "") + tableGradeText + "\n";
                            }
                            else
                            {
                                // Default to first semester if unclear
                                firstSemGrades = (firstSemGrades ?? "") + tableGradeText + "\n";
                            }
                            foundTableGrades = true;
                        }
                    }
                    
                    // Original cell-by-cell processing for GWA and basic extraction
                    var rows = table.GetProperty("rows");
                    foreach (var row in rows.EnumerateArray())
                    {
                        double rowConfidence = row.TryGetProperty("confidence", out var rConfElem) ? rConfElem.GetDouble() : 0.0;
                        if (rowConfidence < 0.5) continue; // Lowered threshold
                        var cells = row.GetProperty("cells");
                        foreach (var cell in cells.EnumerateArray())
                        {
                            double cellConfidence = cell.TryGetProperty("confidence", out var cConfElem) ? cConfElem.GetDouble() : 0.0;
                            if (cellConfidence < 0.5) continue; // Lowered threshold
                            var cellText = cell.GetProperty("content").GetString() ?? "";
                            
                            // Enhanced GWA/GPA detection with exclusion patterns
                            if ((cellText.ToLower().Contains("gwa") || cellText.ToLower().Contains("gpa")) && 
                                !cellText.ToLower().Contains("subject") && !cellText.ToLower().Contains("course"))
                            {
                                var match = System.Text.RegularExpressions.Regex.Match(cellText, @"([0-9]+\.[0-9]+)");
                                if (match.Success && double.TryParse(match.Groups[1].Value, out var val) && val >= 1.0 && val <= 4.0)
                                {
                                    gwaValue = val;
                                    foundTableGrades = true;
                                    Logger?.LogDebug("Found GWA in table: {GWA}", val);
                                }
                            }
                        }
                    }
                }
            }

            // If table grades found, use them
            if (foundTableGrades)
            {
                result.GWA = gwaValue?.ToString();
                result.FirstSemesterGrades = firstSemGrades;
                result.SecondSemesterGrades = secondSemGrades;
                Logger?.LogInformation("Extracted grades from tables: GWA={GWA}, 1st={First}, 2nd={Second}", result.GWA, result.FirstSemesterGrades, result.SecondSemesterGrades);
                return result;
            }

            // Fallback: extract from text using AI for better accuracy
            var allText = "";
            if (root.TryGetProperty("analyzeResult", out var analyzeResult2) && analyzeResult2.TryGetProperty("content", out var content))
            {
                allText = content.GetString() ?? "";
            }

            // Try AI extraction first for better subject-grade parsing
            if (!string.IsNullOrEmpty(allText))
            {
                Logger?.LogInformation("Attempting AI-powered subject and grade extraction for {FileName}", fileName);
                try
                {
                    var aiExtracted = await ExtractSubjectsAndGradesWithAIAsync(allText);
                    if (aiExtracted != null)
                    {
                        var aiResult = ConvertAIDataToExtractedData(aiExtracted);
                        
                        // Use AI results if they contain useful data
                        if (!string.IsNullOrEmpty(aiResult.GWA) || 
                            !string.IsNullOrEmpty(aiResult.FirstSemesterGrades) || 
                            !string.IsNullOrEmpty(aiResult.SecondSemesterGrades))
                        {
                            Logger?.LogInformation("AI extraction successful: GWA={GWA}, FirstSem={FirstSemLength}, SecondSem={SecondSemLength}", 
                                aiResult.GWA, aiResult.FirstSemesterGrades?.Length ?? 0, aiResult.SecondSemesterGrades?.Length ?? 0);
                            return aiResult;
                        }
                    }
                }
                catch (Exception ex)
                {
                    Logger?.LogWarning(ex, "AI extraction failed, falling back to regex extraction");
                }
            }

            // --- Enhanced regex extraction logic for GWA and semester grades (fallback) ---
            var gwaPatterns = new[]
            {
                // Enhanced patterns for GPA/GWA with exclusions and notes
                @"GPA\s*\([^)]*excludes[^)]*\)\s*([0-9]+\.[0-9]+)",
                @"GWA\s*\([^)]*excludes[^)]*\)\s*([0-9]+\.[0-9]+)",
                @"GPA\s*\([^)]*non-numeric[^)]*\)\s*([0-9]+\.[0-9]+)",
                @"GWA\s*\([^)]*non-numeric[^)]*\)\s*([0-9]+\.[0-9]+)",
                
                // Standard patterns
                @"GWA[:=\s-]*([0-9]+\.[0-9]+)",
                @"GWA\s+is\s+([0-9]+\.[0-9]+)",
                @"GWA\s*=\s*([0-9]+\.[0-9]+)",
                @"GWA\s*-\s*([0-9]+\.[0-9]+)",
                @"GWA\s*\(([^)]+)\)",
                @"General\s+Weighted\s+Average[:=\s-]*([0-9]+\.[0-9]+)",
                @"General\s+Average[:=\s-]*([0-9]+\.[0-9]+)",
                @"Weighted\s+Average[:=\s-]*([0-9]+\.[0-9]+)",
                @"Average[:=\s-]*([0-9]+\.[0-9]+)",
                @"GPA[:=\s-]*([0-9]+\.[0-9]+)",
                @"GPA\s+is\s+([0-9]+\.[0-9]+)",
                @"GPA\s*=\s*([0-9]+\.[0-9]+)",
                @"GPA\s*-\s*([0-9]+\.[0-9]+)",
                @"GPA\s*\(([^)]+)\)",
                @"([0-9]+\.[0-9]+).*GWA",
                @"([0-9]+\.[0-9]+).*GPA",
                @"Grade.*Point.*Average[:=\s-]*([0-9]+\.[0-9]+)"
            };
            foreach (var pattern in gwaPatterns)
            {
                var regex = new System.Text.RegularExpressions.Regex(pattern, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                var match = regex.Match(allText);
                if (match.Success)
                {
                    result.GWA = match.Groups[1].Value;
                    break;
                }
            }

            // --- Regex for 1st and 2nd semester grades ---
            var firstSemPattern = @"1st\s*semester\s*grades[:\s]*([0-9]+\.[0-9]+)";
            var secondSemPattern = @"2nd\s*semester\s*grades[:\s]*([0-9]+\.[0-9]+)";
            var firstSemMatch = System.Text.RegularExpressions.Regex.Match(allText, firstSemPattern, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            if (firstSemMatch.Success)
            {
                result.FirstSemesterGrades = firstSemMatch.Groups[1].Value;
            }
            var secondSemMatch = System.Text.RegularExpressions.Regex.Match(allText, secondSemPattern, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            if (secondSemMatch.Success)
            {
                result.SecondSemesterGrades = secondSemMatch.Groups[1].Value;
            }

            // If nothing found, fallback
            if (string.IsNullOrEmpty(result.GWA) && string.IsNullOrEmpty(result.FirstSemesterGrades) && string.IsNullOrEmpty(result.SecondSemesterGrades))
            {
                Logger?.LogInformation("No grades found in document, using fallback.");
                return ExtractGradesFromSimpleTextSearch(fileName);
            }
            return result;
        }
        catch (System.Text.Json.JsonException ex)
        {
            Logger?.LogError(ex, "Failed to parse JSON response from Document Intelligence for {FileName}", fileName);
            throw new InvalidOperationException($"Invalid response from Document Intelligence service: {ex.Message}");
        }
        catch (HttpRequestException ex)
        {
            Logger?.LogError(ex, "HTTP error calling Document Intelligence for {FileName}", fileName);
            throw new InvalidOperationException($"Network error calling Document Intelligence: {ex.Message}");
        }
    }

    // --- Helper class for extracted grade data ---
    public class ExtractedGradeData
    {
        public string? GWA { get; set; }
        public string? FirstSemesterGrades { get; set; }
        public string? SecondSemesterGrades { get; set; }
    }

    // --- Helper class for AI-extracted subject-grade data ---
    public class AIExtractedGradeData
    {
        public string? GWA { get; set; }
        public List<SubjectGrade>? FirstSemesterSubjects { get; set; }
        public List<SubjectGrade>? SecondSemesterSubjects { get; set; }
        public List<SubjectGrade>? SummerSemesterSubjects { get; set; }
        public string? AcademicYear { get; set; }
        public string? StudentName { get; set; }
        public string? StudentNumber { get; set; }
        public string? Program { get; set; }
        public string? YearLevel { get; set; }
    }

    public class SubjectGrade
    {
        public string? SubjectCode { get; set; }
        public string? SubjectTitle { get; set; }
        public string? Units { get; set; }
        public string? Grade { get; set; }
        public string? Remarks { get; set; }
    }

    // Cleans semester grades text and extracts only the actual grades.
    // Cleans semester grades text and extracts subject-grade pairs (code, description, grade)
    private string CleanSemesterGradesText(string rawText, string semesterType)
    {
        if (string.IsNullOrWhiteSpace(rawText))
            return "";

        var subjectGradePairs = new List<string>();
        var lines = rawText.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
        foreach (var line in lines)
        {
            var trimmedLine = line.Trim();
            if (string.IsNullOrWhiteSpace(trimmedLine) || IsHeaderLine(trimmedLine))
                continue;
            var pairs = ExtractSubjectGradePairs(trimmedLine);
            if (pairs.Any())
            {
                foreach (var pair in pairs)
                {
                    var display = !string.IsNullOrEmpty(pair.SubjectCode) && !string.IsNullOrEmpty(pair.SubjectDesc)
                        ? $"{pair.SubjectCode} - {pair.SubjectDesc} - {pair.Grade}"
                        : !string.IsNullOrEmpty(pair.SubjectCode)
                            ? $"{pair.SubjectCode} - {pair.Grade}"
                            : !string.IsNullOrEmpty(pair.SubjectDesc)
                                ? $"{pair.SubjectDesc} - {pair.Grade}"
                                : pair.Grade;
                    subjectGradePairs.Add(display);
                }
            }
            else
            {
                // Fallback: just extract numerical grades
                var gradesInLine = ExtractNumericalGrades(trimmedLine);
                subjectGradePairs.AddRange(gradesInLine);
            }
        }
        if (!subjectGradePairs.Any())
        {
            var gradeMatches = System.Text.RegularExpressions.Regex.Matches(rawText, 
                @"\b([0-4]\.\d{1,2}|[0-4]\.?
*|[ABCDF][+-]?)\b", 
                System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            foreach (System.Text.RegularExpressions.Match match in gradeMatches)
            {
                subjectGradePairs.Add(match.Value);
            }
        }
        var result = string.Join("\n", subjectGradePairs.Distinct()).Trim();
        Logger?.LogInformation("Extracted {SemesterType} semester subject-grade pairs: Original {OriginalLength} chars -> {PairCount} pairs: {Pairs}", 
            semesterType, rawText.Length, subjectGradePairs.Count, string.Join(", ", subjectGradePairs.Take(5)));
        return result;
    }
    
    // Checks if a line is a header that should be ignored in grade extraction.
    private bool IsHeaderLine(string line)
    {
        var headerPatterns = new[]
        {
            @"^\s*\d+(ST|ND|RD|TH)?\s+(SEMESTER|SEM)\s*(GRADES?)?\s*:?\s*$",
            @"^\s*(FIRST|SECOND|THIRD)\s+(SEMESTER|SEM)\s*(GRADES?)?\s*:?\s*$",
            @"^\s*(FALL|SPRING|SUMMER)\s+(SEMESTER|SEM)\s*(GRADES?)?\s*:?\s*$",
            @"^\s*GRADES?\s*-?\s*\d+(ST|ND|RD|TH)?\s+(SEMESTER|SEM)\s*:?\s*$",
            @"^\s*SEMESTER\s+\d+\s*(GRADES?)?\s*:?\s*$",
            @"^\s*(ACADEMIC\s+)?(YEAR|TERM)\s*:?\s*\d{4}(-\d{4})?\s*$",
            @"^\s*GRADE\s*(REPORT|SHEET)?\s*:?\s*$",
            @"^\s*TRANSCRIPT\s*(OF\s+RECORDS?)?\s*:?\s*$",
            @"^\s*STUDENT\s+(NAME|ID)\s*:?.*$",
            @"^\s*COURSE\s*(CODE|TITLE)?\s*(GRADE|UNITS?)?\s*:?\s*$",
            @"^\s*SUBJECT\s*(CODE|TITLE)?\s*(GRADE|UNITS?)?\s*:?\s*$",
            @"^\s*-+\s*$", // Separator lines
            @"^\s*=+\s*$"  // Separator lines
        };

        foreach (var pattern in headerPatterns)
        {
            if (System.Text.RegularExpressions.Regex.IsMatch(line, pattern, System.Text.RegularExpressions.RegexOptions.IgnoreCase))
            {
                return true;
            }
        }
        return false;
    }
    
    // Extracts numerical and non-numerical grades from a single line of text.
    private List<string> ExtractNumericalGrades(string line)
    {
        var grades = new List<string>();
        
        // Pattern to match all valid grade formats
        var gradePatterns = new[]
        {
            @"\b([0-4]\.\d{1,2})\b", // Decimal grades like 1.25, 2.00, 3.75
            @"\b([0-4]\.?\d*)\b",    // Integer or decimal grades
            @"\b([ABCDF][+-]?)\b",   // Letter grades like A, B+, C-, F
            @"\b(P|INC|W|NG|NP|F|DRP|AUD|CR|NC)\b" // Non-numeric status grades
        };
        
        foreach (var pattern in gradePatterns)
        {
            var matches = System.Text.RegularExpressions.Regex.Matches(line, pattern, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            foreach (System.Text.RegularExpressions.Match match in matches)
            {
                var grade = match.Groups[1].Value;
                // Validate that it's a reasonable grade value
                if (IsValidGrade(grade))
                {
                    grades.Add(grade);
                }
            }
        }
        
        return grades;
    }
    
    // Validates if a string represents a valid grade value.
    private bool IsValidGrade(string grade)
    {
        // Check for letter grades
        if (System.Text.RegularExpressions.Regex.IsMatch(grade, @"^[ABCDF][+-]?$", System.Text.RegularExpressions.RegexOptions.IgnoreCase))
            return true;
        
        // Check for non-numeric status grades
        var nonNumericGrades = new[] { "P", "INC", "W", "NG", "NP", "F", "DRP", "AUD", "CR", "NC" };
        if (nonNumericGrades.Contains(grade.ToUpper()))
            return true;
        
        // Check for numerical grades
        if (double.TryParse(grade, out var numericGrade))
        {
            return numericGrade >= 0.0 && numericGrade <= 4.0; // Typical GPA range
        }
        
        return false;
    }

    // --- Helper class for subject-grade extraction ---
    public class SubjectGradePair {
        public string SubjectCode { get; set; } = "";
        public string SubjectDesc { get; set; } = "";
        public string Grade { get; set; } = "";
    }

    // Extracts subject-grade pairs from a single line of text using numbered groups only
    private List<SubjectGradePair> ExtractSubjectGradePairs(string line)
    {
        var pairs = new List<SubjectGradePair>();
        var patterns = new[]
        {
            // Enhanced patterns for various grade formats including incomplete grades
            // Pattern 1: CODE DESCRIPTION NUMERIC_GRADE (e.g., ELEC IT-E3 IT Elective 3 1.00)
            @"([A-Z]{2,}(?:\s+[A-Z0-9-]+)*)\s+([A-Za-z0-9 /,.'\-&()]+?)\s+([0-4]\.\d{2}|[0-4]\.0{1,2})",
            
            // Pattern 2: CODE DESCRIPTION NON_NUMERIC_STATUS (e.g., NSTP 101 National Service Training Program P)
            @"([A-Z]{2,}(?:\s+[A-Z0-9-]+)*)\s+([A-Za-z0-9 /,.'\-&()]+?)\s+(P|INC|W|NG|NP|F|DRP|AUD|CR|NC)",
            
            // Pattern 3: Traditional CODE - DESCRIPTION - GRADE format
            @"([A-Z]{2,}\s*\d{2,})\s*-\s*([A-Za-z0-9 .,&()/-]+?)\s*-\s*([0-4]\.[0-9]{1,2}|[ABCDF][+-]?|P|INC|W|NG|NP|F|DRP|AUD|CR|NC)",
            
            // Pattern 4: CODE DESCRIPTION LETTER_GRADE
            @"([A-Z]{2,}\s*\d{2,})\s+([A-Za-z0-9 .,&()/-]+?)\s+([ABCDF][+-]?)",
            
            // Pattern 5: Simple DESCRIPTION - GRADE
            @"([A-Za-z0-9 .,&()/-]+?)\s*-\s*([0-4]\.[0-9]{1,2}|[ABCDF][+-]?|P|INC|W|NG|NP|F|DRP|AUD|CR|NC)",
            
            // Pattern 6: CODE GRADE_ONLY
            @"([A-Z]{2,}\s*\d{2,})\s+([0-4]\.[0-9]{1,2}|[ABCDF][+-]?|P|INC|W|NG|NP|F|DRP|AUD|CR|NC)",
            
            // Pattern 7: DESCRIPTION GRADE_ONLY (last resort)
            @"([A-Za-z0-9 .,&()/-]+?)\s+([0-4]\.[0-9]{1,2}|[ABCDF][+-]?|P|INC|W|NG|NP|F|DRP|AUD|CR|NC)"
        };
        foreach (var pattern in patterns)
        {
            var regex = new System.Text.RegularExpressions.Regex(pattern, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            var match = regex.Match(line);
            if (match.Success)
            {
                var code = "";
                var desc = "";
                var grade = "";
                if (match.Groups.Count == 4) // CODE-DESC-GRADE
                {
                    code = match.Groups[1].Value.Trim();
                    desc = match.Groups[2].Value.Trim();
                    grade = match.Groups[3].Value.Trim();
                }
                else if (match.Groups.Count == 3)
                {
                    // CODE-GRADE or DESC-GRADE
                    if (pattern.StartsWith("([A-Z]"))
                    {
                        code = match.Groups[1].Value.Trim();
                        grade = match.Groups[2].Value.Trim();
                    }
                    else
                    {
                        desc = match.Groups[1].Value.Trim();
                        grade = match.Groups[2].Value.Trim();
                    }
                }
                if (IsValidGrade(grade))
                {
                    pairs.Add(new SubjectGradePair { SubjectCode = code, SubjectDesc = desc, Grade = grade });
                }
            }
        }
        return pairs;
    }



    // Calculates form completion progress for the banner progress bar.
    private int CalculateFormProgress()
    {
        if (application == null) return 0;
        
        int totalFields = 0;
        int completedFields = 0;
        
        // Required fields for all applications
    totalFields += 2; // StudentProfileId, GWA
    if (application.StudentProfileId != Guid.Empty) completedFields++;
        if (application.GWA.HasValue && application.GWA > 0) completedFields++;
        
        if (application.IsExternalApplication)
        {
            // External application fields
            totalFields += 2; // ExternalApplicationUrl, HasAppliedExternally
            if (!string.IsNullOrWhiteSpace(application.ExternalApplicationUrl)) completedFields++;
            if (application.HasAppliedExternally) completedFields++;
        }
        else
        {
            // Internal application fields  
            totalFields += 1; // PersonalStatement (required)
            if (!string.IsNullOrWhiteSpace(application.PersonalStatement)) completedFields++;
            
            // Optional fields (count if filled)
            if (!string.IsNullOrWhiteSpace(application.FirstSemesterGrades)) completedFields++;
            if (!string.IsNullOrWhiteSpace(application.SecondSemesterGrades)) completedFields++;
            if (selectedFiles.Any()) completedFields++;
            
            // Add optional fields to total if they have content
            if (!string.IsNullOrWhiteSpace(application.FirstSemesterGrades) || 
                !string.IsNullOrWhiteSpace(application.SecondSemesterGrades) || 
                selectedFiles.Any())
            {
                totalFields += 3; // FirstSemesterGrades, SecondSemesterGrades, Documents
            }
        }
        
        return totalFields > 0 ? (int)Math.Round((double)completedFields / totalFields * 100) : 0;
    }

    // --- Progress bar updates are handled automatically by Blazor reactivity ---

    // Extracts structured grade data from a table element
    private List<string> ExtractGradeTableData(System.Text.Json.JsonElement table)
    {
        var gradeEntries = new List<string>();
        
        try
        {
            if (!table.TryGetProperty("cells", out var cellsArray))
                return gradeEntries;

            var cellsByRowCol = new Dictionary<string, string>();
            
            // Build a map of cells by row/column position
            foreach (var cell in cellsArray.EnumerateArray())
            {
                if (cell.TryGetProperty("rowIndex", out var rowIdx) && 
                    cell.TryGetProperty("columnIndex", out var colIdx) &&
                    cell.TryGetProperty("content", out var content))
                {
                    var key = $"{rowIdx.GetInt32()},{colIdx.GetInt32()}";
                    cellsByRowCol[key] = content.GetString() ?? "";
                }
            }
            
            // Try to identify grade table patterns - look for subject codes, descriptions, and grades
            var maxRow = cellsByRowCol.Keys.Max(k => int.Parse(k.Split(',')[0]));
            var maxCol = cellsByRowCol.Keys.Max(k => int.Parse(k.Split(',')[1]));
            
            for (int row = 0; row <= maxRow; row++)
            {
                var rowCells = new List<string>();
                for (int col = 0; col <= maxCol; col++)
                {
                    if (cellsByRowCol.TryGetValue($"{row},{col}", out var cellContent))
                    {
                        rowCells.Add(cellContent.Trim());
                    }
                    else
                    {
                        rowCells.Add("");
                    }
                }
                
                // Skip empty rows or header rows
                var rowText = string.Join(" ", rowCells).Trim();
                if (string.IsNullOrEmpty(rowText) || IsHeaderLine(rowText))
                    continue;
                
                // Try to extract subject-grade pairs from the row
                var pairs = ExtractSubjectGradePairs(rowText);
                if (pairs.Any())
                {
                    foreach (var pair in pairs)
                    {
                        var display = !string.IsNullOrEmpty(pair.SubjectCode) && !string.IsNullOrEmpty(pair.SubjectDesc)
                            ? $"{pair.SubjectCode} - {pair.SubjectDesc} - {pair.Grade}"
                            : !string.IsNullOrEmpty(pair.SubjectCode)
                                ? $"{pair.SubjectCode} - {pair.Grade}"
                                : !string.IsNullOrEmpty(pair.SubjectDesc)
                                    ? $"{pair.SubjectDesc} - {pair.Grade}"
                                    : pair.Grade;
                        gradeEntries.Add(display);
                    }
                }
                else
                {
                    // Fallback: if we detect grades in the row, add the whole row
                    if (System.Text.RegularExpressions.Regex.IsMatch(rowText, @"[0-4]\.\d{2}|[ABCDF][+-]?|P|INC|W|NG|NP|F|DRP|AUD|CR|NC"))
                    {
                        gradeEntries.Add(rowText);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logger?.LogWarning(ex, "Error extracting grade table data");
        }
        
        return gradeEntries;
    }

    // Extracts subjects and grades using AI for better accuracy and structured data
    private async Task<AIExtractedGradeData?> ExtractSubjectsAndGradesWithAIAsync(string rawText)
    {
        string prompt = $@"You are an expert at extracting academic grade information from Philippine educational documents like transcripts, grade reports, and Certificate of Registration (COR).

Analyze the OCR text below and extract the following structured information. Return ONLY a JSON object with these exact field names:

GWA: The General Weighted Average or GPA (extract the numerical value like ""1.75"", ""2.25"", etc.)
FirstSemesterSubjects: Array of subjects for first semester
SecondSemesterSubjects: Array of subjects for second semester  
SummerSemesterSubjects: Array of subjects for summer semester (if any)
AcademicYear: The academic year (like ""2023-2024"", ""AY 2023-2024"")
StudentName: Full name of the student
StudentNumber: Student ID or student number
Program: Degree program or course (like ""BSIT"", ""Bachelor of Science in Information Technology"")
YearLevel: Year level (like ""1st Year"", ""2nd Year"", ""3rd Year"", ""4th Year"")

Each subject in the arrays should have:
SubjectCode: Course code (like ""IT 101"", ""MATH 101"", ""ELEC IT-E3"", ""GEED 037"")
SubjectTitle: Full subject title/description (like ""Introduction to Computing"", ""College Algebra"")
Units: Credit units (like ""3.0"", ""2.0"", ""1.0"")
Grade: The grade received (numerical like ""1.00"", ""1.25"", ""2.50"" or letter like ""A"", ""B+"" or status like ""P"", ""INC"", ""W"")
Remarks: Any remarks or status (like ""PASSED"", ""FAILED"", ""INCOMPLETE"", ""WITHDRAWN"", etc.)

IMPORTANT EXTRACTION RULES:
1. Look for semester headers like ""1st Semester"", ""First Semester"", ""2nd Semester"", ""Second Semester"", ""Summer""
2. For GWA/GPA: Look for patterns like ""GPA (excludes NSTP and subjects with non-numeric ratings)"" and extract the number
3. Handle both numeric grades (1.00-4.00 scale) and letter grades (A-F) 
4. Handle non-numeric grades like P (Pass), INC (Incomplete), W (Withdrawn), NG (No Grade), etc.
5. Subject codes can be in various formats: ""IT 101"", ""ELEC IT-E3"", ""GEED 037"", ""NSTP 101""
6. Extract the complete subject title, not just partial descriptions
7. If semester is unclear, put subjects in FirstSemesterSubjects by default
8. Look for academic year patterns like ""School Year 2023-2024"", ""AY 2023-24"", ""Academic Year 2023-2024""

Raw OCR Text:
{rawText}

Return only valid JSON:";

        try
        {
            var response = await OpenAIService.GetChatCompletionAsync(prompt);
            
            // Clean up the JSON response (remove markdown code block markers if present)
            var json = response.Trim();
            if (json.StartsWith("```json"))
                json = json.Substring(7);
            if (json.StartsWith("```"))
                json = json.Substring(3);
            if (json.EndsWith("```"))
                json = json.Substring(0, json.Length - 3);
            json = json.Trim();

            Logger?.LogDebug("AI extracted grade data JSON: {Json}", json);

            var extracted = System.Text.Json.JsonSerializer.Deserialize<AIExtractedGradeData>(json, new System.Text.Json.JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            Logger?.LogInformation("AI successfully extracted grade data: GWA={GWA}, FirstSem={FirstSemCount}, SecondSem={SecondSemCount}", 
                extracted?.GWA, extracted?.FirstSemesterSubjects?.Count ?? 0, extracted?.SecondSemesterSubjects?.Count ?? 0);

            return extracted;
        }
        catch (Exception ex)
        {
            Logger?.LogError(ex, "Error during AI grade extraction");
            return null;
        }
    }

    // Converts AI extracted data to the format expected by the application
    private ExtractedGradeData ConvertAIDataToExtractedData(AIExtractedGradeData aiData)
    {
        var result = new ExtractedGradeData
        {
            GWA = aiData.GWA
        };

        // Convert first semester subjects to text format
        if (aiData.FirstSemesterSubjects?.Any() == true)
        {
            var firstSemLines = new List<string>();
            foreach (var subject in aiData.FirstSemesterSubjects)
            {
                var line = "";
                if (!string.IsNullOrEmpty(subject.SubjectCode) && !string.IsNullOrEmpty(subject.SubjectTitle))
                {
                    line = $"{subject.SubjectCode} - {subject.SubjectTitle} - {subject.Grade}";
                }
                else if (!string.IsNullOrEmpty(subject.SubjectCode))
                {
                    line = $"{subject.SubjectCode} - {subject.Grade}";
                }
                else if (!string.IsNullOrEmpty(subject.SubjectTitle))
                {
                    line = $"{subject.SubjectTitle} - {subject.Grade}";
                }
                else
                {
                    line = subject.Grade ?? "";
                }
                
                if (!string.IsNullOrEmpty(line))
                    firstSemLines.Add(line);
            }
            result.FirstSemesterGrades = string.Join("\n", firstSemLines);
        }

        // Convert second semester subjects to text format
        if (aiData.SecondSemesterSubjects?.Any() == true)
        {
            var secondSemLines = new List<string>();
            foreach (var subject in aiData.SecondSemesterSubjects)
            {
                var line = "";
                if (!string.IsNullOrEmpty(subject.SubjectCode) && !string.IsNullOrEmpty(subject.SubjectTitle))
                {
                    line = $"{subject.SubjectCode} - {subject.SubjectTitle} - {subject.Grade}";
                }
                else if (!string.IsNullOrEmpty(subject.SubjectCode))
                {
                    line = $"{subject.SubjectCode} - {subject.Grade}";
                }
                else if (!string.IsNullOrEmpty(subject.SubjectTitle))
                {
                    line = $"{subject.SubjectTitle} - {subject.Grade}";
                }
                else
                {
                    line = subject.Grade ?? "";
                }
                
                if (!string.IsNullOrEmpty(line))
                    secondSemLines.Add(line);
            }
            result.SecondSemesterGrades = string.Join("\n", secondSemLines);
        }

        // Include summer semester subjects in second semester if any
        if (aiData.SummerSemesterSubjects?.Any() == true)
        {
            var summerLines = new List<string>();
            foreach (var subject in aiData.SummerSemesterSubjects)
            {
                var line = "";
                if (!string.IsNullOrEmpty(subject.SubjectCode) && !string.IsNullOrEmpty(subject.SubjectTitle))
                {
                    line = $"{subject.SubjectCode} - {subject.SubjectTitle} - {subject.Grade} (Summer)";
                }
                else if (!string.IsNullOrEmpty(subject.SubjectCode))
                {
                    line = $"{subject.SubjectCode} - {subject.Grade} (Summer)";
                }
                else if (!string.IsNullOrEmpty(subject.SubjectTitle))
                {
                    line = $"{subject.SubjectTitle} - {subject.Grade} (Summer)";
                }
                else
                {
                    line = $"{subject.Grade} (Summer)";
                }
                
                if (!string.IsNullOrEmpty(line))
                    summerLines.Add(line);
            }
            
            // Append summer subjects to second semester grades
            if (summerLines.Any())
            {
                var summerText = string.Join("\n", summerLines);
                result.SecondSemesterGrades = string.IsNullOrEmpty(result.SecondSemesterGrades) 
                    ? summerText 
                    : result.SecondSemesterGrades + "\n" + summerText;
            }
        }

        return result;
    }

    // Polls for Document Intelligence results with improved error handling
    private async Task<string?> PollForDocumentResults(HttpClient httpClient, string operationLocation, string apiKey)
    {
        var maxAttempts = 30; // 30 attempts with 2-second delays = 1 minute max
        var delay = TimeSpan.FromSeconds(2);

        for (int attempt = 0; attempt < maxAttempts; attempt++)
        {
            try
            {
                httpClient.DefaultRequestHeaders.Clear();
                httpClient.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", apiKey);

                var response = await httpClient.GetAsync(operationLocation);
                if (!response.IsSuccessStatusCode)
                {
                    Logger?.LogError("Error polling for results: {StatusCode}", response.StatusCode);
                    continue;
                }

                var responseContent = await response.Content.ReadAsStringAsync();
                using var resultDoc = System.Text.Json.JsonDocument.Parse(responseContent);
                
                if (resultDoc.RootElement.TryGetProperty("status", out var statusElement))
                {
                    var status = statusElement.GetString();
                    Logger?.LogDebug("Polling attempt {Attempt}: Status = {Status}", attempt + 1, status);

                    if (status == "succeeded")
                    {
                        Logger?.LogInformation("Document analysis completed successfully");
                        return responseContent;
                    }
                    else if (status == "failed")
                    {
                        Logger?.LogError("Document analysis failed");
                        return null;
                    }
                    // If status is "running" or "notStarted", continue polling
                }

                if (attempt < maxAttempts - 1)
                {
                    await Task.Delay(delay);
                }
            }
            catch (Exception ex)
            {
                Logger?.LogError(ex, "Error during polling attempt {Attempt}", attempt + 1);
                if (attempt < maxAttempts - 1)
                {
                    await Task.Delay(delay);
                }
            }
        }

        Logger?.LogError("Polling timeout - analysis did not complete within expected time");
        return null;
    }

    // Simple fallback for testing - returns sample values for grades if extraction fails.
    private ExtractedGradeData ExtractGradesFromSimpleTextSearch(string fileName)
    {
        // This is just a fallback that returns sample values for testing
        // In a real scenario, you'd need proper PDF text extraction
        Logger?.LogInformation("Using fallback grade extraction for testing with file {FileName}", fileName);
        
        var result = new ExtractedGradeData();
        
        // Return test values that look like grades for demo purposes
        if (fileName.ToLower().Contains("gwa") || fileName.ToLower().Contains("grade"))
        {
            result.GWA = "1.75"; // Sample GWA for testing
            result.FirstSemesterGrades = "MATH 101 - 1.25\nENG 101 - 1.50\nSCI 101 - 1.75\nHIST 101 - 2.00";
            result.SecondSemesterGrades = "MATH 102 - 1.50\nENG 102 - 1.25\nSCI 102 - 2.00\nHIST 102 - 1.75";
        }
        
        return result;
    }
}
