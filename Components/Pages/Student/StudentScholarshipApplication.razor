@page "/dashboard/student/apply/{ScholarshipId:int}"
@attribute [Authorize(Roles = "Student,SuperAdmin")]
@layout Layout.StudentDashLayout

@using c2_eskolar.Data
@using c2_eskolar.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using Blazored.LocalStorage


@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthProvider
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IWebHostEnvironment Env
@inject c2_eskolar.Services.BlobStorageService BlobStorageService
@inject Microsoft.Extensions.Logging.ILogger<StudentScholarshipApplication> Logger


<PageTitle>Scholarship Application</PageTitle>


<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-lg border-0 mb-4">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0"><i class="fas fa-file-signature me-2"></i>Scholarship Application</h3>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center align-items-center" style="min-height: 200px;">
                            <div class="spinner-border text-primary" role="status"></div>
                            <span class="ms-3">Loading...</span>
                        </div>
                    }
                    else if (scholarship == null)
                    {
                        <div class="alert alert-danger">Scholarship not found.</div>
                    }
                    else
                    {
                        <div class="mb-4">
                            <h4 class="fw-bold mb-1">@scholarship.Title</h4>
                            <p class="text-muted mb-2">@scholarship.Institution?.AdminFullName</p>
                            <span class="badge bg-info text-dark mb-2">Deadline: @scholarship.ApplicationDeadline.ToString("MMMM dd, yyyy")</span>
                            <div class="mb-2"><strong>Description:</strong> @scholarship.Description</div>
                        </div>


                        <EditForm Model="application" OnValidSubmit="HandleSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-4">
                                <h5 class="mb-2"><i class="fas fa-user-graduate me-2"></i>Student Information</h5>
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <label for="StudentId" class="form-label">Student ID <span class="text-danger">*</span></label>
                                        <InputText id="StudentId" class="form-control" @bind-Value="application.StudentId" @oninput="async _ => await OnFieldChanged()" placeholder="Enter your student ID" />
                                        <ValidationMessage For="@(() => application.StudentId)" />
                                    </div>
                                    <div class="col-md-6">
                                        <label for="GWA" class="form-label">GWA <span class="text-danger">*</span></label>
                                        <InputNumber id="GWA" class="form-control" @bind-Value="application.GWA" @oninput="async _ => await OnFieldChanged()" step="0.01" placeholder="e.g. 1.75" />
                                        <ValidationMessage For="@(() => application.GWA)" />
                                    </div>
                                </div>
                                <div class="row g-3 mt-2">
                                    <div class="col-md-6">
                                        <label for="FirstSemGrades" class="form-label">1st Semester Grades</label>
                                        <InputTextArea id="FirstSemGrades" class="form-control" @bind-Value="application.FirstSemesterGrades" @oninput="async _ => await OnFieldChanged()" rows="2" placeholder="List your 1st semester grades..." />
                                        <ValidationMessage For="@(() => application.FirstSemesterGrades)" />
                                    </div>
                                    <div class="col-md-6">
                                        <label for="SecondSemGrades" class="form-label">2nd Semester Grades</label>
                                        <InputTextArea id="SecondSemGrades" class="form-control" @bind-Value="application.SecondSemesterGrades" @oninput="async _ => await OnFieldChanged()" rows="2" placeholder="List your 2nd semester grades..." />
                                        <ValidationMessage For="@(() => application.SecondSemesterGrades)" />
                                    </div>
                                </div>
                            </div>

                            <div class="mb-4">
                                <h5 class="mb-2"><i class="fas fa-tasks me-2"></i>Application Type</h5>
                                <InputRadioGroup @bind-Value="application.IsExternalApplication" @onchange="async _ => await OnFieldChanged()">
                                    <div class="form-check">
                                        <InputRadio class="form-check-input" Value="false" />
                                        <label class="form-check-label">Internal (via this portal)</label>
                                    </div>
                                    <div class="form-check">
                                        <InputRadio class="form-check-input" Value="true" />
                                        <label class="form-check-label">External (redirect to provider site)</label>
                                    </div>
                                </InputRadioGroup>
                            </div>

                            @if (application.IsExternalApplication)
                            {
                                <div class="mb-4 p-3 border rounded bg-light">
                                    <h6 class="fw-bold mb-2"><i class="fas fa-external-link-alt me-2"></i>External Application</h6>
                                    <label for="ExternalApplicationUrl" class="form-label">Application Link</label>
                                    <InputText id="ExternalApplicationUrl" class="form-control mb-2"
                                               @bind-Value="application.ExternalApplicationUrl"
                                               @oninput="async _ => await OnFieldChanged()"
                                               placeholder="https://provider.com/apply" />
                                    <ValidationMessage For="@(() => application.ExternalApplicationUrl)" />

                                    <div class="form-check mt-2">
                                        <InputCheckbox id="HasAppliedExternally" class="form-check-input"
                                                       @bind-Value="application.HasAppliedExternally"
                                                       @onchange="async _ => await OnFieldChanged()" />
                                        <label class="form-check-label" for="HasAppliedExternally">
                                            I confirm I have applied on the providerâ€™s site
                                        </label>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="mb-4 p-3 border rounded bg-light">
                                    <h6 class="fw-bold mb-2"><i class="fas fa-user-edit me-2"></i>Internal Application</h6>
                                    <label for="PersonalStatement" class="form-label">Personal Statement <span class="text-danger">*</span></label>
                                    <InputTextArea id="PersonalStatement" class="form-control mb-2"
                                                   @bind-Value="application.PersonalStatement"
                                                   @oninput="async _ => await OnFieldChanged()"
                                                   rows="6"
                                                   placeholder="Explain why you deserve this scholarship..." />
                                    <ValidationMessage For="@(() => application.PersonalStatement)" />

                                    <label for="UploadedDocuments" class="form-label mt-2">Supporting Documents</label>
                                    <InputFile id="UploadedDocuments" class="form-control mb-2" OnChange="OnFilesSelected" multiple />
                                    @if (uploadedFileNames.Any())
                                    {
                                        <div class="mt-2">
                                            <strong>Selected Files:</strong>
                                            <ul class="mb-0">
                                                @foreach (var file in uploadedFileNames)
                                                {
                                                    <li>@file</li>
                                                }
                                            </ul>
                                        </div>
                                    }
                                    <ValidationMessage For="@(() => application.UploadedDocuments)" />
                                </div>
                            }



                            <div class="d-flex align-items-center mt-4">
                                <button type="submit" class="btn btn-success px-4" disabled="@(!IsFormValid() || isSubmitting)">
                                    @if (isSubmitting)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        @:Submitting...
                                    }
                                    else
                                    {
                                        @:Submit Application
                                    }
                                </button>
                                <button type="button" class="btn btn-outline-secondary ms-3" @onclick="CancelAndClearAsync">Cancel</button>
                            </div>

                            @if (!string.IsNullOrEmpty(successMessage))
                            {
                                <div class="alert alert-success mt-4">
                                    <i class="fas fa-check-circle me-2"></i>@successMessage
                                    <div class="mt-2">
                                        @if (application.ScholarshipApplicationId != Guid.Empty)
                                        {
                                            <a href="@($"/dashboard/student/applications/{application.ScholarshipApplicationId}")" class="btn btn-sm btn-outline-success">
                                                <i class="fas fa-eye me-1"></i>View Application
                                            </a>
                                        }
                                        <a href="/dashboard/student/applications" class="btn btn-sm btn-outline-secondary ms-2">
                                            <i class="fas fa-folder-open me-1"></i>View All Applications
                                        </a>
                                    </div>
                                </div>
                            }

                            @if (showSubmittedModal)
                            {
                                <div style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.5); z-index: 1050; display: flex; align-items: center; justify-content: center;">
                                    <div class="modal-dialog modal-dialog-centered" style="z-index: 1060; max-width: 400px; width: 100%;">
                                        <div class="modal-content" style="background: #fff; border-radius: 12px; box-shadow: 0 8px 32px rgba(0,0,0,0.25); overflow: hidden;">
                                            <div class="modal-header bg-success text-white" style="background: #198754; border-bottom: 1px solid #e9ecef;">
                                                <h5 class="modal-title"><i class="fas fa-check-circle me-2"></i>Application Submitted</h5>
                                                <button type="button" class="btn-close btn-close-white" aria-label="Close" @onclick="CloseSubmittedModal"></button>
                                            </div>
                                            <div class="modal-body" style="padding: 1.5rem;">
                                                <p>Your application has been submitted successfully!</p>
                                                @if (application.ScholarshipApplicationId != Guid.Empty)
                                                {
                                                    <a href="@($"/dashboard/student/applications/{application.ScholarshipApplicationId}")" class="btn btn-success me-2">
                                                        <i class="fas fa-eye me-1"></i>View Application
                                                    </a>
                                                }
                                                <a href="/dashboard/student/applications" class="btn btn-outline-secondary">
                                                    <i class="fas fa-folder-open me-1"></i>View All Applications
                                                </a>
                                            </div>
                                            <div class="modal-footer" style="background: #f8f9fa; border-top: 1px solid #e9ecef;">
                                                <button type="button" class="btn btn-secondary" @onclick="CloseSubmittedModal">Close</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger mt-4">
                                    <i class="fas fa-exclamation-triangle me-2"></i>@errorMessage
                                </div>
                            }
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int ScholarshipId { get; set; }


    private Scholarship? scholarship;
    private ScholarshipApplication application = new();
    private bool isLoading = true;
    private bool isSubmitting = false;
    private string? successMessage;
    private bool showSubmittedModal = false;
    private string? errorMessage;
    private List<string> uploadedFileNames = new();
    private List<IBrowserFile> selectedFiles = new();
    // Document intelligence fields removed
    private const string LocalStorageKey = "student-scholarship-application";
    // Debounce token for LocalStorage writes
    private CancellationTokenSource? debounceCts;

    // Upload policy
    private readonly string[] allowedExtensions = new[] { ".pdf", ".docx", ".doc", ".jpg", ".jpeg", ".png" };
    private const long perFileMaxBytes = 5 * 1024 * 1024; // 5 MB
    private const long totalMaxBytes = 20 * 1024 * 1024; // 20 MB total per submission

    private async Task OnFilesSelected(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
        var validFiles = new List<IBrowserFile>();
        var validFileNames = new List<string>();
        long currentTotal = 0;

        foreach (var file in files)
        {
            var ext = Path.GetExtension(file.Name).ToLowerInvariant();
            if (!allowedExtensions.Contains(ext))
            {
                errorMessage = $"One or more files have unsupported types. Allowed: {string.Join(", ", allowedExtensions)}";
                StateHasChanged();
                return;
            }

            if (file.Size > perFileMaxBytes)
            {
                errorMessage = $"File '{file.Name}' exceeds the per-file limit of {perFileMaxBytes / (1024 * 1024)} MB.";
                StateHasChanged();
                return;
            }

            if (currentTotal + file.Size > totalMaxBytes)
            {
                errorMessage = $"Total upload size exceeds the {totalMaxBytes / (1024 * 1024)} MB limit.";
                StateHasChanged();
                return;
            }

            currentTotal += file.Size;
            validFiles.Add(file);
            validFileNames.Add(file.Name);
        }

        selectedFiles = validFiles;
        uploadedFileNames = validFileNames;
        errorMessage = null;

        // Persist a minimal safe state
        await DebouncedSaveFormStateAsync();
    }

    private async Task SaveFormStateAsync()
    {
        // Persist only safe, non-PII fields
        var state = new PersistedApplicationState
        {
            PersonalStatement = application?.PersonalStatement,
            FirstSemesterGrades = application?.FirstSemesterGrades,
            SecondSemesterGrades = application?.SecondSemesterGrades,
            GWA = application?.GWA,
            IsExternalApplication = application?.IsExternalApplication,
            ExternalApplicationUrl = application?.ExternalApplicationUrl,
            HasAppliedExternally = application?.HasAppliedExternally,
            UploadedFileNames = uploadedFileNames
        };
        try
        {
            await LocalStorage.SetItemAsync(LocalStorageKey + ScholarshipId, state);
            Logger?.LogDebug("Saved application draft for scholarship {ScholarshipId}", ScholarshipId);
        }
        catch (Exception ex)
        {
            // Do not surface LocalStorage errors to users; log and continue
            Logger?.LogWarning(ex, "Failed to persist application draft for scholarship {ScholarshipId}", ScholarshipId);
        }
    }

    private async Task DebouncedSaveFormStateAsync(int delayMs = 800)
    {
        try
        {
            debounceCts?.Cancel();
        }
        catch { }
        debounceCts = new CancellationTokenSource();
        var token = debounceCts.Token;
        try
        {
            await Task.Delay(delayMs, token);
            if (!token.IsCancellationRequested)
            {
                await InvokeAsync(SaveFormStateAsync);
            }
        }
        catch (TaskCanceledException) { }
    }

    private async Task RestoreFormStateAsync()
    {
        try
        {
            var state = await LocalStorage.GetItemAsync<PersistedApplicationState>(LocalStorageKey + ScholarshipId);
            if (state != null)
            {
                // Restore only non-PII fields
                application.PersonalStatement = state.PersonalStatement ?? application.PersonalStatement;
                application.FirstSemesterGrades = state.FirstSemesterGrades ?? application.FirstSemesterGrades;
                application.SecondSemesterGrades = state.SecondSemesterGrades ?? application.SecondSemesterGrades;
                application.GWA = state.GWA ?? application.GWA;
                application.IsExternalApplication = state.IsExternalApplication ?? application.IsExternalApplication;
                application.ExternalApplicationUrl = state.ExternalApplicationUrl ?? application.ExternalApplicationUrl;
                application.HasAppliedExternally = state.HasAppliedExternally ?? application.HasAppliedExternally;
                uploadedFileNames = state.UploadedFileNames ?? new List<string>();
            }
        }
        catch (Exception ex)
        {
            Logger?.LogWarning(ex, "Failed to restore application draft for scholarship {ScholarshipId}", ScholarshipId);
        }
    }

    private async Task ClearFormStateAsync()
    {
        await LocalStorage.RemoveItemAsync(LocalStorageKey + ScholarshipId);
    }

    private async Task OnFieldChanged()
    {
        await DebouncedSaveFormStateAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(200);

        // âœ… Include Institution when loading scholarship
        scholarship = await DbContext.Scholarships
            .Include(s => s.Institution)
            .FirstOrDefaultAsync(s => s.ScholarshipId == ScholarshipId);

        if (scholarship == null)
        {
            isLoading = false;
            return;
        }

        // Get the current user's ID from claims
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (string.IsNullOrEmpty(userId))
        {
            Navigation.NavigateTo("/login");
            return;
        }

        // Find the student's profile
        var studentProfile = await DbContext.StudentProfiles
            .FirstOrDefaultAsync(sp => sp.UserId == userId);

        if (studentProfile == null)
        {
            errorMessage = "Student profile not found. Please complete your profile first.";
            isLoading = false;
            return;
        }

    Guid studentId = studentProfile.StudentProfileId;

        // Try to restore form state
        await RestoreFormStateAsync();
        // If no state, initialize new application
        if (application == null || application.ScholarshipId == 0)
        {
            application = new ScholarshipApplication
            {
                ScholarshipId = scholarship.ScholarshipId,
                StudentProfileId = studentId,
                ApplicationDate = DateTime.Now
            };
        }

        isLoading = false;
    }

    private async Task HandleSubmit()
    {
        if (isSubmitting || scholarship == null)
            return;

        try
        {
            Logger?.LogInformation("Starting submission for scholarship {ScholarshipId} by student {StudentProfileId}", ScholarshipId, application.StudentProfileId);
            isSubmitting = true;
            errorMessage = null;

            // Minimal validation
            if (!application.IsExternalApplication && string.IsNullOrWhiteSpace(application.PersonalStatement))
            {
                errorMessage = "Personal statement is required for internal applications.";
                return;
            }

            // Prevent duplicate applications
            var exists = await DbContext.ScholarshipApplications
                .AnyAsync(a => a.ScholarshipId == application.ScholarshipId && a.StudentProfileId == application.StudentProfileId);
            if (exists)
            {
                Logger?.LogWarning("Duplicate application prevented for scholarship {ScholarshipId} student {StudentProfileId}", ScholarshipId, application.StudentProfileId);
                errorMessage = "You have already applied to this scholarship.";
                return;
            }


            // Save uploaded files to Azure Blob Storage
            var savedUrls = new List<string>();
            long accumulated = 0;
            foreach (var file in selectedFiles)
            {
                var ext = Path.GetExtension(file.Name).ToLowerInvariant();
                if (!allowedExtensions.Contains(ext))
                    throw new InvalidOperationException($"Unsupported file type: {ext}");

                if (file.Size > perFileMaxBytes)
                    throw new InvalidOperationException($"File {file.Name} exceeds per-file size limit.");

                if (accumulated + file.Size > totalMaxBytes)
                    throw new InvalidOperationException($"Total upload size exceeds limit.");

                var uniqueName = $"{Guid.NewGuid()}_{Path.GetFileName(file.Name)}";
                try
                {
                    await using var stream = file.OpenReadStream(perFileMaxBytes);
                    var url = await BlobStorageService.UploadDocumentAsync(stream, uniqueName, file.ContentType);
                    savedUrls.Add(url);
                    accumulated += file.Size;
                }
                catch (Exception ex)
                {
                    Logger?.LogError(ex, "Failed uploading file {FileName} to Azure Blob Storage for scholarship {ScholarshipId}", file.Name, ScholarshipId);
                    throw;
                }
            }
            // Store the blob URLs (or you can store uniqueName if you want to keep it private)
            application.UploadedDocuments = string.Join(",", savedUrls);

            DbContext.ScholarshipApplications.Add(application);
            await DbContext.SaveChangesAsync();

            successMessage = $"Application submitted successfully! Reference ID: {application.ScholarshipApplicationId}";
            uploadedFileNames.Clear();
            selectedFiles.Clear();
            await ClearFormStateAsync();
            showSubmittedModal = true;
        }
        catch (InvalidOperationException ioe)
        {
            Logger?.LogWarning(ioe, "Validation/upload error during application submit for scholarship {ScholarshipId}", ScholarshipId);
            errorMessage = ioe.Message;
        }
        catch (Exception ex)
        {
            Logger?.LogError(ex, "Unhandled error during application submit for scholarship {ScholarshipId}", ScholarshipId);
            errorMessage = "Something went wrong while submitting your application. Please try again later.";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void CloseSubmittedModal()
    {
        showSubmittedModal = false;
        Navigation.NavigateTo("/dashboard/student");
    }

    private async Task CancelAndClearAsync()
    {
        await ClearFormStateAsync();
        Navigation.NavigateTo("/dashboard/student/scholarships");
    }

    // Helper class for persisting state
    public class PersistedApplicationState
    {
        // Only non-PII fields
        public string? PersonalStatement { get; set; }
        public string? FirstSemesterGrades { get; set; }
        public string? SecondSemesterGrades { get; set; }
    public double? GWA { get; set; }
        public bool? IsExternalApplication { get; set; }
        public string? ExternalApplicationUrl { get; set; }
        public bool? HasAppliedExternally { get; set; }
        public List<string>? UploadedFileNames { get; set; }
    }

    private bool IsFormValid()
    {
        if (scholarship == null || application == null)
            return false;

        // Always required fields
        if (string.IsNullOrWhiteSpace(application.StudentId?.ToString()))
            return false;
        if (application.GWA == null || application.GWA <= 0)
            return false;

        // Internal application
        if (!application.IsExternalApplication)
        {
            if (string.IsNullOrWhiteSpace(application.PersonalStatement))
                return false;
            // Optionally require at least one file
            // if (selectedFiles.Count == 0) return false;
        }
        else // External application
        {
            if (string.IsNullOrWhiteSpace(application.ExternalApplicationUrl))
                return false;
            if (!application.HasAppliedExternally)
                return false;
        }
        return true;
    }
}
