@page "/dashboard/student/apply/{ScholarshipId:int}"
@attribute [Authorize(Roles = "Student")]
@layout Layout.StudentDashLayout

@using c2_eskolar.Data
@using c2_eskolar.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using Blazored.LocalStorage


@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthProvider
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<PageTitle>Scholarship Application</PageTitle>


<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-lg border-0 mb-4">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0"><i class="fas fa-file-signature me-2"></i>Scholarship Application</h3>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center align-items-center" style="min-height: 200px;">
                            <div class="spinner-border text-primary" role="status"></div>
                            <span class="ms-3">Loading...</span>
                        </div>
                    }
                    else if (scholarship == null)
                    {
                        <div class="alert alert-danger">Scholarship not found.</div>
                    }
                    else
                    {
                        <div class="mb-4">
                            <h4 class="fw-bold mb-1">@scholarship.Title</h4>
                            <p class="text-muted mb-2">@scholarship.Institution?.AdminFullName</p>
                            <span class="badge bg-info text-dark mb-2">Deadline: @scholarship.ApplicationDeadline.ToString("MMMM dd, yyyy")</span>
                            <div class="mb-2"><strong>Description:</strong> @scholarship.Description</div>
                        </div>


                        <EditForm Model="application" OnValidSubmit="HandleSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-4">
                                <h5 class="mb-2"><i class="fas fa-tasks me-2"></i>Application Type</h5>
                                <InputRadioGroup @bind-Value="application.IsExternalApplication" @onchange="async _ => await OnFieldChanged()">
                                    <div class="form-check">
                                        <InputRadio class="form-check-input" Value="false" />
                                        <label class="form-check-label">Internal (via this portal)</label>
                                    </div>
                                    <div class="form-check">
                                        <InputRadio class="form-check-input" Value="true" />
                                        <label class="form-check-label">External (redirect to provider site)</label>
                                    </div>
                                </InputRadioGroup>
                            </div>

                            @if (application.IsExternalApplication)
                            {
                                <div class="mb-4 p-3 border rounded bg-light">
                                    <h6 class="fw-bold mb-2"><i class="fas fa-external-link-alt me-2"></i>External Application</h6>
                                    <label for="ExternalApplicationUrl" class="form-label">Application Link</label>
                                    <InputText id="ExternalApplicationUrl" class="form-control mb-2"
                                               @bind-Value="application.ExternalApplicationUrl"
                                               @oninput="async _ => await OnFieldChanged()"
                                               placeholder="https://provider.com/apply" />
                                    <ValidationMessage For="@(() => application.ExternalApplicationUrl)" />

                                    <div class="form-check mt-2">
                                        <InputCheckbox id="HasAppliedExternally" class="form-check-input"
                                                       @bind-Value="application.HasAppliedExternally"
                                                       @onchange="async _ => await OnFieldChanged()" />
                                        <label class="form-check-label" for="HasAppliedExternally">
                                            I confirm I have applied on the provider’s site
                                        </label>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="mb-4 p-3 border rounded bg-light">
                                    <h6 class="fw-bold mb-2"><i class="fas fa-user-edit me-2"></i>Internal Application</h6>
                                    <label for="PersonalStatement" class="form-label">Personal Statement <span class="text-danger">*</span></label>
                                    <InputTextArea id="PersonalStatement" class="form-control mb-2"
                                                   @bind-Value="application.PersonalStatement"
                                                   @oninput="async _ => await OnFieldChanged()"
                                                   rows="6"
                                                   placeholder="Explain why you deserve this scholarship..." />
                                    <ValidationMessage For="@(() => application.PersonalStatement)" />

                                    <label for="UploadedDocuments" class="form-label mt-2">Supporting Documents</label>
                                    <InputFile id="UploadedDocuments" class="form-control mb-2" OnChange="OnFilesSelected" multiple />
                                    @if (uploadedFileNames.Any())
                                    {
                                        <div class="mt-2">
                                            <strong>Selected Files:</strong>
                                            <ul class="mb-0">
                                                @foreach (var file in uploadedFileNames)
                                                {
                                                    <li>@file</li>
                                                }
                                            </ul>
                                        </div>
                                    }
                                    <ValidationMessage For="@(() => application.UploadedDocuments)" />
                                </div>
                            }

                            <div class="d-flex align-items-center mt-4">
                                <button type="submit" class="btn btn-success px-4" disabled="@isSubmitting">
                                    @if (isSubmitting)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        @:Submitting...
                                    }
                                    else
                                    {
                                        @:Submit Application
                                    }
                                </button>
                                <button type="button" class="btn btn-outline-secondary ms-3" @onclick="CancelAndClearAsync">Cancel</button>
                            </div>

                            @if (!string.IsNullOrEmpty(successMessage))
                            {
                                <div class="alert alert-success mt-4">
                                    <i class="fas fa-check-circle me-2"></i>@successMessage
                                    <div class="mt-2">
                                        @if (application.ScholarshipApplicationId > 0)
                                        {
                                            <a href="@($"/dashboard/student/applications/{application.ScholarshipApplicationId}")" class="btn btn-sm btn-outline-success">
                                                <i class="fas fa-eye me-1"></i>View Application
                                            </a>
                                        }
                                        <a href="/dashboard/student/applications" class="btn btn-sm btn-outline-secondary ms-2">
                                            <i class="fas fa-folder-open me-1"></i>View All Applications
                                        </a>
                                    </div>
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger mt-4">
                                    <i class="fas fa-exclamation-triangle me-2"></i>@errorMessage
                                </div>
                            }
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int ScholarshipId { get; set; }


    private Scholarship? scholarship;
    private ScholarshipApplication application = new();
    private bool isLoading = true;
    private bool isSubmitting = false;
    private string? successMessage;
    private string? errorMessage;
    private List<string> uploadedFileNames = new();
    private List<IBrowserFile> selectedFiles = new();
    private const string LocalStorageKey = "student-scholarship-application";

    private async Task OnFilesSelected(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles().ToList();
        uploadedFileNames = selectedFiles.Select(f => f.Name).ToList();
        await SaveFormStateAsync();
        // Files will be saved on submit
    }

    private async Task SaveFormStateAsync()
    {
        // Only save serializable data
        var state = new PersistedApplicationState
        {
            Application = application,
            UploadedFileNames = uploadedFileNames
        };
        await LocalStorage.SetItemAsync(LocalStorageKey + ScholarshipId, state);
    }

    private async Task RestoreFormStateAsync()
    {
        var state = await LocalStorage.GetItemAsync<PersistedApplicationState>(LocalStorageKey + ScholarshipId);
        if (state != null)
        {
            application = state.Application ?? new ScholarshipApplication();
            uploadedFileNames = state.UploadedFileNames ?? new List<string>();
        }
    }

    private async Task ClearFormStateAsync()
    {
        await LocalStorage.RemoveItemAsync(LocalStorageKey + ScholarshipId);
    }

    private async Task OnFieldChanged()
    {
        await SaveFormStateAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(200);

        // ✅ Include Institution when loading scholarship
        scholarship = await DbContext.Scholarships
            .Include(s => s.Institution)
            .FirstOrDefaultAsync(s => s.ScholarshipId == ScholarshipId);

        if (scholarship == null)
        {
            isLoading = false;
            return;
        }

        // Get the current user's ID from claims
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (string.IsNullOrEmpty(userId))
        {
            Navigation.NavigateTo("/login");
            return;
        }

        // Find the student's profile
        var studentProfile = await DbContext.StudentProfiles
            .FirstOrDefaultAsync(sp => sp.UserId == userId);

        if (studentProfile == null)
        {
            errorMessage = "Student profile not found. Please complete your profile first.";
            isLoading = false;
            return;
        }

        int studentId = studentProfile.StudentProfileId;

        // Try to restore form state
        await RestoreFormStateAsync();
        // If no state, initialize new application
        if (application == null || application.ScholarshipId == 0)
        {
            application = new ScholarshipApplication
            {
                ScholarshipId = scholarship.ScholarshipId,
                StudentProfileId = studentId,
                ApplicationDate = DateTime.Now
            };
        }

        isLoading = false;
    }

    private async Task HandleSubmit()
    {
        if (isSubmitting || scholarship == null)
            return;

        try
        {
            isSubmitting = true;
            errorMessage = null;

            // Minimal validation
            if (!application.IsExternalApplication && string.IsNullOrWhiteSpace(application.PersonalStatement))
            {
                errorMessage = "Personal statement is required for internal applications.";
                return;
            }

            // Save uploaded files
            var savedPaths = new List<string>();
            var uploadPath = Path.Combine("wwwroot", "uploads", "student_documents");
            Directory.CreateDirectory(uploadPath);
            foreach (var file in selectedFiles)
            {
                var uniqueName = $"{Guid.NewGuid()}_{Path.GetFileName(file.Name)}";
                var filePath = Path.Combine(uploadPath, uniqueName);
                using (var stream = File.Create(filePath))
                {
                    await file.OpenReadStream(20 * 1024 * 1024).CopyToAsync(stream); // 20MB max per file
                }
                savedPaths.Add($"/uploads/student_documents/{uniqueName}");
            }
            application.UploadedDocuments = string.Join(",", savedPaths);

            DbContext.ScholarshipApplications.Add(application);
            await DbContext.SaveChangesAsync();

            successMessage = $"✅ Application submitted successfully! Reference ID: {application.ScholarshipApplicationId}";
            uploadedFileNames.Clear();
            selectedFiles.Clear();
            await ClearFormStateAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"❌ Something went wrong: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task CancelAndClearAsync()
    {
        await ClearFormStateAsync();
        Navigation.NavigateTo("/dashboard/student/scholarships");
    }

    // Helper class for persisting state
    public class PersistedApplicationState
    {
        public ScholarshipApplication? Application { get; set; }
        public List<string>? UploadedFileNames { get; set; }
    }
}
