@page "/dashboard/student/apply/{ScholarshipId:int}"
@attribute [Authorize(Roles = "Student,SuperAdmin")]
@layout Layout.StudentDashLayout

@using c2_eskolar.Data
@using c2_eskolar.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using Blazored.LocalStorage
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthProvider
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IWebHostEnvironment Env
@inject c2_eskolar.Services.BlobStorageService BlobStorageService
@inject Microsoft.Extensions.Logging.ILogger<StudentScholarshipApplication> Logger
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime

<PageTitle>Scholarship Application</PageTitle>

<div class="container py-4" style="padding-top: 3rem !important; margin-top: 1rem;">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-lg border-0 mb-4">
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center align-items-center" style="min-height: 200px;">
                            <div class="spinner-border text-primary" role="status"></div>
                            <span class="ms-3">Loading...</span>
                        </div>
                    }
                    else if (scholarship == null)
                    {
                        <div class="alert alert-danger">Scholarship not found.</div>
                    }
                    else
                    {
                        var progress = CalculateFormProgress();
                        <div class="mb-4">
                            <h4 class="fw-bold mb-1">@scholarship.Title</h4>
                            <p class="text-muted mb-2">@scholarship.Institution?.AdminFullName</p>
                            <span class="badge bg-info text-dark mb-2">Deadline: @scholarship.ApplicationDeadline.ToString("MMMM dd, yyyy")</span>
                            <div class="mb-2"><strong>Description:</strong> @scholarship.Description</div>
                        </div>
                        <EditForm Model="application" OnValidSubmit="HandleSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <!-- Banner inside the form -->
                            <div class="sticky-top bg-white text-dark shadow-lg" style="z-index: 1030; border-bottom: 1px solid #dee2e6; width: 100vw; margin-left: calc(-50vw + 50%);">
                                <div style="width:100vw; padding:0; margin:0;">
                                    <div class="text-center" style="padding-top: 24px; padding-bottom: 8px;">
                                        <div class="d-inline-flex align-items-center bg-primary rounded-pill px-4 py-2" style="margin-bottom: 0;">
                                            <i class="fas fa-graduation-cap fs-4 me-3 text-warning"></i>
                                            <div>
                                                <h2 class="mb-0 fw-bold text-dark">Scholarship Application</h2>
                                                <small class="text-secondary d-block">
                                                    @if (progress == 0)
                                                    {
                                                        @:Complete your application form below
                                                    }
                                                    else if (progress < 100)
                                                    {
                                                        @:Application @progress% complete
                                                    }
                                                    else
                                                    {
                                                        <span class="text-warning fw-bold">✓ Application Ready to Submit!</span>
                                                    }
                                                </small>
                                            </div>
                                            <i class="fas fa-file-signature fs-4 ms-3 text-warning"></i>
                                        </div>
                                    </div>
                                    <!-- Form Progress Indicator -->
                                    <div style="width:100vw; padding:0; margin:0;">
                                        <div class="progress bg-light" style="height: 4px; margin:0;">
                                            <div id="form-progress-bar" class="progress-bar bg-warning" role="progressbar" 
                                                 style="width: @progress%; transition: width 0.3s ease;" 
                                                 aria-valuenow="@progress" aria-valuemin="0" aria-valuemax="100"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Form fields section -->
                            <div class="mt-4">
                                <!-- Application Type Selection -->
                                <div class="mb-4">
                                    <div class="form-check form-switch mb-3">
                                        <input class="form-check-input" type="checkbox" id="isExternalApplication" @bind="application.IsExternalApplication" @bind:after="OnFieldChanged">
                                        <label class="form-check-label fw-bold" for="isExternalApplication">
                                            External Application (Apply through institution's own system)
                                        </label>
                                    </div>
                                </div>

                                @if (application.IsExternalApplication)
                                {
                                    <!-- External Application Fields -->
                                    <div class="mb-4">
                                        <label for="externalUrl" class="form-label fw-bold">External Application URL <span class="text-danger">*</span></label>
                                        <input type="url" class="form-control" id="externalUrl" @bind="application.ExternalApplicationUrl" @bind:after="OnFieldChanged" 
                                               placeholder="https://institution.edu/apply/scholarship-123" required />
                                        <div class="form-text">Please provide the direct link to the external application form</div>
                                        <ValidationMessage For="@(() => application.ExternalApplicationUrl)" />
                                    </div>

                                    <div class="mb-4">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="hasAppliedExternally" @bind="application.HasAppliedExternally" @bind:after="OnFieldChanged" required>
                                            <label class="form-check-label" for="hasAppliedExternally">
                                                <span class="text-danger">*</span> I confirm that I have already submitted my application through the external system
                                            </label>
                                        </div>
                                        <ValidationMessage For="@(() => application.HasAppliedExternally)" />
                                    </div>
                                }
                                else
                                {
                                    <!-- Internal Application Fields -->
                                    <div class="mb-4">
                                        <label for="personalStatement" class="form-label fw-bold">Personal Statement <span class="text-danger">*</span></label>
                                        <textarea class="form-control" id="personalStatement" rows="6" @bind="application.PersonalStatement" @bind:after="OnFieldChanged" 
                                                  placeholder="Tell us about yourself, your academic goals, and why you deserve this scholarship..." required></textarea>
                                        <div class="form-text">Minimum 100 words recommended</div>
                                        <ValidationMessage For="@(() => application.PersonalStatement)" />
                                    </div>
                                }

                                <!-- GWA Field (Always Required) -->
                                <div class="mb-4">
                                    <label for="gwa" class="form-label fw-bold">General Weighted Average (GWA) <span class="text-danger">*</span></label>
                                    <input type="number" step="0.01" min="1.00" max="4.00" class="form-control" id="gwa" @bind="application.GWA" @bind:after="OnFieldChanged" 
                                           placeholder="1.00 - 4.00" required />
                                    <div class="form-text">Enter your current GWA (1.00 = highest, 4.00 = lowest)</div>
                                    <ValidationMessage For="@(() => application.GWA)" />
                                </div>

                                @if (!application.IsExternalApplication)
                                {
                                    <!-- Optional Grade Details for Internal Applications -->
                                    <div class="mb-4">
                                        <label for="firstSemGrades" class="form-label fw-bold">First Semester Grades (Optional)</label>
                                        <textarea class="form-control" id="firstSemGrades" rows="4" @bind="application.FirstSemesterGrades" @bind:after="OnFieldChanged" 
                                                  placeholder="List your first semester subjects and grades..."></textarea>
                                        <ValidationMessage For="@(() => application.FirstSemesterGrades)" />
                                    </div>

                                    <div class="mb-4">
                                        <label for="secondSemGrades" class="form-label fw-bold">Second Semester Grades (Optional)</label>
                                        <textarea class="form-control" id="secondSemGrades" rows="4" @bind="application.SecondSemesterGrades" @bind:after="OnFieldChanged" 
                                                  placeholder="List your second semester subjects and grades..."></textarea>
                                        <ValidationMessage For="@(() => application.SecondSemesterGrades)" />
                                    </div>

                                    <!-- File Upload Section -->
                                    <div class="mb-4">
                                        <label class="form-label fw-bold">Supporting Documents (Optional)</label>
                                        <div class="border rounded p-3" style="border-style: dashed !important;">
                                            <InputFile OnChange="OnFileSelected" class="form-control" multiple accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" />
                                            <div class="form-text">
                                                Upload transcripts, certificates, or other supporting documents. 
                                                Supported formats: PDF, DOC, DOCX, JPG, PNG. Max file size: 10MB each, total: 50MB.
                                            </div>
                                        </div>
                                        @if (selectedFiles.Any())
                                        {
                                            <div class="mt-3">
                                                <h6>Selected Files:</h6>
                                                @foreach (var file in selectedFiles)
                                                {
                                                    <div class="d-flex align-items-center justify-content-between border rounded p-2 mb-2">
                                                        <div>
                                                            <i class="fas fa-file me-2"></i>
                                                            <span>@file.Name</span>
                                                            <small class="text-muted ms-2">(@(file.Size / 1024) KB)</small>
                                                            @if (processingFiles.Contains(file.Name))
                                                            {
                                                                <span class="badge bg-warning ms-2">Processing...</span>
                                                            }
                                                        </div>
                                                        <button type="button" class="btn btn-sm btn-outline-danger" @onclick="() => RemoveFile(file)">
                                                            <i class="fas fa-times"></i>
                                                        </button>
                                                    </div>
                                                    @if (uploadProgress.ContainsKey(file.Name) && uploadProgress[file.Name] > 0)
                                                    {
                                                        <div class="progress mb-2" style="height: 4px;">
                                                            <div class="progress-bar" role="progressbar" style="width: @(uploadProgress[file.Name])%"></div>
                                                        </div>
                                                    }
                                                }
                                            </div>
                                        }
                                    </div>
                                    <ValidationMessage For="@(() => application.UploadedDocuments)" />

                                    <!-- Extracted Grades & Confidence Feedback -->
                                    @if (!string.IsNullOrWhiteSpace(application.FirstSemesterGrades) || !string.IsNullOrWhiteSpace(application.SecondSemesterGrades) || application.GWA != null)
                                    {
                                        <div class="alert alert-info mt-3">
                                            <i class="fas fa-robot me-2"></i>
                                            <strong>AI Extracted Grades:</strong>
                                            <ul class="mb-1">
                                                @if (application.GWA != null)
                                                {
                                                    <li><strong>GWA:</strong> @application.GWA</li>
                                                }
                                                @if (!string.IsNullOrWhiteSpace(application.FirstSemesterGrades))
                                                {
                                                    <li><strong>1st Semester Grades:</strong> <pre class="mb-0">@application.FirstSemesterGrades</pre></li>
                                                }
                                                @if (!string.IsNullOrWhiteSpace(application.SecondSemesterGrades))
                                                {
                                                    <li><strong>2nd Semester Grades:</strong> <pre class="mb-0">@application.SecondSemesterGrades</pre></li>
                                                }
                                            </ul>
                                            <span class="text-muted small">If the extracted grades are incorrect or incomplete, please review and manually correct them above before submitting.</span>
                                        </div>
                                    }
                                }

                                <div class="d-flex align-items-center mt-4">
                                    <button type="submit" class="btn btn-success px-4" disabled="@(!IsFormValid() || isSubmitting)">
                                        @if (isSubmitting)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                            @:Submitting...
                                        }
                                        else
                                        {
                                            @:Submit Application
                                        }
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary ms-3" @onclick="CancelAndClearAsync">Cancel</button>
                                </div>

                                @if (!string.IsNullOrEmpty(successMessage))
                                {
                                    <div class="alert alert-success mt-4">
                                        <i class="fas fa-check-circle me-2"></i>@successMessage
                                        <div class="mt-2">
                                            @if (application.ScholarshipApplicationId != Guid.Empty)
                                            {
                                                <a href="/dashboard/student/applications" class="btn btn-sm btn-outline-secondary ms-2">
                                                    View My Applications
                                                </a>
                                            }
                                        </div>
                                        @if (!string.IsNullOrWhiteSpace(application.FirstSemesterGrades) || !string.IsNullOrWhiteSpace(application.SecondSemesterGrades) || application.GWA != null)
                                        {
                                            <div class="mt-2">
                                                <span class="text-muted small"><i class="fas fa-robot me-1"></i>AI grade extraction was used. Please verify your grades above.</span>
                                            </div>
                                        }
                                    </div>
                                }

                                @if (showSubmittedModal)
                                {
                                    <div style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.5); z-index: 1050; display: flex; align-items: center; justify-content: center;">
                                        <div class="modal-dialog modal-dialog-centered" style="z-index: 1060; max-width: 400px; width: 100%;">
                                            <div class="modal-content" style="background: #fff; border-radius: 12px; box-shadow: 0 8px 32px rgba(0,0,0,0.25); overflow: hidden;">
                                                <div class="modal-header bg-success text-white border-0" style="padding: 2rem 2rem 1rem;">
                                                    <div class="text-center w-100">
                                                        <i class="fas fa-check-circle fa-3x mb-3"></i>
                                                        <h4 class="mb-0">Application Submitted!</h4>
                                                    </div>
                                                </div>
                                                <div class="modal-body text-center" style="padding: 1rem 2rem 2rem;">
                                                    <p class="mb-3">Your scholarship application has been successfully submitted.</p>
                                                    <p class="text-muted small">You will receive updates via email regarding your application status.</p>
                                                    <button type="button" class="btn btn-success px-4 mt-2" @onclick="CloseSubmittedModal">
                                                        Continue to Dashboard
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(errorMessage))
                                {
                                    <div class="alert alert-danger mt-4">
                                        <i class="fas fa-exclamation-triangle me-2"></i>@errorMessage
                                    </div>
                                }
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // Component parameters
    [Parameter] public int ScholarshipId { get; set; }

    // Private fields
    private Scholarship? scholarship;
    private ScholarshipApplication application = new();
    private bool isLoading = true;
    private bool isSubmitting = false;
    private string? errorMessage;
    private string? successMessage;
    private bool showSubmittedModal = false;
    private List<IBrowserFile> selectedFiles = new();
    private List<string> uploadedFileNames = new();
    private Dictionary<string, int> uploadProgress = new();
    private HashSet<string> processingFiles = new();
    private CancellationTokenSource? debounceCts;

    // File upload constraints
    private readonly string[] allowedExtensions = { ".pdf", ".doc", ".docx", ".jpg", ".jpeg", ".png" };
    private readonly long perFileMaxBytes = 10 * 1024 * 1024; // 10MB per file
    private readonly long totalMaxBytes = 50 * 1024 * 1024; // 50MB total
    private readonly string LocalStorageKey = "scholarship_application_draft_";

    private void RemoveFile(IBrowserFile fileToRemove)
    {
        selectedFiles.Remove(fileToRemove);
        uploadedFileNames.Remove(fileToRemove.Name);
        uploadProgress.Remove(fileToRemove.Name);
        processingFiles.Remove(fileToRemove.Name);
        _ = DebouncedSaveFormStateAsync();
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        errorMessage = null;
        var validFiles = new List<IBrowserFile>();
        var validFileNames = new List<string>();
        var existingNames = uploadedFileNames.ToHashSet(StringComparer.OrdinalIgnoreCase);
        
        long currentTotal = selectedFiles.Sum(f => f.Size);
        
        foreach (var file in e.GetMultipleFiles(10))
        {
            var ext = Path.GetExtension(file.Name).ToLowerInvariant();
            if (!allowedExtensions.Contains(ext))
            {
                errorMessage = $"File '{file.Name}' has unsupported format. Allowed: {string.Join(", ", allowedExtensions)}";
                StateHasChanged();
                return;
            }

            if (file.Size > perFileMaxBytes)
            {
                errorMessage = $"File '{file.Name}' exceeds the maximum size of {perFileMaxBytes / (1024 * 1024)} MB.";
                StateHasChanged();
                return;
            }

            if (currentTotal + file.Size > totalMaxBytes)
            {
                errorMessage = $"Adding '{file.Name}' would exceed the total upload size limit of {totalMaxBytes / (1024 * 1024)} MB.";
                StateHasChanged();
                return;
            }

            if (existingNames.Contains(file.Name) || validFileNames.Contains(file.Name))
            {
                errorMessage = $"File '{file.Name}' is already selected. Please choose unique files.";
                StateHasChanged();
                return;
            }

            currentTotal += file.Size;
            validFiles.Add(file);
            validFileNames.Add(file.Name);
        }

        // Add new valid files to the existing selection
        selectedFiles.AddRange(validFiles);
        uploadedFileNames.AddRange(validFileNames);
        errorMessage = null;

        // Persist a minimal safe state
        await DebouncedSaveFormStateAsync();
        
        // Automatically trigger OCR for the newly uploaded files
        if (validFiles.Any())
        {
            _ = Task.Run(async () => await TriggerOcrForFilesAsync(validFiles));
        }
    }

    private async Task SaveFormStateAsync()
    {
        // Persist only safe, non-PII fields
        var state = new PersistedApplicationState
        {
            PersonalStatement = application?.PersonalStatement,
            FirstSemesterGrades = application?.FirstSemesterGrades,
            SecondSemesterGrades = application?.SecondSemesterGrades,
            GWA = application?.GWA,
            IsExternalApplication = application?.IsExternalApplication,
            ExternalApplicationUrl = application?.ExternalApplicationUrl,
            HasAppliedExternally = application?.HasAppliedExternally,
            UploadedFileNames = uploadedFileNames
        };
        try
        {
            await LocalStorage.SetItemAsync(LocalStorageKey + ScholarshipId, state);
            Logger?.LogDebug("Saved application draft for scholarship {ScholarshipId}", ScholarshipId);
        }
        catch (Exception ex)
        {
            // Do not surface LocalStorage errors to users; log and continue
            Logger?.LogWarning(ex, "Failed to persist application draft for scholarship {ScholarshipId}", ScholarshipId);
        }
    }

    private async Task DebouncedSaveFormStateAsync(int delayMs = 800)
    {
        try
        {
            debounceCts?.Cancel();
        }
        catch { }
        debounceCts = new CancellationTokenSource();
        var token = debounceCts.Token;
        try
        {
            await Task.Delay(delayMs, token);
            if (!token.IsCancellationRequested)
            {
                await InvokeAsync(SaveFormStateAsync);
            }
        }
        catch (TaskCanceledException) { }
    }

    private async Task RestoreFormStateAsync()
    {
        try
        {
            var state = await LocalStorage.GetItemAsync<PersistedApplicationState>(LocalStorageKey + ScholarshipId);
            if (state != null)
            {
                // Restore only non-PII fields
                application.PersonalStatement = state.PersonalStatement ?? application.PersonalStatement;
                application.FirstSemesterGrades = state.FirstSemesterGrades ?? application.FirstSemesterGrades;
                application.SecondSemesterGrades = state.SecondSemesterGrades ?? application.SecondSemesterGrades;
                application.GWA = state.GWA ?? application.GWA;
                application.IsExternalApplication = state.IsExternalApplication ?? application.IsExternalApplication;
                application.ExternalApplicationUrl = state.ExternalApplicationUrl ?? application.ExternalApplicationUrl;
                application.HasAppliedExternally = state.HasAppliedExternally ?? application.HasAppliedExternally;
                uploadedFileNames = state.UploadedFileNames ?? new List<string>();
            }
        }
        catch (Exception ex)
        {
            Logger?.LogWarning(ex, "Failed to restore application draft for scholarship {ScholarshipId}", ScholarshipId);
        }
    }

    private async Task ClearFormStateAsync()
    {
        await LocalStorage.RemoveItemAsync(LocalStorageKey + ScholarshipId);
    }

    private async Task OnFieldChanged()
    {
        await DebouncedSaveFormStateAsync();
        await InvokeAsync(StateHasChanged); // Update progress bar
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(200);

        // ✅ Include Institution when loading scholarship
        scholarship = await DbContext.Scholarships
            .Include(s => s.Institution)
            .FirstOrDefaultAsync(s => s.ScholarshipId == ScholarshipId);

        if (scholarship == null)
        {
            isLoading = false;
            return;
        }

        // Get the current user's ID from claims
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (string.IsNullOrEmpty(userId))
        {
            Navigation.NavigateTo("/login");
            return;
        }

        // Find the student's profile
        var studentProfile = await DbContext.StudentProfiles
            .FirstOrDefaultAsync(sp => sp.UserId == userId);

        if (studentProfile == null)
        {
            errorMessage = "Student profile not found. Please complete your profile first.";
            isLoading = false;
            return;
        }

    Guid studentId = studentProfile.StudentProfileId;

        // Try to restore form state
        await RestoreFormStateAsync();
        // If no state, initialize new application
        if (application == null || application.ScholarshipId == 0)
        {
            application = new ScholarshipApplication
            {
                ScholarshipId = scholarship.ScholarshipId,
                StudentProfileId = studentId,
                ApplicationDate = DateTime.Now
            };
        }

        isLoading = false;
    }

    private async Task HandleSubmit()
    {
        if (isSubmitting || scholarship == null)
            return;

        try
        {
            Logger?.LogInformation("Starting submission for scholarship {ScholarshipId} by student {StudentProfileId}", ScholarshipId, application.StudentProfileId);
            isSubmitting = true;
            errorMessage = null;
            uploadProgress.Clear();

            // Minimal validation
            if (!application.IsExternalApplication && string.IsNullOrWhiteSpace(application.PersonalStatement))
            {
                errorMessage = "Personal statement is required for internal applications.";
                return;
            }

            // Prevent duplicate applications
            var exists = await DbContext.ScholarshipApplications
                .AnyAsync(a => a.ScholarshipId == application.ScholarshipId && a.StudentProfileId == application.StudentProfileId);
            if (exists)
            {
                Logger?.LogWarning("Duplicate application prevented for scholarship {ScholarshipId} student {StudentProfileId}", ScholarshipId, application.StudentProfileId);
                errorMessage = "You have already applied to this scholarship.";
                return;
            }

            // Save uploaded files to Azure Blob Storage in parallel
            var savedUrls = new List<string>();
            long accumulated = 0;
            var uploadTasks = new List<Task>();
            var urlResults = new Dictionary<string, string>();
            var sizeResults = new Dictionary<string, long>();

            foreach (var file in selectedFiles)
            {
                var ext = Path.GetExtension(file.Name).ToLowerInvariant();
                if (!allowedExtensions.Contains(ext))
                    throw new InvalidOperationException($"Unsupported file type: {ext}");

                if (file.Size > perFileMaxBytes)
                    throw new InvalidOperationException($"File {file.Name} exceeds per-file size limit.");

                if (accumulated + file.Size > totalMaxBytes)
                    throw new InvalidOperationException($"Total upload size exceeds limit.");

                accumulated += file.Size;

                uploadTasks.Add(Task.Run(async () =>
                {
                    var uniqueName = $"{Guid.NewGuid()}_{Path.GetFileName(file.Name)}";
                    try
                    {
                        await using var stream = file.OpenReadStream(perFileMaxBytes);
                        var buffer = new byte[81920];
                        long totalRead = 0;
                        using (var ms = new MemoryStream())
                        {
                            int read;
                            do
                            {
                                read = await stream.ReadAsync(buffer, 0, buffer.Length);
                                if (read > 0)
                                {
                                    await ms.WriteAsync(buffer, 0, read);
                                    totalRead += read;
                                    int percent = (int)(100.0 * totalRead / file.Size);
                                    uploadProgress[file.Name] = percent > 100 ? 100 : percent;
                                    await InvokeAsync(StateHasChanged);
                                }
                            } while (read > 0);
                            ms.Position = 0;
                            var url = await BlobStorageService.UploadDocumentAsync(ms, uniqueName, file.ContentType);
                            urlResults[file.Name] = url;
                            sizeResults[file.Name] = file.Size;
                            uploadProgress[file.Name] = 100;
                            await InvokeAsync(StateHasChanged);
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger?.LogError(ex, "Failed uploading file {FileName} to Azure Blob Storage for scholarship {ScholarshipId}", file.Name, ScholarshipId);
                        errorMessage = $"Error uploading document '{file.Name}': {ex.Message}";
                        await InvokeAsync(StateHasChanged);
                        throw;
                    }
                }));
            }

            await Task.WhenAll(uploadTasks);
            savedUrls.AddRange(urlResults.Values);

            // Store the blob URLs (or you can store uniqueName if you want to keep it private)
            application.UploadedDocuments = string.Join(",", savedUrls);

            DbContext.ScholarshipApplications.Add(application);
            await DbContext.SaveChangesAsync();

            successMessage = $"Application submitted successfully! Reference ID: {application.ScholarshipApplicationId}";
            uploadedFileNames.Clear();
            selectedFiles.Clear();
            await ClearFormStateAsync();
            showSubmittedModal = true;
        }
        catch (InvalidOperationException ioe)
        {
            Logger?.LogWarning(ioe, "Validation/upload error during application submit for scholarship {ScholarshipId}", ScholarshipId);
            errorMessage = ioe.Message;
        }
        catch (Exception ex)
        {
            Logger?.LogError(ex, "Unhandled error during application submit for scholarship {ScholarshipId}", ScholarshipId);
            errorMessage = "Something went wrong while submitting your application. Please try again later.";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    // Automatically trigger OCR for specific files
    private async Task TriggerOcrForFilesAsync(List<IBrowserFile> filesToProcess)
    {
        if (!filesToProcess.Any())
            return;
        
        try
        {
            await InvokeAsync(() =>
            {
                errorMessage = null;
                successMessage = "🔄 Processing uploaded documents with Azure Document Intelligence...";
                StateHasChanged();
            });
            
            bool foundGwa = false;
            
            foreach (var file in filesToProcess)
            {
                // Mark file as processing
                await InvokeAsync(() =>
                {
                    processingFiles.Add(file.Name);
                    StateHasChanged();
                });
                
                try
                {
                    Logger?.LogInformation("Starting automatic OCR processing for file {FileName}", file.Name);
                    
                    await using var stream = file.OpenReadStream(perFileMaxBytes);
                    using var ms = new MemoryStream();
                    await stream.CopyToAsync(ms);
                    ms.Position = 0;
                    
                    var extractedData = await ExtractGradesFromDocumentAsync(ms, file.Name, file.ContentType);
                    
                    bool foundAnyData = false;
                    var extractedItems = new List<string>();
                    
                    if (!string.IsNullOrWhiteSpace(extractedData.GWA) && double.TryParse(extractedData.GWA, out var gwaValue))
                    {
                        await InvokeAsync(() =>
                        {
                            application.GWA = gwaValue;
                            StateHasChanged();
                        });
                        extractedItems.Add($"GWA: {gwaValue}");
                        foundAnyData = true;
                    }
                    
                    if (!string.IsNullOrWhiteSpace(extractedData.FirstSemesterGrades))
                    {
                        await InvokeAsync(() =>
                        {
                            application.FirstSemesterGrades = extractedData.FirstSemesterGrades;
                            StateHasChanged();
                        });
                        extractedItems.Add($"1st Semester: {extractedData.FirstSemesterGrades.Substring(0, Math.Min(50, extractedData.FirstSemesterGrades.Length))}...");
                        foundAnyData = true;
                    }
                    
                    if (!string.IsNullOrWhiteSpace(extractedData.SecondSemesterGrades))
                    {
                        await InvokeAsync(() =>
                        {
                            application.SecondSemesterGrades = extractedData.SecondSemesterGrades;
                            StateHasChanged();
                        });
                        extractedItems.Add($"2nd Semester: {extractedData.SecondSemesterGrades.Substring(0, Math.Min(50, extractedData.SecondSemesterGrades.Length))}...");
                        foundAnyData = true;
                    }
                    
                    if (foundAnyData)
                    {
                        await InvokeAsync(() =>
                        {
                            successMessage = $"✅ Data extracted successfully from '{file.Name}': {string.Join(", ", extractedItems)}";
                            StateHasChanged();
                        });
                        foundGwa = true;
                        
                        await InvokeAsync(OnFieldChanged); // Save the updated data to localStorage
                        Logger?.LogInformation("Successfully extracted data from {FileName}: {ExtractedItems}", file.Name, string.Join(", ", extractedItems));
                        break; // Stop after finding valid data
                    }
                    else
                    {
                        Logger?.LogInformation("No grade data found in document {FileName}", file.Name);
                    }
                }
                catch (Exception ex)
                {
                    Logger?.LogError(ex, "Error during automatic OCR processing for file {FileName}", file.Name);
                    await InvokeAsync(() =>
                    {
                        errorMessage = $"❌ Error processing '{file.Name}': {ex.Message}";
                        StateHasChanged();
                    });
                    break; // Stop processing on error
                }
                finally
                {
                    // Remove file from processing status
                    await InvokeAsync(() =>
                    {
                        processingFiles.Remove(file.Name);
                        StateHasChanged();
                    });
                }
            }
            
            if (!foundGwa && string.IsNullOrEmpty(errorMessage))
            {
                await InvokeAsync(() =>
                {
                    successMessage = "📄 Documents processed successfully. If grade information wasn't extracted, please ensure your documents contain clear GWA or semester grades.";
                    StateHasChanged();
                });
            }
        }
        catch (Exception ex)
        {
            Logger?.LogError(ex, "Error during automatic OCR processing");
            await InvokeAsync(() =>
            {
                errorMessage = $"❌ Error during document processing: {ex.Message}";
                StateHasChanged();
            });
        }
    }
    
    // Keep the manual trigger method for backward compatibility (if needed elsewhere)
    private async Task TriggerOcrAsync()
    {
        await TriggerOcrForFilesAsync(selectedFiles);
    }

    private void CloseSubmittedModal()
    {
        showSubmittedModal = false;
        Navigation.NavigateTo("/dashboard/student");
    }

    private async Task CancelAndClearAsync()
    {
        await ClearFormStateAsync();
        Navigation.NavigateTo("/dashboard/student/scholarships");
    }

    // Helper class for persisting state
    public class PersistedApplicationState
    {
        // Only non-PII fields
        public string? PersonalStatement { get; set; }
        public string? FirstSemesterGrades { get; set; }
        public string? SecondSemesterGrades { get; set; }
    public double? GWA { get; set; }
        public bool? IsExternalApplication { get; set; }
        public string? ExternalApplicationUrl { get; set; }
        public bool? HasAppliedExternally { get; set; }
        public List<string>? UploadedFileNames { get; set; }
    }

    private bool IsFormValid()
    {
        if (scholarship == null || application == null)
            return false;

        // Always required fields
        if (string.IsNullOrWhiteSpace(application.StudentId?.ToString()))
            return false;
        if (application.GWA == null || application.GWA <= 0)
            return false;

        // Internal application
        if (!application.IsExternalApplication)
        {
            if (string.IsNullOrWhiteSpace(application.PersonalStatement))
                return false;
            // Optionally require at least one file
            // if (selectedFiles.Count == 0) return false;
        }
        else // External application
        {
            if (string.IsNullOrWhiteSpace(application.ExternalApplicationUrl))
                return false;
            if (!application.HasAppliedExternally)
                return false;
        }
        return true;
    }

    private async Task<ExtractedGradeData> ExtractGradesFromDocumentAsync(Stream fileStream, string fileName, string contentType)
    {
        // Read endpoint and key from configuration
        string endpoint = Configuration["AzureDocumentIntelligence:Endpoint"] ?? "";
        string apiKey = Configuration["AzureDocumentIntelligence:ApiKey"] ?? "";
        string modelId = "prebuilt-layout"; // Use layout model for table extraction

        if (string.IsNullOrEmpty(endpoint) || string.IsNullOrEmpty(apiKey))
        {
            Logger?.LogWarning("Azure Document Intelligence not configured properly. Endpoint: {Endpoint}, ApiKey: {ApiKeyStatus}", endpoint ?? "NULL", string.IsNullOrEmpty(apiKey) ? "MISSING" : "PROVIDED");
            throw new InvalidOperationException("Azure Document Intelligence is not configured. Please check your appsettings.json file and ensure both 'AzureDocumentIntelligence:Endpoint' and 'AzureDocumentIntelligence:ApiKey' are set.");
        }
        if (!endpoint.StartsWith("https://") || !endpoint.Contains(".cognitiveservices.azure.com"))
        {
            Logger?.LogWarning("Azure Document Intelligence endpoint appears to be invalid: {Endpoint}", endpoint);
            throw new InvalidOperationException($"Invalid endpoint format: {endpoint}. Expected format: https://your-resource.cognitiveservices.azure.com/");
        }

        try
        {
            using var httpClient = new HttpClient();
            httpClient.Timeout = TimeSpan.FromMinutes(5);
            httpClient.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", apiKey);

            var cleanEndpoint = endpoint.TrimEnd('/');
            // Enable high-res OCR and font/style extraction
            var url = $"{cleanEndpoint}/formrecognizer/documentModels/{modelId}:analyze?api-version=2023-07-31&features=ocrHighResolution,styleFont";

            var fileBytes = new byte[fileStream.Length];
            fileStream.Position = 0;
            await fileStream.ReadExactlyAsync(fileBytes);
            using var httpContent = new ByteArrayContent(fileBytes);
            httpContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(contentType);

            Logger?.LogInformation("Sending document {FileName} ({ContentType}, {Size} bytes) to Azure Document Intelligence at {Url}", fileName, contentType, fileBytes.Length, url);
            var response = await httpClient.PostAsync(url, httpContent);
            var responseContent = await response.Content.ReadAsStringAsync();

            if (!response.IsSuccessStatusCode)
            {
                Logger?.LogError("Azure Document Intelligence API error. Status: {StatusCode}, Response: {Response}", response.StatusCode, responseContent);
                throw new InvalidOperationException($"Document Intelligence API error: {response.StatusCode} - {responseContent}");
            }

            // Handle async processing (202 Accepted response)
            if (response.StatusCode == System.Net.HttpStatusCode.Accepted)
            {
                var operationLocation = response.Headers.GetValues("Operation-Location").FirstOrDefault();
                if (!string.IsNullOrEmpty(operationLocation))
                {
                    for (int i = 0; i < 30; i++)
                    {
                        await Task.Delay(10000);
                        var pollResponse = await httpClient.GetAsync(operationLocation);
                        var pollContent = await pollResponse.Content.ReadAsStringAsync();
                        if (pollResponse.IsSuccessStatusCode && !string.IsNullOrWhiteSpace(pollContent))
                        {
                            using var pollDoc = System.Text.Json.JsonDocument.Parse(pollContent);
                            var status = pollDoc.RootElement.GetProperty("status").GetString();
                            if (status == "succeeded")
                            {
                                responseContent = pollContent;
                                break;
                            }
                            else if (status == "failed")
                            {
                                throw new InvalidOperationException("Document processing failed on Azure side.");
                            }
                        }
                    }
                }
            }

            if (string.IsNullOrWhiteSpace(responseContent))
            {
                Logger?.LogWarning("Azure Document Intelligence returned empty response for {FileName}. Status: {StatusCode}", fileName, response.StatusCode);
                return ExtractGradesFromSimpleTextSearch(fileName);
            }

            Logger?.LogDebug("Document Intelligence response for {FileName} (first 500 chars): {Response}", fileName, responseContent.Length > 500 ? responseContent.Substring(0, 500) + "..." : responseContent);

            // Parse JSON to extract grades from tables and text
            using var doc = System.Text.Json.JsonDocument.Parse(responseContent);
            var root = doc.RootElement;
            var result = new ExtractedGradeData();
            double? gwaValue = null;
            string? firstSemGrades = null;
            string? secondSemGrades = null;
            bool foundTableGrades = false;

            // Try to extract tables
            if (root.TryGetProperty("analyzeResult", out var analyzeResult) && analyzeResult.TryGetProperty("tables", out var tablesElem))
            {
                foreach (var table in tablesElem.EnumerateArray())
                {
                    // Use confidence score to filter
                    double tableConfidence = table.TryGetProperty("confidence", out var confElem) ? confElem.GetDouble() : 0.0;
                    if (tableConfidence < 0.7) continue; // skip low-confidence tables
                    var rows = table.GetProperty("rows");
                    foreach (var row in rows.EnumerateArray())
                    {
                        double rowConfidence = row.TryGetProperty("confidence", out var rConfElem) ? rConfElem.GetDouble() : 0.0;
                        if (rowConfidence < 0.7) continue; // skip low-confidence rows
                        var cells = row.GetProperty("cells");
                        foreach (var cell in cells.EnumerateArray())
                        {
                            double cellConfidence = cell.TryGetProperty("confidence", out var cConfElem) ? cConfElem.GetDouble() : 0.0;
                            if (cellConfidence < 0.7) continue; // skip low-confidence cells
                            var cellText = cell.GetProperty("content").GetString() ?? "";
                            // Try to match GWA or semester grades
                            if (cellText.ToLower().Contains("gwa") || cellText.ToLower().Contains("gpa"))
                            {
                                var match = System.Text.RegularExpressions.Regex.Match(cellText, @"([0-9]+\.[0-9]+)");
                                if (match.Success && double.TryParse(match.Groups[1].Value, out var val))
                                {
                                    gwaValue = val;
                                    foundTableGrades = true;
                                }
                            }
                            if (cellText.ToLower().Contains("1st semester") || cellText.ToLower().Contains("first semester") || cellText.ToLower().Contains("fall semester"))
                            {
                                firstSemGrades = (firstSemGrades ?? "") + cellText + "\n";
                                foundTableGrades = true;
                            }
                            if (cellText.ToLower().Contains("2nd semester") || cellText.ToLower().Contains("second semester") || cellText.ToLower().Contains("spring semester"))
                            {
                                secondSemGrades = (secondSemGrades ?? "") + cellText + "\n";
                                foundTableGrades = true;
                            }
                        }
                    }
                }
            }

            // If table grades found, use them
            if (foundTableGrades)
            {
                result.GWA = gwaValue?.ToString();
                result.FirstSemesterGrades = firstSemGrades;
                result.SecondSemesterGrades = secondSemGrades;
                Logger?.LogInformation("Extracted grades from tables: GWA={GWA}, 1st={First}, 2nd={Second}", result.GWA, result.FirstSemesterGrades, result.SecondSemesterGrades);
                return result;
            }

            // Fallback: extract from text as before
            var allText = "";
            if (root.TryGetProperty("analyzeResult", out var analyzeResult2) && analyzeResult2.TryGetProperty("content", out var content))
            {
                allText = content.GetString() ?? "";
            }
            // ...existing regex extraction logic for GWA and semester grades...
            // (reuse your previous regex logic here)
            var gwaPatterns = new[]
            {
                @"GWA[:\s]*([0-9]+\.[0-9]+)",
                @"General\s+Weighted\s+Average[:\s]*([0-9]+\.[0-9]+)",
                @"Average[:\s]*([0-9]+\.[0-9]+)",
                @"GPA[:\s]*([0-9]+\.[0-9]+)",
                @"([0-9]+\.[0-9]+).*GWA",
                @"Grade.*Point.*Average[:\s]*([0-9]+\.[0-9]+)"
            };
            foreach (var pattern in gwaPatterns)
            {
                var regex = new System.Text.RegularExpressions.Regex(pattern, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                var match = regex.Match(allText);
                if (match.Success)
                {
                    result.GWA = match.Groups[1].Value;
                    break;
                }
            }
            // ...existing regex logic for semester grades...
            // (reuse your previous regex logic for first/second semester)
            // If nothing found, fallback
            if (string.IsNullOrEmpty(result.GWA) && string.IsNullOrEmpty(result.FirstSemesterGrades) && string.IsNullOrEmpty(result.SecondSemesterGrades))
            {
                Logger?.LogInformation("No grades found in document, using fallback.");
                return ExtractGradesFromSimpleTextSearch(fileName);
            }
            return result;
        }
        catch (System.Text.Json.JsonException ex)
        {
            Logger?.LogError(ex, "Failed to parse JSON response from Document Intelligence for {FileName}", fileName);
            throw new InvalidOperationException($"Invalid response from Document Intelligence service: {ex.Message}");
        }
        catch (HttpRequestException ex)
        {
            Logger?.LogError(ex, "HTTP error calling Document Intelligence for {FileName}", fileName);
            throw new InvalidOperationException($"Network error calling Document Intelligence: {ex.Message}");
        }
    }

    // Helper class for extracted grade data
    public class ExtractedGradeData
    {
        public string? GWA { get; set; }
        public string? FirstSemesterGrades { get; set; }
        public string? SecondSemesterGrades { get; set; }
    }

    // Helper method to clean semester grades text and show only the actual grades
    private string CleanSemesterGradesText(string rawText, string semesterType)
    {
        if (string.IsNullOrWhiteSpace(rawText))
            return "";

        // Extract all numerical grade values from the text
        var numericalGrades = new List<string>();
        
        // First, try to extract grades from structured lines (course + grade format)
        var lines = rawText.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
        
        foreach (var line in lines)
        {
            var trimmedLine = line.Trim();
            
            // Skip empty lines and obvious headers
            if (string.IsNullOrWhiteSpace(trimmedLine) || IsHeaderLine(trimmedLine))
                continue;
            
            // Extract numerical grades from the line
            var gradesInLine = ExtractNumericalGrades(trimmedLine);
            numericalGrades.AddRange(gradesInLine);
        }
        
        // If no structured grades found, try to extract any numerical values that look like grades
        if (!numericalGrades.Any())
        {
            var gradeMatches = System.Text.RegularExpressions.Regex.Matches(rawText, 
                @"\b([0-4]\.\d{1,2}|[0-4]\.?\d*|[ABCDF][+-]?)\b", 
                System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            
            foreach (System.Text.RegularExpressions.Match match in gradeMatches)
            {
                numericalGrades.Add(match.Value);
            }
        }
        
        var result = string.Join("\n", numericalGrades.Distinct()).Trim();
        Logger?.LogInformation("Extracted {SemesterType} semester numerical grades: Original {OriginalLength} chars -> {GradeCount} grades: {Grades}", 
            semesterType, rawText.Length, numericalGrades.Count, string.Join(", ", numericalGrades.Take(5)));
        
        return result;
    }
    
    // Helper method to check if a line is a header that should be ignored
    private bool IsHeaderLine(string line)
    {
        var headerPatterns = new[]
        {
            @"^\s*\d+(ST|ND|RD|TH)?\s+(SEMESTER|SEM)\s*(GRADES?)?\s*:?\s*$",
            @"^\s*(FIRST|SECOND|THIRD)\s+(SEMESTER|SEM)\s*(GRADES?)?\s*:?\s*$",
            @"^\s*(FALL|SPRING|SUMMER)\s+(SEMESTER|SEM)\s*(GRADES?)?\s*:?\s*$",
            @"^\s*GRADES?\s*-?\s*\d+(ST|ND|RD|TH)?\s+(SEMESTER|SEM)\s*:?\s*$",
            @"^\s*SEMESTER\s+\d+\s*(GRADES?)?\s*:?\s*$",
            @"^\s*(ACADEMIC\s+)?(YEAR|TERM)\s*:?\s*\d{4}(-\d{4})?\s*$",
            @"^\s*GRADE\s*(REPORT|SHEET)?\s*:?\s*$",
            @"^\s*TRANSCRIPT\s*(OF\s+RECORDS?)?\s*:?\s*$",
            @"^\s*STUDENT\s+(NAME|ID)\s*:?.*$",
            @"^\s*COURSE\s*(CODE|TITLE)?\s*(GRADE|UNITS?)?\s*:?\s*$",
            @"^\s*SUBJECT\s*(CODE|TITLE)?\s*(GRADE|UNITS?)?\s*:?\s*$",
            @"^\s*-+\s*$", // Separator lines
            @"^\s*=+\s*$"  // Separator lines
        };

        foreach (var pattern in headerPatterns)
        {
            if (System.Text.RegularExpressions.Regex.IsMatch(line, pattern, System.Text.RegularExpressions.RegexOptions.IgnoreCase))
            {
                return true;
            }
        }
        return false;
    }
    
    // Helper method to extract numerical grades from a single line
    private List<string> ExtractNumericalGrades(string line)
    {
        var grades = new List<string>();
        
        // Pattern to match numerical grades (0.00 to 4.00 format) and letter grades
        var gradePatterns = new[]
        {
            @"\b([0-4]\.\d{1,2})\b", // Decimal grades like 1.25, 2.00, 3.75
            @"\b([0-4]\.?\d*)\b",    // Integer or decimal grades
            @"\b([ABCDF][+-]?)\b"    // Letter grades like A, B+, C-, F
        };
        
        foreach (var pattern in gradePatterns)
        {
            var matches = System.Text.RegularExpressions.Regex.Matches(line, pattern, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            foreach (System.Text.RegularExpressions.Match match in matches)
            {
                var grade = match.Groups[1].Value;
                // Validate that it's a reasonable grade value
                if (IsValidGrade(grade))
                {
                    grades.Add(grade);
                }
            }
        }
        
        return grades;
    }
    
    // Helper method to validate if a string represents a valid grade
    private bool IsValidGrade(string grade)
    {
        // Check for letter grades
        if (System.Text.RegularExpressions.Regex.IsMatch(grade, @"^[ABCDF][+-]?$", System.Text.RegularExpressions.RegexOptions.IgnoreCase))
            return true;
        
        // Check for numerical grades
        if (double.TryParse(grade, out var numericGrade))
        {
            return numericGrade >= 0.0 && numericGrade <= 4.0; // Typical GPA range
        }
        
        return false;
    }



    // Calculate form completion progress for the banner progress bar
    private int CalculateFormProgress()
    {
        if (application == null) return 0;
        
        int totalFields = 0;
        int completedFields = 0;
        
        // Required fields for all applications
        totalFields += 2; // StudentId, GWA
        if (!string.IsNullOrWhiteSpace(application.StudentId?.ToString())) completedFields++;
        if (application.GWA.HasValue && application.GWA > 0) completedFields++;
        
        if (application.IsExternalApplication)
        {
            // External application fields
            totalFields += 2; // ExternalApplicationUrl, HasAppliedExternally
            if (!string.IsNullOrWhiteSpace(application.ExternalApplicationUrl)) completedFields++;
            if (application.HasAppliedExternally) completedFields++;
        }
        else
        {
            // Internal application fields  
            totalFields += 1; // PersonalStatement (required)
            if (!string.IsNullOrWhiteSpace(application.PersonalStatement)) completedFields++;
            
            // Optional fields (count if filled)
            if (!string.IsNullOrWhiteSpace(application.FirstSemesterGrades)) completedFields++;
            if (!string.IsNullOrWhiteSpace(application.SecondSemesterGrades)) completedFields++;
            if (selectedFiles.Any()) completedFields++;
            
            // Add optional fields to total if they have content
            if (!string.IsNullOrWhiteSpace(application.FirstSemesterGrades) || 
                !string.IsNullOrWhiteSpace(application.SecondSemesterGrades) || 
                selectedFiles.Any())
            {
                totalFields += 3; // FirstSemesterGrades, SecondSemesterGrades, Documents
            }
        }
        
        return totalFields > 0 ? (int)Math.Round((double)completedFields / totalFields * 100) : 0;
    }

    // Update progress bar after field changes (handled automatically by Blazor reactivity)

    // Simple fallback for testing - this would normally not extract from the actual PDF
    private ExtractedGradeData ExtractGradesFromSimpleTextSearch(string fileName)
    {
        // This is just a fallback that returns sample values for testing
        // In a real scenario, you'd need proper PDF text extraction
        Logger?.LogInformation("Using fallback grade extraction for testing with file {FileName}", fileName);
        
        var result = new ExtractedGradeData();
        
        // Return test values that look like grades for demo purposes
        if (fileName.ToLower().Contains("gwa") || fileName.ToLower().Contains("grade"))
        {
            result.GWA = "1.75"; // Sample GWA for testing
            result.FirstSemesterGrades = "MATH 101 - 1.25\nENG 101 - 1.50\nSCI 101 - 1.75\nHIST 101 - 2.00";
            result.SecondSemesterGrades = "MATH 102 - 1.50\nENG 102 - 1.25\nSCI 102 - 2.00\nHIST 102 - 1.75";
        }
        
        return result;
    }
}
