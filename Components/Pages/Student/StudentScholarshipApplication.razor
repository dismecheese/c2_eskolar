@page "/dashboard/student/apply/{ScholarshipId:int}"
@attribute [Authorize(Roles = "Student")]
@layout Layout.StudentDashLayout

@using c2_eskolar.Data
@using c2_eskolar.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims

@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthProvider
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager Navigation

<PageTitle>Scholarship Application</PageTitle>

<h3>Scholarship Application</h3>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (scholarship == null)
{
    <div class="alert alert-danger">Scholarship not found.</div>
}
else if (alreadyApplied)
{
    <div class="alert alert-info">
        <h5>Application Already Submitted</h5>
        <p>You have already applied for this scholarship.</p>
        <a href="/dashboard/student/scholarships" class="btn btn-secondary">View Other Scholarships</a>
    </div>
}
else
{
    <div class="card p-4">
        <h4>@scholarship.Title</h4>
        <p class="text-muted">@scholarship.Institution?.AdminFullName</p>

        <div class="mb-3">
            <strong>Description:</strong>
            <p>@scholarship.Description</p>
        </div>

        <EditForm Model="application" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <!-- Toggle Application Type -->
            <div class="mb-3">
                <label class="form-label">Application Type</label>
                <InputRadioGroup @bind-Value="application.IsExternalApplication">
                    <div class="form-check">
                        <InputRadio class="form-check-input" Value="false" /> 
                        <label class="form-check-label">Internal (via this portal)</label>
                    </div>
                    <div class="form-check">
                        <InputRadio class="form-check-input" Value="true" /> 
                        <label class="form-check-label">External (redirect to provider site)</label>
                    </div>
                </InputRadioGroup>
            </div>

            @if (application.IsExternalApplication)
            {
                <!-- External Application Section -->
                <div class="mb-3">
                    <label for="ExternalApplicationUrl" class="form-label">Application Link</label>
                    <InputText id="ExternalApplicationUrl" class="form-control" 
                               @bind-Value="application.ExternalApplicationUrl" 
                               placeholder="https://provider.com/apply" />
                    <ValidationMessage For="@(() => application.ExternalApplicationUrl)" />
                </div>

                <div class="form-check mb-3">
                    <InputCheckbox id="HasAppliedExternally" class="form-check-input" 
                                   @bind-Value="application.HasAppliedExternally" />
                    <label class="form-check-label" for="HasAppliedExternally">
                        I confirm I have applied on the provider’s site
                    </label>
                </div>
            }
            else
            {
                <!-- Internal Application Section -->
                <div class="mb-3">
                    <label for="PersonalStatement" class="form-label">Personal Statement <span class="text-danger">*</span></label>
                    <InputTextArea id="PersonalStatement" class="form-control" 
                                   @bind-Value="application.PersonalStatement" rows="6" 
                                   placeholder="Explain why you deserve this scholarship..." />
                    <ValidationMessage For="@(() => application.PersonalStatement)" />
                </div>

                <div class="mb-3">
                    <label for="UploadedDocuments" class="form-label">Supporting Documents</label>
                    <InputText id="UploadedDocuments" class="form-control" 
                               @bind-Value="application.UploadedDocuments" 
                               placeholder="Enter file names or links (demo only)" />
                    <ValidationMessage For="@(() => application.UploadedDocuments)" />
                </div>
            }

            <button type="submit" class="btn btn-success" disabled="@isSubmitting">
                @(isSubmitting ? "Submitting..." : "Submit Application")
            </button>
            <a href="/dashboard/student/scholarships" class="btn btn-secondary ms-2">Cancel</a>

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success mt-3">
                    @successMessage
                    <div class="mt-2">
                        <a href="/dashboard/student/applications" class="btn btn-sm btn-outline-success">
                            View My Applications
                        </a>
                    </div>
                </div>
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3">@errorMessage</div>
            }
        </EditForm>
    </div>
}

@code {
    [Parameter] public int ScholarshipId { get; set; }

    private Scholarship? scholarship;
    private ScholarshipApplication application = new();
    private bool isLoading = true;
    private bool isSubmitting = false;
    private bool alreadyApplied = false;
    private string? successMessage;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(200);

        // ✅ Include Institution when loading scholarship
        scholarship = await DbContext.Scholarships
            .Include(s => s.Institution)
            .FirstOrDefaultAsync(s => s.ScholarshipId == ScholarshipId);

        if (scholarship == null)
        {
            isLoading = false;
            return;
        }

        // Mock student (replace with real Identity UserId -> StudentProfileId)
        int studentId = 1;

        // Check if already applied
        alreadyApplied = await DbContext.ScholarshipApplications
            .AnyAsync(a => a.ScholarshipId == ScholarshipId && a.StudentProfileId == studentId);

        // Initialize new application
        application = new ScholarshipApplication
        {
            ScholarshipId = scholarship.ScholarshipId,
            StudentProfileId = studentId,
            ApplicationDate = DateTime.Now
        };

        isLoading = false;
    }

    private async Task HandleSubmit()
    {
        if (isSubmitting || scholarship == null)
            return;

        try
        {
            isSubmitting = true;
            errorMessage = null;

            // Minimal validation
            if (!application.IsExternalApplication && string.IsNullOrWhiteSpace(application.PersonalStatement))
            {
                errorMessage = "Personal statement is required for internal applications.";
                return;
            }

            DbContext.ScholarshipApplications.Add(application);
            await DbContext.SaveChangesAsync();

            successMessage = $"✅ Application submitted successfully! Reference: {application.ApplicationReference}";
            alreadyApplied = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"❌ Something went wrong: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
