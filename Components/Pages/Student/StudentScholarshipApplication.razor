@page "/dashboard/student/apply/{ScholarshipId:int}"
@attribute [Authorize(Roles = "Student,SuperAdmin")]
@layout Layout.StudentDashLayout

@using c2_eskolar.Data
@using c2_eskolar.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using Blazored.LocalStorage
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthProvider
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IWebHostEnvironment Env
@inject c2_eskolar.Services.BlobStorageService BlobStorageService
@inject Microsoft.Extensions.Logging.ILogger<StudentScholarshipApplication> Logger
@inject IConfiguration Configuration

<PageTitle>Scholarship Application</PageTitle>

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-lg border-0 mb-4">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0"><i class="fas fa-file-signature me-2"></i>Scholarship Application</h3>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center align-items-center" style="min-height: 200px;">
                            <div class="spinner-border text-primary" role="status"></div>
                            <span class="ms-3">Loading...</span>
                        </div>
                    }
                    else if (scholarship == null)
                    {
                        <div class="alert alert-danger">Scholarship not found.</div>
                    }
                    else
                    {
                        <div class="mb-4">
                            <h4 class="fw-bold mb-1">@scholarship.Title</h4>
                            <p class="text-muted mb-2">@scholarship.Institution?.AdminFullName</p>
                            <span class="badge bg-info text-dark mb-2">Deadline: @scholarship.ApplicationDeadline.ToString("MMMM dd, yyyy")</span>
                            <div class="mb-2"><strong>Description:</strong> @scholarship.Description</div>
                        </div>


                        <EditForm Model="application" OnValidSubmit="HandleSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-4">
                                <h5 class="mb-2"><i class="fas fa-user-graduate me-2"></i>Student Information</h5>
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <label for="StudentId" class="form-label">Student ID <span class="text-danger">*</span></label>
                                        <InputText id="StudentId" class="form-control" @bind-Value="application.StudentId" @oninput="async _ => await OnFieldChanged()" placeholder="Enter your student ID" />
                                        <ValidationMessage For="@(() => application.StudentId)" />
                                    </div>
                                    <div class="col-md-6">
                                        <label for="GWA" class="form-label">GWA <span class="text-danger">*</span></label>
                                        <InputNumber id="GWA" class="form-control" @bind-Value="application.GWA" @oninput="async _ => await OnFieldChanged()" step="0.01" placeholder="e.g. 1.75" />
                                        <ValidationMessage For="@(() => application.GWA)" />
                                    </div>
                                </div>
                                <div class="row g-3 mt-2">
                                    <div class="col-md-6">
                                        <label for="FirstSemGrades" class="form-label">1st Semester Grades</label>
                                        <InputTextArea id="FirstSemGrades" class="form-control" @bind-Value="application.FirstSemesterGrades" @oninput="async _ => await OnFieldChanged()" rows="2" placeholder="List your 1st semester grades..." />
                                        <ValidationMessage For="@(() => application.FirstSemesterGrades)" />
                                    </div>
                                    <div class="col-md-6">
                                        <label for="SecondSemGrades" class="form-label">2nd Semester Grades</label>
                                        <InputTextArea id="SecondSemGrades" class="form-control" @bind-Value="application.SecondSemesterGrades" @oninput="async _ => await OnFieldChanged()" rows="2" placeholder="List your 2nd semester grades..." />
                                        <ValidationMessage For="@(() => application.SecondSemesterGrades)" />
                                    </div>
                                </div>
                            </div>

                            <div class="mb-4">
                                <h5 class="mb-2"><i class="fas fa-tasks me-2"></i>Application Type</h5>
                                <InputRadioGroup @bind-Value="application.IsExternalApplication" @onchange="async _ => await OnFieldChanged()">
                                    <div class="form-check">
                                        <InputRadio class="form-check-input" Value="false" />
                                        <label class="form-check-label">Internal (via this portal)</label>
                                    </div>
                                    <div class="form-check">
                                        <InputRadio class="form-check-input" Value="true" />
                                        <label class="form-check-label">External (redirect to provider site)</label>
                                    </div>
                                </InputRadioGroup>
                            </div>

                            @if (application.IsExternalApplication)
                            {
                                <div class="mb-4 p-3 border rounded bg-light">
                                    <h6 class="fw-bold mb-2"><i class="fas fa-external-link-alt me-2"></i>External Application</h6>
                                    <label for="ExternalApplicationUrl" class="form-label">Application Link</label>
                                    <InputText id="ExternalApplicationUrl" class="form-control mb-2"
                                               @bind-Value="application.ExternalApplicationUrl"
                                               @oninput="async _ => await OnFieldChanged()"
                                               placeholder="https://provider.com/apply" />
                                    <ValidationMessage For="@(() => application.ExternalApplicationUrl)" />

                                    <div class="form-check mt-2">
                                        <InputCheckbox id="HasAppliedExternally" class="form-check-input"
                                                       @bind-Value="application.HasAppliedExternally"
                                                       @onchange="async _ => await OnFieldChanged()" />
                                        <label class="form-check-label" for="HasAppliedExternally">
                                            I confirm I have applied on the provider’s site
                                        </label>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="mb-4 p-3 border rounded bg-light">
                                    <h6 class="fw-bold mb-2"><i class="fas fa-user-edit me-2"></i>Internal Application</h6>
                                    <label for="PersonalStatement" class="form-label">Personal Statement <span class="text-danger">*</span></label>
                                    <InputTextArea id="PersonalStatement" class="form-control mb-2"
                                                   @bind-Value="application.PersonalStatement"
                                                   @oninput="async _ => await OnFieldChanged()"
                                                   rows="6"
                                                   placeholder="Explain why you deserve this scholarship..." />
                                    <ValidationMessage For="@(() => application.PersonalStatement)" />

                                    <label for="UploadedDocuments" class="form-label mt-2">Supporting Documents</label>
                                    <InputFile id="UploadedDocuments" class="form-control mb-2" OnChange="OnFilesSelected" multiple />
                                    @if (selectedFiles.Any())
                                    {
                                        <div class="mt-2">
                                            <strong>Selected Files:</strong>
                                            <ul class="mb-0">
                                                @for (int i = 0; i < selectedFiles.Count; i++)
                                                {
                                                    var file = selectedFiles[i];
                                                    <li class="d-flex align-items-center justify-content-between mb-1">
                                                        <span>
                                                            <i class="fas fa-file me-1"></i>
                                                            <span class="fw-semibold">@file.Name</span>
                                                            <span class="text-muted ms-2">(@(file.Size / (1024 * 1024.0)):0.00 MB, @file.ContentType)</span>
                                                        </span>
                                                        <button type="button" class="btn btn-sm btn-danger ms-2" @onclick="@(async () => await RemoveSelectedFile(i))"><i class="fas fa-times"></i> Remove</button>
                                                        @if (uploadProgress.ContainsKey(file.Name))
                                                        {
                                                            <div class="progress ms-3" style="width: 120px; height: 18px;">
                                                                <div class="progress-bar" role="progressbar" style="width: @(uploadProgress[file.Name])%" aria-valuenow="@(uploadProgress[file.Name])" aria-valuemin="0" aria-valuemax="100">
                                                                    @(uploadProgress[file.Name])%
                                                                </div>
                                                            </div>
                                                        }
                                                    </li>
                                                }
                                            </ul>
                                            <button type="button" class="btn btn-info mt-2" @onclick="TriggerOcrAsync"><i class="fas fa-magic me-1"></i> Extract Grades from Document(s)</button>
                                        </div>
                                    }
                                    <ValidationMessage For="@(() => application.UploadedDocuments)" />
                                </div>
                            }



                            <div class="d-flex align-items-center mt-4">
                                <button type="submit" class="btn btn-success px-4" disabled="@(!IsFormValid() || isSubmitting)">
                                    @if (isSubmitting)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        @:Submitting...
                                    }
                                    else
                                    {
                                        @:Submit Application
                                    }
                                </button>
                                <button type="button" class="btn btn-outline-secondary ms-3" @onclick="CancelAndClearAsync">Cancel</button>
                            </div>

                            @if (!string.IsNullOrEmpty(successMessage))
                            {
                                <div class="alert alert-success mt-4">
                                    <i class="fas fa-check-circle me-2"></i>@successMessage
                                    <div class="mt-2">
                                        @if (application.ScholarshipApplicationId != Guid.Empty)
                                        {
                                            <a href="@($"/dashboard/student/applications/{application.ScholarshipApplicationId}")" class="btn btn-sm btn-outline-success">
                                                <i class="fas fa-eye me-1"></i>View Application
                                            </a>
                                        }
                                        <a href="/dashboard/student/applications" class="btn btn-sm btn-outline-secondary ms-2">
                                            <i class="fas fa-folder-open me-1"></i>View All Applications
                                        </a>
                                    </div>
                                </div>
                            }

                            @if (showSubmittedModal)
                            {
                                <div style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.5); z-index: 1050; display: flex; align-items: center; justify-content: center;">
                                    <div class="modal-dialog modal-dialog-centered" style="z-index: 1060; max-width: 400px; width: 100%;">
                                        <div class="modal-content" style="background: #fff; border-radius: 12px; box-shadow: 0 8px 32px rgba(0,0,0,0.25); overflow: hidden;">
                                            <div class="modal-header bg-success text-white" style="background: #198754; border-bottom: 1px solid #e9ecef;">
                                                <h5 class="modal-title"><i class="fas fa-check-circle me-2"></i>Application Submitted</h5>
                                                <button type="button" class="btn-close btn-close-white" aria-label="Close" @onclick="CloseSubmittedModal"></button>
                                            </div>
                                            <div class="modal-body" style="padding: 1.5rem;">
                                                <p>Your application has been submitted successfully!</p>
                                                @if (application.ScholarshipApplicationId != Guid.Empty)
                                                {
                                                    <a href="@($"/dashboard/student/applications/{application.ScholarshipApplicationId}")" class="btn btn-success me-2">
                                                        <i class="fas fa-eye me-1"></i>View Application
                                                    </a>
                                                }
                                                <a href="/dashboard/student/applications" class="btn btn-outline-secondary">
                                                    <i class="fas fa-folder-open me-1"></i>View All Applications
                                                </a>
                                            </div>
                                            <div class="modal-footer" style="background: #f8f9fa; border-top: 1px solid #e9ecef;">
                                                <button type="button" class="btn btn-secondary" @onclick="CloseSubmittedModal">Close</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger mt-4">
                                    <i class="fas fa-exclamation-triangle me-2"></i>@errorMessage
                                </div>
                            }
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int ScholarshipId { get; set; }


    private Scholarship? scholarship;
    private ScholarshipApplication application = new();
    private bool isLoading = true;
    private bool isSubmitting = false;
    private string? successMessage;
    private bool showSubmittedModal = false;
    private string? errorMessage;
    private List<string> uploadedFileNames = new();
    private List<IBrowserFile> selectedFiles = new();
    // Remove a file from the selectedFiles and uploadedFileNames lists
    private async Task RemoveSelectedFile(int index)
    {
        if (index >= 0 && index < selectedFiles.Count)
        {
            selectedFiles.RemoveAt(index);
            if (index < uploadedFileNames.Count)
                uploadedFileNames.RemoveAt(index);
            errorMessage = null;
            await DebouncedSaveFormStateAsync();
            await InvokeAsync(StateHasChanged);
        }
    }

    // Track upload progress for each file by name
    private Dictionary<string, int> uploadProgress = new Dictionary<string, int>();

    // Document intelligence fields removed
    private const string LocalStorageKey = "student-scholarship-application";
    // Debounce token for LocalStorage writes
    private CancellationTokenSource? debounceCts;

    // Upload policy
    private readonly string[] allowedExtensions = new[] { ".pdf", ".docx", ".doc", ".jpg", ".jpeg", ".png" };
    private const long perFileMaxBytes = 5 * 1024 * 1024; // 5 MB
    private const long totalMaxBytes = 20 * 1024 * 1024; // 20 MB total per submission

    private async Task OnFilesSelected(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
        var validFiles = new List<IBrowserFile>();
        var validFileNames = new List<string>();
        long currentTotal = selectedFiles.Sum(f => f.Size); // include already selected files
        var existingNames = new HashSet<string>(selectedFiles.Select(f => f.Name));
        errorMessage = null;

        foreach (var file in files)
        {
            var ext = Path.GetExtension(file.Name).ToLowerInvariant();
            if (!allowedExtensions.Contains(ext))
            {
                errorMessage = $"File '{file.Name}' has unsupported type. Allowed: {string.Join(", ", allowedExtensions)}";
                StateHasChanged();
                return;
            }

            if (file.Size > perFileMaxBytes)
            {
                errorMessage = $"File '{file.Name}' exceeds the per-file limit of {perFileMaxBytes / (1024 * 1024)} MB.";
                StateHasChanged();
                return;
            }

            if (currentTotal + file.Size > totalMaxBytes)
            {
                errorMessage = $"Adding '{file.Name}' would exceed the total upload size limit of {totalMaxBytes / (1024 * 1024)} MB.";
                StateHasChanged();
                return;
            }

            if (existingNames.Contains(file.Name) || validFileNames.Contains(file.Name))
            {
                errorMessage = $"File '{file.Name}' is already selected. Please choose unique files.";
                StateHasChanged();
                return;
            }

            currentTotal += file.Size;
            validFiles.Add(file);
            validFileNames.Add(file.Name);
        }

        // Add new valid files to the existing selection
        selectedFiles.AddRange(validFiles);
        uploadedFileNames.AddRange(validFileNames);
        errorMessage = null;

        // Persist a minimal safe state
        await DebouncedSaveFormStateAsync();
    }

    private async Task SaveFormStateAsync()
    {
        // Persist only safe, non-PII fields
        var state = new PersistedApplicationState
        {
            PersonalStatement = application?.PersonalStatement,
            FirstSemesterGrades = application?.FirstSemesterGrades,
            SecondSemesterGrades = application?.SecondSemesterGrades,
            GWA = application?.GWA,
            IsExternalApplication = application?.IsExternalApplication,
            ExternalApplicationUrl = application?.ExternalApplicationUrl,
            HasAppliedExternally = application?.HasAppliedExternally,
            UploadedFileNames = uploadedFileNames
        };
        try
        {
            await LocalStorage.SetItemAsync(LocalStorageKey + ScholarshipId, state);
            Logger?.LogDebug("Saved application draft for scholarship {ScholarshipId}", ScholarshipId);
        }
        catch (Exception ex)
        {
            // Do not surface LocalStorage errors to users; log and continue
            Logger?.LogWarning(ex, "Failed to persist application draft for scholarship {ScholarshipId}", ScholarshipId);
        }
    }

    private async Task DebouncedSaveFormStateAsync(int delayMs = 800)
    {
        try
        {
            debounceCts?.Cancel();
        }
        catch { }
        debounceCts = new CancellationTokenSource();
        var token = debounceCts.Token;
        try
        {
            await Task.Delay(delayMs, token);
            if (!token.IsCancellationRequested)
            {
                await InvokeAsync(SaveFormStateAsync);
            }
        }
        catch (TaskCanceledException) { }
    }

    private async Task RestoreFormStateAsync()
    {
        try
        {
            var state = await LocalStorage.GetItemAsync<PersistedApplicationState>(LocalStorageKey + ScholarshipId);
            if (state != null)
            {
                // Restore only non-PII fields
                application.PersonalStatement = state.PersonalStatement ?? application.PersonalStatement;
                application.FirstSemesterGrades = state.FirstSemesterGrades ?? application.FirstSemesterGrades;
                application.SecondSemesterGrades = state.SecondSemesterGrades ?? application.SecondSemesterGrades;
                application.GWA = state.GWA ?? application.GWA;
                application.IsExternalApplication = state.IsExternalApplication ?? application.IsExternalApplication;
                application.ExternalApplicationUrl = state.ExternalApplicationUrl ?? application.ExternalApplicationUrl;
                application.HasAppliedExternally = state.HasAppliedExternally ?? application.HasAppliedExternally;
                uploadedFileNames = state.UploadedFileNames ?? new List<string>();
            }
        }
        catch (Exception ex)
        {
            Logger?.LogWarning(ex, "Failed to restore application draft for scholarship {ScholarshipId}", ScholarshipId);
        }
    }

    private async Task ClearFormStateAsync()
    {
        await LocalStorage.RemoveItemAsync(LocalStorageKey + ScholarshipId);
    }

    private async Task OnFieldChanged()
    {
        await DebouncedSaveFormStateAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(200);

        // ✅ Include Institution when loading scholarship
        scholarship = await DbContext.Scholarships
            .Include(s => s.Institution)
            .FirstOrDefaultAsync(s => s.ScholarshipId == ScholarshipId);

        if (scholarship == null)
        {
            isLoading = false;
            return;
        }

        // Get the current user's ID from claims
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (string.IsNullOrEmpty(userId))
        {
            Navigation.NavigateTo("/login");
            return;
        }

        // Find the student's profile
        var studentProfile = await DbContext.StudentProfiles
            .FirstOrDefaultAsync(sp => sp.UserId == userId);

        if (studentProfile == null)
        {
            errorMessage = "Student profile not found. Please complete your profile first.";
            isLoading = false;
            return;
        }

    Guid studentId = studentProfile.StudentProfileId;

        // Try to restore form state
        await RestoreFormStateAsync();
        // If no state, initialize new application
        if (application == null || application.ScholarshipId == 0)
        {
            application = new ScholarshipApplication
            {
                ScholarshipId = scholarship.ScholarshipId,
                StudentProfileId = studentId,
                ApplicationDate = DateTime.Now
            };
        }

        isLoading = false;
    }

    private async Task HandleSubmit()
    {
        if (isSubmitting || scholarship == null)
            return;

        try
        {
            Logger?.LogInformation("Starting submission for scholarship {ScholarshipId} by student {StudentProfileId}", ScholarshipId, application.StudentProfileId);
            isSubmitting = true;
            errorMessage = null;
            uploadProgress.Clear();

            // Minimal validation
            if (!application.IsExternalApplication && string.IsNullOrWhiteSpace(application.PersonalStatement))
            {
                errorMessage = "Personal statement is required for internal applications.";
                return;
            }

            // Prevent duplicate applications
            var exists = await DbContext.ScholarshipApplications
                .AnyAsync(a => a.ScholarshipId == application.ScholarshipId && a.StudentProfileId == application.StudentProfileId);
            if (exists)
            {
                Logger?.LogWarning("Duplicate application prevented for scholarship {ScholarshipId} student {StudentProfileId}", ScholarshipId, application.StudentProfileId);
                errorMessage = "You have already applied to this scholarship.";
                return;
            }

            // Save uploaded files to Azure Blob Storage in parallel
            var savedUrls = new List<string>();
            long accumulated = 0;
            var uploadTasks = new List<Task>();
            var urlResults = new Dictionary<string, string>();
            var sizeResults = new Dictionary<string, long>();

            foreach (var file in selectedFiles)
            {
                var ext = Path.GetExtension(file.Name).ToLowerInvariant();
                if (!allowedExtensions.Contains(ext))
                    throw new InvalidOperationException($"Unsupported file type: {ext}");

                if (file.Size > perFileMaxBytes)
                    throw new InvalidOperationException($"File {file.Name} exceeds per-file size limit.");

                if (accumulated + file.Size > totalMaxBytes)
                    throw new InvalidOperationException($"Total upload size exceeds limit.");

                accumulated += file.Size;

                uploadTasks.Add(Task.Run(async () =>
                {
                    var uniqueName = $"{Guid.NewGuid()}_{Path.GetFileName(file.Name)}";
                    try
                    {
                        await using var stream = file.OpenReadStream(perFileMaxBytes);
                        var buffer = new byte[81920];
                        long totalRead = 0;
                        using (var ms = new MemoryStream())
                        {
                            int read;
                            do
                            {
                                read = await stream.ReadAsync(buffer, 0, buffer.Length);
                                if (read > 0)
                                {
                                    await ms.WriteAsync(buffer, 0, read);
                                    totalRead += read;
                                    int percent = (int)(100.0 * totalRead / file.Size);
                                    uploadProgress[file.Name] = percent > 100 ? 100 : percent;
                                    await InvokeAsync(StateHasChanged);
                                }
                            } while (read > 0);
                            ms.Position = 0;
                            var url = await BlobStorageService.UploadDocumentAsync(ms, uniqueName, file.ContentType);
                            urlResults[file.Name] = url;
                            sizeResults[file.Name] = file.Size;
                            uploadProgress[file.Name] = 100;
                            await InvokeAsync(StateHasChanged);
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger?.LogError(ex, "Failed uploading file {FileName} to Azure Blob Storage for scholarship {ScholarshipId}", file.Name, ScholarshipId);
                        errorMessage = $"Error uploading document '{file.Name}': {ex.Message}";
                        await InvokeAsync(StateHasChanged);
                        throw;
                    }
                }));
            }

            await Task.WhenAll(uploadTasks);
            savedUrls.AddRange(urlResults.Values);

            // Store the blob URLs (or you can store uniqueName if you want to keep it private)
            application.UploadedDocuments = string.Join(",", savedUrls);

            DbContext.ScholarshipApplications.Add(application);
            await DbContext.SaveChangesAsync();

            successMessage = $"Application submitted successfully! Reference ID: {application.ScholarshipApplicationId}";
            uploadedFileNames.Clear();
            selectedFiles.Clear();
            await ClearFormStateAsync();
            showSubmittedModal = true;
        }
        catch (InvalidOperationException ioe)
        {
            Logger?.LogWarning(ioe, "Validation/upload error during application submit for scholarship {ScholarshipId}", ScholarshipId);
            errorMessage = ioe.Message;
        }
        catch (Exception ex)
        {
            Logger?.LogError(ex, "Unhandled error during application submit for scholarship {ScholarshipId}", ScholarshipId);
            errorMessage = "Something went wrong while submitting your application. Please try again later.";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    // Manually trigger OCR for selected files
    private async Task TriggerOcrAsync()
    {
        if (!selectedFiles.Any())
        {
            errorMessage = "No files selected for OCR.";
            await InvokeAsync(StateHasChanged);
            return;
        }
        
        errorMessage = null;
        successMessage = null;
        bool foundGwa = false;
        
        successMessage = "Processing documents with Azure Document Intelligence...";
        await InvokeAsync(StateHasChanged);
        
        foreach (var file in selectedFiles)
        {
            try
            {
                Logger?.LogInformation("Starting OCR processing for file {FileName}", file.Name);
                
                await using var stream = file.OpenReadStream(perFileMaxBytes);
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                ms.Position = 0;
                
                var extractedData = await ExtractGradesFromDocumentAsync(ms, file.Name, file.ContentType);
                
                bool foundAnyData = false;
                var extractedItems = new List<string>();
                
                if (!string.IsNullOrWhiteSpace(extractedData.GWA) && double.TryParse(extractedData.GWA, out var gwaValue))
                {
                    application.GWA = gwaValue;
                    extractedItems.Add($"GWA: {gwaValue}");
                    foundAnyData = true;
                }
                
                if (!string.IsNullOrWhiteSpace(extractedData.FirstSemesterGrades))
                {
                    application.FirstSemesterGrades = extractedData.FirstSemesterGrades;
                    extractedItems.Add($"1st Semester: {extractedData.FirstSemesterGrades.Substring(0, Math.Min(50, extractedData.FirstSemesterGrades.Length))}...");
                    foundAnyData = true;
                }
                
                if (!string.IsNullOrWhiteSpace(extractedData.SecondSemesterGrades))
                {
                    application.SecondSemesterGrades = extractedData.SecondSemesterGrades;
                    extractedItems.Add($"2nd Semester: {extractedData.SecondSemesterGrades.Substring(0, Math.Min(50, extractedData.SecondSemesterGrades.Length))}...");
                    foundAnyData = true;
                }
                
                if (foundAnyData)
                {
                    successMessage = $"✅ Data extracted successfully from '{file.Name}': {string.Join(", ", extractedItems)}";
                    foundGwa = true;
                    await OnFieldChanged(); // Save the updated data to localStorage
                    await InvokeAsync(StateHasChanged); // Force UI refresh to show updated form fields
                    Logger?.LogInformation("Successfully extracted data from {FileName}: {ExtractedItems}", file.Name, string.Join(", ", extractedItems));
                    break; // Stop after finding valid data
                }
                else
                {
                    Logger?.LogInformation("No GWA found in document {FileName}", file.Name);
                }
                
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                Logger?.LogError(ex, "Error during OCR processing for file {FileName}", file.Name);
                errorMessage = $"❌ Error processing '{file.Name}': {ex.Message}";
                await InvokeAsync(StateHasChanged);
                break; // Stop processing on error
            }
        }
        
                if (!foundGwa && string.IsNullOrEmpty(errorMessage))
        {
            errorMessage = "⚠️ Documents processed successfully, but no grade information was found. Please ensure your documents contain clear GWA, semester grades, or other grade information.";
        }        await InvokeAsync(StateHasChanged);
    }

    private void CloseSubmittedModal()
    {
        showSubmittedModal = false;
        Navigation.NavigateTo("/dashboard/student");
    }

    private async Task CancelAndClearAsync()
    {
        await ClearFormStateAsync();
        Navigation.NavigateTo("/dashboard/student/scholarships");
    }

    // Helper class for persisting state
    public class PersistedApplicationState
    {
        // Only non-PII fields
        public string? PersonalStatement { get; set; }
        public string? FirstSemesterGrades { get; set; }
        public string? SecondSemesterGrades { get; set; }
    public double? GWA { get; set; }
        public bool? IsExternalApplication { get; set; }
        public string? ExternalApplicationUrl { get; set; }
        public bool? HasAppliedExternally { get; set; }
        public List<string>? UploadedFileNames { get; set; }
    }

    private bool IsFormValid()
    {
        if (scholarship == null || application == null)
            return false;

        // Always required fields
        if (string.IsNullOrWhiteSpace(application.StudentId?.ToString()))
            return false;
        if (application.GWA == null || application.GWA <= 0)
            return false;

        // Internal application
        if (!application.IsExternalApplication)
        {
            if (string.IsNullOrWhiteSpace(application.PersonalStatement))
                return false;
            // Optionally require at least one file
            // if (selectedFiles.Count == 0) return false;
        }
        else // External application
        {
            if (string.IsNullOrWhiteSpace(application.ExternalApplicationUrl))
                return false;
            if (!application.HasAppliedExternally)
                return false;
        }
        return true;
    }

    private async Task<ExtractedGradeData> ExtractGradesFromDocumentAsync(Stream fileStream, string fileName, string contentType)
    {
        // Read endpoint and key from configuration
        string endpoint = Configuration["AzureDocumentIntelligence:Endpoint"] ?? "";
        string apiKey = Configuration["AzureDocumentIntelligence:ApiKey"] ?? "";
        string modelId = "prebuilt-document"; // or your custom model

        // Validate configuration
        if (string.IsNullOrEmpty(endpoint) || string.IsNullOrEmpty(apiKey))
        {
            Logger?.LogWarning("Azure Document Intelligence not configured properly. Endpoint: {Endpoint}, ApiKey: {ApiKeyStatus}", 
                endpoint ?? "NULL", string.IsNullOrEmpty(apiKey) ? "MISSING" : "PROVIDED");
            throw new InvalidOperationException("Azure Document Intelligence is not configured. Please check your appsettings.json file and ensure both 'AzureDocumentIntelligence:Endpoint' and 'AzureDocumentIntelligence:ApiKey' are set.");
        }

        // Validate endpoint format
        if (!endpoint.StartsWith("https://") || !endpoint.Contains(".cognitiveservices.azure.com"))
        {
            Logger?.LogWarning("Azure Document Intelligence endpoint appears to be invalid: {Endpoint}", endpoint);
            throw new InvalidOperationException($"Invalid endpoint format: {endpoint}. Expected format: https://your-resource.cognitiveservices.azure.com/");
        }

        try
        {
            using var httpClient = new HttpClient();
            httpClient.Timeout = TimeSpan.FromMinutes(5); // Increase timeout for large documents
            httpClient.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", apiKey);

            // Ensure endpoint ends properly
            var cleanEndpoint = endpoint.TrimEnd('/');
            var url = $"{cleanEndpoint}/formrecognizer/documentModels/{modelId}:analyze?api-version=2023-07-31";
            
            // Copy stream to byte array to avoid disposal issues
            var fileBytes = new byte[fileStream.Length];
            fileStream.Position = 0;
            await fileStream.ReadExactlyAsync(fileBytes);
            
            using var httpContent = new ByteArrayContent(fileBytes);
            httpContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(contentType);
            
            Logger?.LogInformation("Sending document {FileName} ({ContentType}, {Size} bytes) to Azure Document Intelligence at {Url}", 
                fileName, contentType, fileBytes.Length, url);
            
            var response = await httpClient.PostAsync(url, httpContent);
            var responseContent = await response.Content.ReadAsStringAsync();
            
            Logger?.LogInformation("Azure Document Intelligence response for {FileName}: Status={StatusCode}, ContentLength={ContentLength}, Headers={Headers}", 
                fileName, response.StatusCode, responseContent?.Length ?? 0, 
                string.Join(", ", response.Headers.Select(h => $"{h.Key}={string.Join(",", h.Value)}")));
            
            if (!response.IsSuccessStatusCode)
            {
                Logger?.LogError("Azure Document Intelligence API error. Status: {StatusCode}, Response: {Response}", 
                    response.StatusCode, responseContent);
                
                // More specific error messages based on status code
                var errorMsg = response.StatusCode switch
                {
                    System.Net.HttpStatusCode.Unauthorized => "Invalid API key or endpoint. Please check your Azure Document Intelligence configuration.",
                    System.Net.HttpStatusCode.Forbidden => "Access forbidden. Please check your Azure Document Intelligence subscription and permissions.",
                    System.Net.HttpStatusCode.NotFound => "Azure Document Intelligence endpoint not found. Please verify the endpoint URL.",
                    System.Net.HttpStatusCode.BadRequest => $"Invalid request to Document Intelligence: {responseContent}",
                    System.Net.HttpStatusCode.TooManyRequests => "Rate limit exceeded. Please try again later.",
                    System.Net.HttpStatusCode.Accepted => "Request accepted but processing asynchronously - this API might require polling for results.",
                    _ => $"Document Intelligence API error: {response.StatusCode} - {responseContent}"
                };
                
                throw new InvalidOperationException(errorMsg);
            }

            // Handle async processing (202 Accepted response)
            if (response.StatusCode == System.Net.HttpStatusCode.Accepted)
            {
                // Get the operation location for polling
                var operationLocation = response.Headers.GetValues("Operation-Location").FirstOrDefault();
                if (!string.IsNullOrEmpty(operationLocation))
                {
                    Logger?.LogInformation("Document processing started asynchronously. Polling location: {OperationLocation}", operationLocation);
                    
                    // Poll for results (simplified version - in production you'd want more sophisticated polling)
                    for (int i = 0; i < 30; i++) // Poll for up to 5 minutes
                    {
                        await Task.Delay(10000); // Wait 10 seconds between polls
                        
                        var pollResponse = await httpClient.GetAsync(operationLocation);
                        var pollContent = await pollResponse.Content.ReadAsStringAsync();
                        
                        if (pollResponse.IsSuccessStatusCode && !string.IsNullOrWhiteSpace(pollContent))
                        {
                            using var pollDoc = System.Text.Json.JsonDocument.Parse(pollContent);
                            var status = pollDoc.RootElement.GetProperty("status").GetString();
                            
                            if (status == "succeeded")
                            {
                                responseContent = pollContent;
                                break;
                            }
                            else if (status == "failed")
                            {
                                throw new InvalidOperationException("Document processing failed on Azure side.");
                            }
                            // Continue polling if status is "running"
                        }
                    }
                }
            }

            if (string.IsNullOrWhiteSpace(responseContent))
            {
                Logger?.LogWarning("Azure Document Intelligence returned empty response for {FileName}. Status: {StatusCode}", fileName, response.StatusCode);
                
                // Try a simple fallback approach for testing
                Logger?.LogInformation("Attempting simple text extraction fallback for testing purposes");
                return ExtractGradesFromSimpleTextSearch(fileName);
            }

            Logger?.LogDebug("Document Intelligence response for {FileName} (first 500 chars): {Response}", 
                fileName, responseContent.Length > 500 ? responseContent.Substring(0, 500) + "..." : responseContent);

            // Parse JSON to extract GWA
            using var doc = System.Text.Json.JsonDocument.Parse(responseContent);
            var root = doc.RootElement;
            
            // Try to extract text content and search for GWA patterns
            var allText = "";
            if (root.TryGetProperty("analyzeResult", out var analyzeResult))
            {
                if (analyzeResult.TryGetProperty("content", out var content))
                {
                    allText = content.GetString() ?? "";
                }
            }

            // If no text found, try alternative structure
            if (string.IsNullOrEmpty(allText) && root.TryGetProperty("status", out var statusProp))
            {
                var status = statusProp.GetString();
                if (status == "succeeded" && root.TryGetProperty("analyzeResult", out var altAnalyzeResult))
                {
                    if (altAnalyzeResult.TryGetProperty("content", out var altContent))
                    {
                        allText = altContent.GetString() ?? "";
                    }
                }
            }

            Logger?.LogInformation("Extracted text length: {TextLength} characters for {FileName}", allText.Length, fileName);

            var result = new ExtractedGradeData();

            // Search for GWA patterns in the extracted text
            var gwaPatterns = new[]
            {
                @"GWA[:\s]*([0-9]+\.[0-9]+)",
                @"General\s+Weighted\s+Average[:\s]*([0-9]+\.[0-9]+)",
                @"Average[:\s]*([0-9]+\.[0-9]+)",
                @"GPA[:\s]*([0-9]+\.[0-9]+)",
                @"([0-9]+\.[0-9]+).*GWA", // GWA after the number
                @"Grade.*Point.*Average[:\s]*([0-9]+\.[0-9]+)" // Grade Point Average
            };

            foreach (var pattern in gwaPatterns)
            {
                var regex = new System.Text.RegularExpressions.Regex(pattern, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                var match = regex.Match(allText);
                if (match.Success)
                {
                    result.GWA = match.Groups[1].Value;
                    Logger?.LogInformation("Found GWA {GwaValue} in document {FileName} using pattern {Pattern}", 
                        match.Groups[1].Value, fileName, pattern);
                    break;
                }
            }

            // Search for first semester grades patterns with variety
            var firstSemPatterns = new[]
            {
                @"1ST\s+SEMESTER\s+GRADES[\s\S]*?(?=2ND\s+SEMESTER|$)",
                @"1st\s+Semester\s+Grades[\s\S]*?(?=2nd\s+Semester|$)",
                @"FIRST\s+SEMESTER\s+GRADES[\s\S]*?(?=SECOND\s+SEMESTER|$)",
                @"First\s+Semester\s+Grades[\s\S]*?(?=Second\s+Semester|$)",
                @"1ST\s+SEM\s+GRADES[\s\S]*?(?=2ND\s+SEM|$)",
                @"1st\s+Sem\s+Grades[\s\S]*?(?=2nd\s+Sem|$)",
                @"SEMESTER\s+1\s+GRADES[\s\S]*?(?=SEMESTER\s+2|$)",
                @"Semester\s+1\s+Grades[\s\S]*?(?=Semester\s+2|$)",
                @"GRADES\s+-\s+1ST\s+SEMESTER[\s\S]*?(?=GRADES\s+-\s+2ND|$)",
                @"Grades\s+-\s+1st\s+Semester[\s\S]*?(?=Grades\s+-\s+2nd|$)",
                @"1ST\s+SEMESTER[\s\S]*?(?=2ND\s+SEMESTER|$)",
                @"1st\s+Semester[\s\S]*?(?=2nd\s+Semester|$)",
                @"First\s+Semester[\s\S]*?(?=Second\s+Semester|$)",
                @"FALL\s+SEMESTER\s+GRADES[\s\S]*?(?=SPRING\s+SEMESTER|$)",
                @"Fall\s+Semester\s+Grades[\s\S]*?(?=Spring\s+Semester|$)"
            };

            foreach (var pattern in firstSemPatterns)
            {
                var regex = new System.Text.RegularExpressions.Regex(pattern, System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.Multiline);
                var match = regex.Match(allText);
                if (match.Success)
                {
                    var semesterText = match.Value.Trim();
                    if (semesterText.Length > 50) // Only capture if there's substantial content
                    {
                        result.FirstSemesterGrades = semesterText.Length > 500 ? semesterText.Substring(0, 500) + "..." : semesterText;
                        Logger?.LogInformation("Found 1st semester grades in document {FileName} (length: {Length})", fileName, semesterText.Length);
                        break;
                    }
                }
            }

            // Search for second semester grades patterns with variety
            var secondSemPatterns = new[]
            {
                @"2ND\s+SEMESTER\s+GRADES[\s\S]*?(?=3RD\s+SEMESTER|SUMMER|$)",
                @"2nd\s+Semester\s+Grades[\s\S]*?(?=3rd\s+Semester|Summer|$)",
                @"SECOND\s+SEMESTER\s+GRADES[\s\S]*?(?=THIRD\s+SEMESTER|SUMMER|$)",
                @"Second\s+Semester\s+Grades[\s\S]*?(?=Third\s+Semester|Summer|$)",
                @"2ND\s+SEM\s+GRADES[\s\S]*?(?=3RD\s+SEM|SUMMER|$)",
                @"2nd\s+Sem\s+Grades[\s\S]*?(?=3rd\s+Sem|Summer|$)",
                @"SEMESTER\s+2\s+GRADES[\s\S]*?(?=SEMESTER\s+3|SUMMER|$)",
                @"Semester\s+2\s+Grades[\s\S]*?(?=Semester\s+3|Summer|$)",
                @"GRADES\s+-\s+2ND\s+SEMESTER[\s\S]*?(?=GRADES\s+-\s+3RD|SUMMER|$)",
                @"Grades\s+-\s+2nd\s+Semester[\s\S]*?(?=Grades\s+-\s+3rd|Summer|$)",
                @"2ND\s+SEMESTER[\s\S]*?(?=3RD\s+SEMESTER|SUMMER|$)",
                @"2nd\s+Semester[\s\S]*?(?=3rd\s+Semester|Summer|$)",
                @"Second\s+Semester[\s\S]*?(?=Third\s+Semester|Summer|$)",
                @"SPRING\s+SEMESTER\s+GRADES[\s\S]*?(?=SUMMER|FALL|$)",
                @"Spring\s+Semester\s+Grades[\s\S]*?(?=Summer|Fall|$)"
            };

            foreach (var pattern in secondSemPatterns)
            {
                var regex = new System.Text.RegularExpressions.Regex(pattern, System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.Multiline);
                var match = regex.Match(allText);
                if (match.Success)
                {
                    var semesterText = match.Value.Trim();
                    if (semesterText.Length > 50) // Only capture if there's substantial content
                    {
                        result.SecondSemesterGrades = semesterText.Length > 500 ? semesterText.Substring(0, 500) + "..." : semesterText;
                        Logger?.LogInformation("Found 2nd semester grades in document {FileName} (length: {Length})", fileName, semesterText.Length);
                        break;
                    }
                }
            }

            Logger?.LogInformation("Extraction results for {FileName}: GWA={HasGWA}, 1stSem={Has1st}, 2ndSem={Has2nd}", 
                fileName, !string.IsNullOrEmpty(result.GWA), !string.IsNullOrEmpty(result.FirstSemesterGrades), !string.IsNullOrEmpty(result.SecondSemesterGrades));
            
            return result;
        }
        catch (System.Text.Json.JsonException ex)
        {
            Logger?.LogError(ex, "Failed to parse JSON response from Document Intelligence for {FileName}", fileName);
            throw new InvalidOperationException($"Invalid response from Document Intelligence service: {ex.Message}");
        }
        catch (HttpRequestException ex)
        {
            Logger?.LogError(ex, "HTTP error calling Document Intelligence for {FileName}", fileName);
            throw new InvalidOperationException($"Network error calling Document Intelligence: {ex.Message}");
        }
    }

    // Helper class for extracted grade data
    public class ExtractedGradeData
    {
        public string? GWA { get; set; }
        public string? FirstSemesterGrades { get; set; }
        public string? SecondSemesterGrades { get; set; }
    }

    // Simple fallback for testing - this would normally not extract from the actual PDF
    private ExtractedGradeData ExtractGradesFromSimpleTextSearch(string fileName)
    {
        // This is just a fallback that returns sample values for testing
        // In a real scenario, you'd need proper PDF text extraction
        Logger?.LogInformation("Using fallback grade extraction for testing with file {FileName}", fileName);
        
        var result = new ExtractedGradeData();
        
        // Return test values that look like grades for demo purposes
        if (fileName.ToLower().Contains("gwa") || fileName.ToLower().Contains("grade"))
        {
            result.GWA = "1.75"; // Sample GWA for testing
            result.FirstSemesterGrades = "1st Semester\nMath 101: 1.25\nEnglish 101: 1.50\nScience 101: 1.75";
            result.SecondSemesterGrades = "2nd Semester\nMath 102: 1.50\nEnglish 102: 1.25\nScience 102: 2.00";
        }
        
        return result;
    }
}
