@page "/dashboard/student/announcements"
@attribute [Authorize(Roles = "Student,SuperAdmin")]
@layout Layout.StudentDashLayout
@using c2_eskolar.Models
@using c2_eskolar.Models.Enums
@using c2_eskolar.Services
@inject AnnouncementService AnnouncementService

<PageTitle>Announcements</PageTitle>

<div class="container-fluid" style="min-height: 100vh;">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-10">
            <!-- Search and Header -->
            <div class="d-flex flex-column flex-md-row align-items-md-center mb-4 gap-3 mt-5">
                <div class="flex-grow-1">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Search announcements..." 
                               @bind="searchTerm" @oninput="OnSearchChanged" />
                        <span class="input-group-text bg-white border-0">
                            <i class="bi bi-search"></i>
                        </span>
                    </div>
                </div>
            </div>

            <!-- Category Tabs -->
            <div class="modern-tabs d-flex align-items-center mb-4 gap-3">
                <div class="tab-pills">
                    <button class="tab-pill @(activeTab == "All" ? "active" : "")" @onclick='() => SetActiveTab("All")'>
                        <i class="bi bi-megaphone"></i> <span>All</span>
                    </button>
                    <button class="tab-pill @(activeTab == "Institution" ? "active" : "")" @onclick='() => SetActiveTab("Institution")'>
                        <i class="bi bi-building"></i> <span>Institution</span>
                    </button>
                    <button class="tab-pill @(activeTab == "Application" ? "active" : "")" @onclick='() => SetActiveTab("Application")'>
                        <i class="bi bi-file-earmark-text"></i> <span>Applications</span>
                    </button>
                    <button class="tab-pill @(activeTab == "Grants" ? "active" : "")" @onclick='() => SetActiveTab("Grants")'>
                        <i class="bi bi-award"></i> <span>Grants</span>
                    </button>
                    <button class="tab-pill @(activeTab == "Benefactor" ? "active" : "")" @onclick='() => SetActiveTab("Benefactor")'>
                        <i class="bi bi-globe"></i> <span>Benefactor</span>
                    </button>
                </div>
                <div class="ms-auto" style="min-width:180px;">
                    <select class="form-select form-select-sm" @bind="selectedCategory">
                        <option value="">All Categories</option>
                        <option value="Requirements">Requirements</option>
                        <option value="Results">Results</option>
                        <option value="Events">Events</option>
                        <option value="General">General</option>
                    </select>
                </div>
            </div>

            <div class="row">
                <!-- Announcements List -->
                <div class="col-lg-8">
                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center py-5">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (filteredAnnouncements?.Any() == true)
                    {
                        <div class="mb-3">
                            <h5 class="text-muted">@GetTabDescription()</h5>
                        </div>

                        <div class="d-flex flex-column gap-3">
                            @foreach (var announcement in filteredAnnouncements.OrderByDescending(a => a.IsPinned).ThenByDescending(a => a.CreatedAt))
                            {
                                <div class="card shadow-sm border-0 @(announcement.IsPinned ? "border-warning border-2" : "")">
                                    <div class="card-body">
                                        <!-- Header with badges -->
                                        <div class="d-flex justify-content-between align-items-start mb-2">
                                            <div class="d-flex gap-2 flex-wrap">
                                                @if (announcement.IsPinned)
                                                {
                                                    <span class="badge bg-warning text-dark">
                                                        <i class="bi bi-pin-fill"></i> Pinned
                                                    </span>
                                                }
                                                <span class="badge @(GetAuthorBadgeClass(announcement.AuthorType))">
                                                    @announcement.AuthorType
                                                </span>
                                                @if (!string.IsNullOrEmpty(announcement.Category))
                                                {
                                                    <span class="badge bg-info">@announcement.Category</span>
                                                }
                                                <span class="badge bg-light text-dark">
                                                    @GetAnnouncementSource(announcement)
                                                </span>
                                            </div>
                                            <small class="text-muted">@announcement.CreatedAt.ToString("MMM dd, yyyy")</small>
                                        </div>

                                        <!-- Content -->
                                        <div class="d-flex align-items-start gap-3">
                                            <div>
                                                <i class="@(GetAuthorIcon(announcement.AuthorType)) fs-2 text-secondary"></i>
                                            </div>
                                            <div class="flex-grow-1">
                                                <div class="fw-semibold mb-1">@announcement.Title</div>
                                                <div class="text-secondary">@announcement.Content</div>
                                                @if (activeTab == "Application" || activeTab == "Grants")
                                                {
                                                    <div class="mt-2">
                                                        <small class="text-muted">
                                                            @if (activeTab == "Application")
                                                            {
                                                                <span><i class="bi bi-file-earmark"></i> Related to your scholarship application</span>
                                                            }
                                                            else
                                                            {
                                                                <span><i class="bi bi-trophy"></i> Related to your current scholarship</span>
                                                            }
                                                        </small>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        <!-- Pagination (if needed) -->
                        @if (totalAnnouncements > pageSize)
                        {
                            <nav aria-label="Announcements pagination" class="mt-4">
                                <ul class="pagination justify-content-center">
                                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                        <a class="page-link" href="#" @onclick="() => ChangePage(currentPage - 1)" @onclick:preventDefault="true">Previous</a>
                                    </li>
                                    @for (int i = 1; i <= totalPages; i++)
                                    {
                                        <li class="page-item @(currentPage == i ? "active" : "")">
                                            <a class="page-link" href="#" @onclick="() => ChangePage(i)" @onclick:preventDefault="true">@i</a>
                                        </li>
                                    }
                                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                        <a class="page-link" href="#" @onclick="() => ChangePage(currentPage + 1)" @onclick:preventDefault="true">Next</a>
                                    </li>
                                </ul>
                            </nav>
                        }
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <div class="mb-3">
                                <i class="@GetEmptyStateIcon() fs-1 text-muted"></i>
                            </div>
                            <h5 class="text-muted">@GetEmptyStateTitle()</h5>
                            <p class="text-muted">@GetEmptyStateMessage()</p>
                            @if (!string.IsNullOrEmpty(searchTerm) || !string.IsNullOrEmpty(selectedCategory))
                            {
                                <button class="btn btn-outline-primary btn-sm" @onclick="ClearFilters">
                                    Clear Filters
                                </button>
                            }
                        </div>
                    }
                </div>

                <!-- Category Sidebar -->
                <div class="col-lg-4 mt-4 mt-lg-0">
                    <div class="card shadow-sm border-0">
                        <div class="card-body">
                            <div class="fw-bold mb-3">Statistics for @activeTab</div>
                            <div class="list-group list-group-flush">
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <span>Total Announcements</span>
                                    <span class="badge bg-primary rounded-pill">@GetTabCount()</span>
                                </div>
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <span>From Institutions</span>
                                    <span class="badge bg-success rounded-pill">@institutionCount</span>
                                </div>
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <span>From Benefactors</span>
                                    <span class="badge bg-info rounded-pill">@benefactorCount</span>
                                </div>
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <span>Pinned</span>
                                    <span class="badge bg-warning rounded-pill">@pinnedCount</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Tab Information -->
                    <div class="card shadow-sm border-0 mt-3">
                        <div class="card-body">
                            <div class="fw-bold mb-3">About @activeTab</div>
                            <p class="text-muted small">@GetTabInfo()</p>
                            <div class="d-grid gap-2 mt-3">
                                <button class="btn btn-outline-primary btn-sm" @onclick="RefreshAnnouncements">
                                    <i class="bi bi-arrow-clockwise"></i> Refresh
                                </button>
                                <!-- No create/edit/delete for students -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .modern-tabs {
        background: #f8f9fa;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.04);
        padding: 0.75rem 1rem;
    }
    .tab-pills {
        display: flex;
        gap: 1rem;
    }
    .tab-pill {
        background: #fff;
        border: 1px solid #e0e0e0;
        border-radius: 24px;
        padding: 0.5rem 1.25rem;
        font-weight: 500;
        color: #333;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        box-shadow: 0 1px 4px rgba(0,0,0,0.03);
        transition: background 0.2s, color 0.2s, box-shadow 0.2s;
        cursor: pointer;
        border: none;
        outline: none;
    }
    .tab-pill.active {
        background: #2563eb;
        color: #fff;
        box-shadow: 0 2px 8px rgba(37,99,235,0.08);
    }
    .tab-pill:hover:not(.active) {
        background: #e0e7ff;
        color: #2563eb;
    }
    .tab-pill i {
        font-size: 1.1rem;
    }
    .modern-tabs .form-select {
        border-radius: 24px;
        font-size: 0.95rem;
        padding-left: 1rem;
    }
</style>

@code {
    private List<Announcement>? allAnnouncements;
    private List<Announcement>? filteredAnnouncements;
    private bool isLoading = true;
    private string searchTerm = "";
    private string _selectedCategory = "";
    private string selectedCategory
    {
        get => _selectedCategory;
        set
        {
            if (_selectedCategory != value)
            {
                _selectedCategory = value;
                ApplyFilters();
            }
        }
    }
    private string activeTab = "All"; // Default to All tab to show all announcements
    
    // Pagination
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalAnnouncements = 0;
    private int totalPages => (int)Math.Ceiling((double)totalAnnouncements / pageSize);
    
    // Statistics
    private int institutionCount = 0;
    private int benefactorCount = 0;
    private int pinnedCount = 0;

    // Mock data for student's scholarships (in a real app, this would come from the database)
    private List<string> studentScholarshipApplications = new() { "Tech Excellence Scholarship", "STEM Leadership Grant" };
    private List<string> studentCurrentGrants = new() { "Academic Merit Scholarship", "Community Service Award" };

    protected override async Task OnInitializedAsync()
    {
        await LoadAnnouncements();
    }

    private async Task LoadAnnouncements()
    {
        isLoading = true;
        try
        {
            allAnnouncements = await AnnouncementService.GetActiveAnnouncementsAsync();
            UpdateStatistics();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading announcements: {ex.Message}");
            allAnnouncements = new List<Announcement>();
            filteredAnnouncements = new List<Announcement>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void UpdateStatistics()
    {
        if (allAnnouncements != null)
        {
            var tabFiltered = GetAnnouncementsForTab(activeTab);
            totalAnnouncements = tabFiltered.Count;
            institutionCount = tabFiltered.Count(a => a.AuthorType == UserRole.Institution);
            benefactorCount = tabFiltered.Count(a => a.AuthorType == UserRole.Benefactor);
            pinnedCount = tabFiltered.Count(a => a.IsPinned);
        }
    }

    private List<Announcement> GetAnnouncementsForTab(string tab)
    {
        if (allAnnouncements == null) return new List<Announcement>();

        return tab switch
        {
            "All" => allAnnouncements.ToList(),
            "Institution" => allAnnouncements.Where(a => a.AuthorType == UserRole.Institution && IsGeneralInstitutionAnnouncement(a)).ToList(),
            "Application" => allAnnouncements.Where(a => IsApplicationRelated(a)).ToList(),
            "Grants" => allAnnouncements.Where(a => IsGrantRelated(a)).ToList(),
            "Benefactor" => allAnnouncements.Where(a => a.AuthorType == UserRole.Benefactor).ToList(),
            _ => allAnnouncements.ToList()
        };
    }

    private bool IsGeneralInstitutionAnnouncement(Announcement announcement)
    {
        // General announcements from institutions (not specific to student's applications/grants)
        return !IsApplicationRelated(announcement) && !IsGrantRelated(announcement);
    }

    private bool IsApplicationRelated(Announcement announcement)
    {
        // Check if announcement is related to scholarships the student has applied for
        // In a real app, you'd check against the student's application records
        return studentScholarshipApplications.Any(scholarship => 
            announcement.Title.Contains(scholarship, StringComparison.OrdinalIgnoreCase) ||
            announcement.Content.Contains(scholarship, StringComparison.OrdinalIgnoreCase) ||
            announcement.Category == "Applications");
    }

    private bool IsGrantRelated(Announcement announcement)
    {
        // Check if announcement is related to scholarships the student currently has
        // In a real app, you'd check against the student's current grants/scholarships
        return studentCurrentGrants.Any(grant => 
            announcement.Title.Contains(grant, StringComparison.OrdinalIgnoreCase) ||
            announcement.Content.Contains(grant, StringComparison.OrdinalIgnoreCase)) ||
            announcement.Category == "Funding";
    }

    private void ApplyFilters()
    {
        var tabAnnouncements = GetAnnouncementsForTab(activeTab);
        var filtered = tabAnnouncements.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrEmpty(searchTerm))
        {
            filtered = filtered.Where(a => 
                a.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                a.Content.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        // Apply category filter
        if (!string.IsNullOrEmpty(selectedCategory))
        {
            filtered = filtered.Where(a => a.Category != null && a.Category.Contains(selectedCategory, StringComparison.OrdinalIgnoreCase));
        }

        // Apply pagination
        var skip = (currentPage - 1) * pageSize;
        filteredAnnouncements = filtered.Skip(skip).Take(pageSize).ToList();
        
        // Update total count for pagination
        var filteredCount = filtered.Count();
        totalAnnouncements = filteredCount;
        
        UpdateStatistics();
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        currentPage = 1;
        ApplyFilters();
        await InvokeAsync(StateHasChanged);
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        currentPage = 1;
        ApplyFilters();
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            ApplyFilters();
        }
    }

    private void ClearFilters()
    {
        searchTerm = "";
        selectedCategory = "";
        currentPage = 1;
        ApplyFilters();
    }

    private async Task RefreshAnnouncements()
    {
        await LoadAnnouncements();
    }

    private string GetAuthorBadgeClass(UserRole authorType)
    {
        return authorType switch
        {
            UserRole.Institution => "bg-success",
            UserRole.Benefactor => "bg-info",
            _ => "bg-secondary"
        };
    }

    private string GetAuthorIcon(UserRole authorType)
    {
        return authorType switch
        {
            UserRole.Institution => "bi bi-building",
            UserRole.Benefactor => "bi bi-globe",
            _ => "bi bi-person-circle"
        };

    }

    private string GetAnnouncementSource(Announcement announcement)
    {
        if (activeTab == "Application")
        {
            var matchingApp = studentScholarshipApplications.FirstOrDefault(app => 
                announcement.Title.Contains(app, StringComparison.OrdinalIgnoreCase) ||
                announcement.Content.Contains(app, StringComparison.OrdinalIgnoreCase));
            return matchingApp ?? "Application Related";
        }
        else if (activeTab == "Grants")
        {
            var matchingGrant = studentCurrentGrants.FirstOrDefault(grant => 
                announcement.Title.Contains(grant, StringComparison.OrdinalIgnoreCase) ||
                announcement.Content.Contains(grant, StringComparison.OrdinalIgnoreCase));
            return matchingGrant ?? "Grant Related";
        }
        return announcement.AuthorName ?? "Institution";
    }

    private string GetTabDescription()
    {
        return activeTab switch
        {
            "All" => "All announcements from all sources",
            "Institution" => "General announcements from educational institutions",
            "Application" => "Updates related to your scholarship applications",
            "Grants" => "Announcements about your current scholarships and grants",
            "Benefactor" => "Announcements from scholarship benefactors and donors",
            _ => "All announcements"
        };
    }

    private string GetTabInfo()
    {
        return activeTab switch
        {
            "All" => "This view shows all announcements from institutions, benefactors, and other sources. Use this to get a comprehensive overview of all available announcements.",
            "Institution" => "These are general announcements from educational institutions that may be relevant to all students.",
            "Application" => "These announcements are specifically related to scholarships you have applied for. Keep an eye on application deadlines and updates.",
            "Grants" => "These announcements are related to scholarships and grants you currently have. Stay informed about requirements and opportunities.",
            "Benefactor" => "These announcements are from scholarship benefactors and donors. They may include information about new opportunities, events, or program updates.",
            _ => ""
        };
    }

    private string GetEmptyStateIcon()
    {
        return activeTab switch
        {
            "All" => "bi bi-megaphone",
            "Institution" => "bi bi-building",
            "Application" => "bi bi-file-earmark-text",
            "Grants" => "bi bi-award",
            "Benefactor" => "bi bi-globe",
            _ => "bi bi-megaphone"
        };
    }

    private string GetEmptyStateTitle()
    {
        return activeTab switch
        {
            "All" => "No Announcements Available",
            "Institution" => "No Institution Announcements",
            "Application" => "No Application Updates",
            "Grants" => "No Grant Announcements",
            "Benefactor" => "No Benefactor Announcements",
            _ => "No Announcements Found"
        };
    }

    private string GetEmptyStateMessage()
    {
        return activeTab switch
        {
            "All" => "There are no announcements available at the moment. Check back later for updates.",
            "Institution" => "There are no general announcements from institutions at the moment.",
            "Application" => "No updates available for your scholarship applications.",
            "Grants" => "No announcements related to your current grants and scholarships.",
            "Benefactor" => "There are no announcements from benefactors at the moment.",
            _ => "No announcements match your current filters."
        };
    }

    private int GetTabCount()
    {
        if (allAnnouncements == null) return 0;
        return GetAnnouncementsForTab(activeTab).Count;
    }
}
