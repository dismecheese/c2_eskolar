@page "/dashboard/student/announcements"
@attribute [Authorize(Roles = "Student,SuperAdmin")]
@layout Layout.StudentDashLayout
@using c2_eskolar.Models
@using c2_eskolar.Models.Enums
@using c2_eskolar.Services
@inject AnnouncementService AnnouncementService

<PageTitle>Announcements</PageTitle>

<div style="padding: 2.5rem; min-height: 100vh; background: var(--blue-bg);">
    <div class="announcement-banner mb-3">
        <i class="bi bi-megaphone-fill"></i>
        <span>Announcement</span>
    </div>
    <div class="container-fluid" style="min-height: 100vh; padding: 2rem;">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-10 px-2 px-lg-4 main-content-area">
            <!-- Search and Header -->
            <div class="d-flex flex-column flex-md-row align-items-md-center mb-4 gap-3 mt-5">
                <div class="flex-grow-1">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Search announcements..." 
                               @bind="searchTerm" @oninput="OnSearchChanged" />
                        <span class="input-group-text bg-white border-0">
                            <i class="bi bi-search"></i>
                        </span>
                    </div>
                </div>
            </div>

            <!-- Category Tabs -->
            <div class="modern-tabs d-flex align-items-center mb-4 gap-3">
                <div class="tab-pills">
                    <button class="tab-pill @(activeTab == "All" ? "active" : "")" @onclick='() => SetActiveTab("All")'>
                        <i class="bi bi-megaphone"></i> <span>All</span>
                    </button>
                    <button class="tab-pill @(activeTab == "Institution" ? "active" : "")" @onclick='() => SetActiveTab("Institution")'>
                        <i class="bi bi-building"></i> <span>Institution</span>
                    </button>
                    <button class="tab-pill @(activeTab == "Application" ? "active" : "")" @onclick='() => SetActiveTab("Application")'>
                        <i class="bi bi-file-earmark-text"></i> <span>Applications</span>
                    </button>
                    <button class="tab-pill @(activeTab == "Grants" ? "active" : "")" @onclick='() => SetActiveTab("Grants")'>
                        <i class="bi bi-award"></i> <span>Grants</span>
                    </button>
                    <button class="tab-pill @(activeTab == "Benefactor" ? "active" : "")" @onclick='() => SetActiveTab("Benefactor")'>
                        <i class="bi bi-globe"></i> <span>Benefactor</span>
                    </button>
                </div>
                <div class="ms-auto" style="min-width:180px;">
                    <select class="form-select form-select-sm" @bind="selectedCategory">
                        <option value="">All Categories</option>
                        <option value="Requirements">Requirements</option>
                        <option value="Results">Results</option>
                        <option value="Events">Events</option>
                        <option value="General">General</option>
                    </select>
                </div>
            </div>

            <div class="row gx-4 gy-4">
                <!-- Announcements List -->
                <div class="col-lg-8 mb-4 mb-lg-0">
                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center py-5">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (filteredAnnouncements?.Any() == true)
                    {
                        <div class="mb-3">
                            <h5 class="text-muted">@GetTabDescription()</h5>
                        </div>

                        <div class="d-flex flex-column gap-4">
                            @foreach (var announcement in filteredAnnouncements.OrderByDescending(a => a.IsPinned).ThenByDescending(a => a.CreatedAt))
                            {
                                <div class="card shadow-sm border-0 announcement-card @(announcement.IsPinned ? "border-warning border-2" : "")">
                                    <div class="card-body">
                                        <!-- Header with badges -->
                                        <div class="d-flex justify-content-between align-items-start mb-2">
                                            <div class="d-flex gap-2 flex-wrap">
                                                @if (announcement.IsPinned)
                                                {
                                                    <span class="badge bg-warning text-dark">
                                                        <i class="bi bi-pin-fill"></i> Pinned
                                                    </span>
                                                }
                                                <span class="badge @(GetAuthorBadgeClass(announcement.AuthorType))">
                                                    @announcement.AuthorType
                                                </span>
                                                @if (!string.IsNullOrEmpty(announcement.Category))
                                                {
                                                    <span class="badge bg-info">@announcement.Category</span>
                                                }
                                                <span class="badge bg-light text-dark">
                                                    @GetAnnouncementSource(announcement)
                                                </span>
                                            </div>
                                            <small class="text-muted">@announcement.CreatedAt.ToString("MMM dd, yyyy")</small>
                                        </div>

                                        <!-- Content -->
                                        <div class="d-flex align-items-start gap-3">
                                            <div>
                                                <i class="@(GetAuthorIcon(announcement.AuthorType)) fs-2 text-secondary"></i>
                                            </div>
                                            <div class="flex-grow-1">
                                                <div class="fw-semibold mb-1">@announcement.Title</div>
                                                <div class="text-secondary">@announcement.Content</div>
                                                @if (activeTab == "Application" || activeTab == "Grants")
                                                {
                                                    <div class="mt-2">
                                                        <small class="text-muted">
                                                            @if (activeTab == "Application")
                                                            {
                                                                <span><i class="bi bi-file-earmark"></i> Related to your scholarship application</span>
                                                            }
                                                            else
                                                            {
                                                                <span><i class="bi bi-trophy"></i> Related to your current scholarship</span>
                                                            }
                                                        </small>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        <!-- Pagination (if needed) -->
                        @if (totalAnnouncements > pageSize)
                        {
                            <nav aria-label="Announcements pagination" class="mt-4">
                                <ul class="pagination justify-content-center">
                                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                        <a class="page-link" href="#" @onclick="() => ChangePage(currentPage - 1)" @onclick:preventDefault="true">Previous</a>
                                    </li>
                                    @for (int i = 1; i <= totalPages; i++)
                                    {
                                        <li class="page-item @(currentPage == i ? "active" : "")">
                                            <a class="page-link" href="#" @onclick="() => ChangePage(i)" @onclick:preventDefault="true">@i</a>
                                        </li>
                                    }
                                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                        <a class="page-link" href="#" @onclick="() => ChangePage(currentPage + 1)" @onclick:preventDefault="true">Next</a>
                                    </li>
                                </ul>
                            </nav>
                        }
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <div class="mb-3">
                                <i class="@GetEmptyStateIcon() fs-1 text-muted"></i>
                            </div>
                            <h5 class="text-muted">@GetEmptyStateTitle()</h5>
                            <p class="text-muted">@GetEmptyStateMessage()</p>
                            @if (!string.IsNullOrEmpty(searchTerm) || !string.IsNullOrEmpty(selectedCategory))
                            {
                                <button class="btn btn-outline-primary btn-sm" @onclick="ClearFilters">
                                    Clear Filters
                                </button>
                            }
                        </div>
                    }
                </div>

                <!-- Category Sidebar -->
                <div class="col-lg-4 mt-4 mt-lg-0">
                    <div class="card shadow-sm border-0 sidebar-card mb-4">
                        <div class="card-body">
                            <div class="fw-bold mb-3">Statistics for @activeTab</div>
                            <div class="list-group list-group-flush">
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <span>Total Announcements</span>
                                    <span class="badge bg-primary rounded-pill">@GetTabCount()</span>
                                </div>
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <span>From Institutions</span>
                                    <span class="badge bg-success rounded-pill">@institutionCount</span>
                                </div>
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <span>From Benefactors</span>
                                    <span class="badge bg-info rounded-pill">@benefactorCount</span>
                                </div>
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <span>Pinned</span>
                                    <span class="badge bg-warning rounded-pill">@pinnedCount</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Tab Information -->
                    <div class="card shadow-sm border-0 sidebar-card">
                        <div class="card-body">
                            <div class="fw-bold mb-3">About @activeTab</div>
                            <p class="text-muted small">@GetTabInfo()</p>
                            <div class="d-grid gap-2 mt-3">
                                <button class="btn btn-outline-primary btn-sm" @onclick="RefreshAnnouncements">
                                    <i class="bi bi-arrow-clockwise"></i> Refresh
                                </button>
                                <!-- No create/edit/delete for students -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            </div> <!-- /.col-12 col-lg-10 main-content-area -->
        </div> <!-- /.row justify-content-center -->
    </div> <!-- /.container-fluid -->
</div> <!-- outer padded div -->

<style>
    .main-content-area {
        margin-right: 0;
    }
    @@media (min-width: 992px) {
        .main-content-area {
            margin-right: 6rem;
        }
    }
    .announcement-card {
        margin-bottom: 0.5rem;
        padding: 0.5rem 0.5rem 0.5rem 0.5rem;
    }
    .sidebar-card {
        margin-bottom: 1.5rem;
        padding: 1.25rem 1.25rem 1.25rem 1.25rem;
    }
    .container-fluid {
        padding-top: 1.5rem;
        padding-bottom: 1.5rem;
    }
    .modern-tabs {
        margin-bottom: 2rem !important;
    }
    .mb-4 {
        margin-bottom: 2rem !important;
    }
    .mb-3 {
        margin-bottom: 1.25rem !important;
    }
    .mt-4 {
        margin-top: 2rem !important;
    }
    .mt-5 {
        margin-top: 2.5rem !important;
    }
    .gx-4 {
        --bs-gutter-x: 2rem;
    }
    .gy-4 {
        --bs-gutter-y: 2rem;
    }
    .announcement-banner {
        width: 100%;
        background: var(--blue-gradient);
        color: #fff;
        font-size: 1.35rem;
        font-weight: 600;
        letter-spacing: 0.03em;
        display: flex;
        align-items: center;
        gap: 0.75rem;
        padding: 1.1rem 0 1.1rem 2.2rem;
        border-radius: 0 0 18px 18px;
        box-shadow: 0 2px 12px rgba(37,99,235,0.10);
        margin-bottom: 1.5rem;
        margin-right: 0;
    }
    .announcement-banner i {
        font-size: 1.7rem;
        margin-right: 0.5rem;
    }
    :root {
        --blue-main: #2563eb;
        --blue-light: #3b82f6;
        --blue-bg: #e0e7ff;
        --blue-gradient: linear-gradient(90deg, #2563eb 0%, #3b82f6 100%);
        --blue-badge: #2563eb;
        --blue-badge-light: #3b82f6;
        --blue-border: #2563eb33;
        --blue-shadow: 0 2px 8px rgba(37,99,235,0.08);
    }
    .modern-tabs {
        background: var(--blue-bg);
        border-radius: 14px;
        box-shadow: var(--blue-shadow);
        padding: 0.85rem 1.2rem;
        border: 1.5px solid var(--blue-border);
    }
    .tab-pills {
        display: flex;
        gap: 1rem;
    }
    .tab-pill {
        background: #fff;
        border: 2px solid transparent;
        border-radius: 24px;
        padding: 0.5rem 1.25rem;
        font-weight: 500;
        color: var(--blue-main);
        display: flex;
        align-items: center;
        gap: 0.5rem;
        box-shadow: 0 1px 6px rgba(37,99,235,0.07);
        transition: background 0.2s, color 0.2s, box-shadow 0.2s, border 0.2s;
        cursor: pointer;
        outline: none;
        position: relative;
    }
    .tab-pill.active {
        background: var(--blue-gradient);
        color: #fff;
        border: 2px solid var(--blue-main);
        box-shadow: 0 2px 12px rgba(37,99,235,0.13);
    }
    .tab-pill:hover:not(.active) {
        background: var(--blue-bg);
        color: var(--blue-main);
        border: 2px solid var(--blue-main);
    }
    .tab-pill i {
        font-size: 1.1rem;
    }
    .modern-tabs .form-select {
        border-radius: 24px;
        font-size: 0.95rem;
        padding-left: 1rem;
        border: 1.5px solid var(--blue-border);
        background: #fff;
        color: var(--blue-main);
    }
    .card.shadow-sm {
        box-shadow: 0 2px 12px rgba(37,99,235,0.07), 0 1.5px 4px rgba(0,0,0,0.03);
        border-radius: 16px;
    }
    .card-body {
        border-radius: 14px;
    }
    .badge.bg-primary, .badge.bg-success, .badge.bg-info, .badge.bg-warning, .badge.bg-light {
        font-size: 0.92em;
        padding: 0.45em 0.9em;
        border-radius: 16px;
        font-weight: 500;
        letter-spacing: 0.01em;
    }
    .badge.bg-primary {
        background: var(--blue-main)!important;
        color: #fff!important;
    }
    .badge.bg-success {
        background: var(--blue-light)!important;
        color: #fff!important;
    }
    .badge.bg-info {
        background: #60a5fa!important;
        color: #fff!important;
    }
    .badge.bg-warning {
        background: #fbbf24!important;
        color: #1e293b!important;
    }
    .badge.bg-light {
        background: #f1f5f9!important;
        color: var(--blue-main)!important;
        border: 1px solid var(--blue-border);
    }
    .btn-outline-primary {
        color: var(--blue-main);
        border-color: var(--blue-main);
        background: #fff;
        transition: background 0.2s, color 0.2s, border 0.2s;
    }
    .btn-outline-primary:hover, .btn-outline-primary:focus {
        background: var(--blue-gradient);
        color: #fff;
        border-color: var(--blue-main);
    }
    .pagination .page-link {
        color: var(--blue-main);
        border-radius: 12px;
        border: 1.5px solid var(--blue-border);
        transition: background 0.2s, color 0.2s;
    }
    .pagination .page-item.active .page-link {
        background: var(--blue-gradient);
        color: #fff;
        border: 1.5px solid var(--blue-main);
    }
    .pagination .page-link:hover {
        background: var(--blue-bg);
        color: var(--blue-main);
    }
    .list-group-item {
        background: transparent;
    }
</style>

@code {
    // Announcements data
    private List<Announcement>? allAnnouncements;
    private List<Announcement>? filteredAnnouncements;
    private bool isLoading = true;

    // Filtering and UI state
    private string searchTerm = string.Empty;
    private string _selectedCategory = string.Empty;
    private string selectedCategory
    {
        get => _selectedCategory;
        set
        {
            if (_selectedCategory != value)
            {
                _selectedCategory = value;
                currentPage = 1;
                ApplyFilters();
            }
        }
    }
    private string activeTab = "All";

    // Pagination
    private int currentPage = 1;
    private const int pageSize = 10;
    private int totalAnnouncements = 0;
    private int totalPages => (int)Math.Ceiling((double)totalAnnouncements / pageSize);

    // Statistics
    private int institutionCount = 0;
    private int benefactorCount = 0;
    private int pinnedCount = 0;

    // Mock data for student's scholarships (replace with real data in production)
    private readonly List<string> studentScholarshipApplications = new() { "Tech Excellence Scholarship", "STEM Leadership Grant" };
    private readonly List<string> studentCurrentGrants = new() { "Academic Merit Scholarship", "Community Service Award" };

    protected override async Task OnInitializedAsync()
    {
        await LoadAnnouncements();
    }

    // Loads announcements from the service
    private async Task LoadAnnouncements()
    {
        isLoading = true;
        try
        {
            allAnnouncements = await AnnouncementService.GetActiveAnnouncementsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading announcements: {ex.Message}");
            allAnnouncements = new List<Announcement>();
        }
        finally
        {
            isLoading = false;
            ApplyFilters();
        }
    }

    // Applies all filters and updates statistics
    private void ApplyFilters()
    {
        var tabAnnouncements = GetAnnouncementsForTab(activeTab);
        IEnumerable<Announcement> filtered = tabAnnouncements;

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(a =>
                a.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                a.Content.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }
        if (!string.IsNullOrWhiteSpace(selectedCategory))
        {
            filtered = filtered.Where(a => a.Category != null && a.Category.Contains(selectedCategory, StringComparison.OrdinalIgnoreCase));
        }

        totalAnnouncements = filtered.Count();
        filteredAnnouncements = filtered.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
        UpdateStatistics(tabAnnouncements);
    }

    // Updates statistics for the sidebar
    private void UpdateStatistics(List<Announcement> tabFiltered)
    {
        institutionCount = tabFiltered.Count(a => a.AuthorType == UserRole.Institution);
        benefactorCount = tabFiltered.Count(a => a.AuthorType == UserRole.Benefactor);
        pinnedCount = tabFiltered.Count(a => a.IsPinned);
    }

    // Returns announcements for the selected tab
    private List<Announcement> GetAnnouncementsForTab(string tab)
    {
        if (allAnnouncements == null) return new();
        return tab switch
        {
            "All" => allAnnouncements.ToList(),
            "Institution" => allAnnouncements.Where(a => a.AuthorType == UserRole.Institution && IsGeneralInstitutionAnnouncement(a)).ToList(),
            "Application" => allAnnouncements.Where(IsApplicationRelated).ToList(),
            "Grants" => allAnnouncements.Where(IsGrantRelated).ToList(),
            "Benefactor" => allAnnouncements.Where(a => a.AuthorType == UserRole.Benefactor).ToList(),
            _ => allAnnouncements.ToList()
        };
    }

    // Helper: Is a general institution announcement?
    private bool IsGeneralInstitutionAnnouncement(Announcement a) => !IsApplicationRelated(a) && !IsGrantRelated(a);

    // Helper: Is announcement related to student's applications?
    private bool IsApplicationRelated(Announcement a) =>
        studentScholarshipApplications.Any(s => a.Title.Contains(s, StringComparison.OrdinalIgnoreCase) || a.Content.Contains(s, StringComparison.OrdinalIgnoreCase))
        || a.Category == "Applications";

    // Helper: Is announcement related to student's current grants?
    private bool IsGrantRelated(Announcement a) =>
        studentCurrentGrants.Any(g => a.Title.Contains(g, StringComparison.OrdinalIgnoreCase) || a.Content.Contains(g, StringComparison.OrdinalIgnoreCase))
        || a.Category == "Funding";

    // UI event handlers
    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        currentPage = 1;
        ApplyFilters();
        await InvokeAsync(StateHasChanged);
    }
    private void SetActiveTab(string tab)
    {
        if (activeTab != tab)
        {
            activeTab = tab;
            currentPage = 1;
            ApplyFilters();
        }
    }
    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            ApplyFilters();
        }
    }
    private void ClearFilters()
    {
        searchTerm = string.Empty;
        selectedCategory = string.Empty;
        currentPage = 1;
        ApplyFilters();
    }
    private async Task RefreshAnnouncements() => await LoadAnnouncements();

    // UI helpers
    private string GetAuthorBadgeClass(UserRole authorType) => authorType switch
    {
        UserRole.Institution => "bg-success",
        UserRole.Benefactor => "bg-info",
        _ => "bg-secondary"
    };
    private string GetAuthorIcon(UserRole authorType) => authorType switch
    {
        UserRole.Institution => "bi bi-building",
        UserRole.Benefactor => "bi bi-globe",
        _ => "bi bi-person-circle"
    };
    private string GetAnnouncementSource(Announcement a)
    {
        if (activeTab == "Application")
        {
            var match = studentScholarshipApplications.FirstOrDefault(app => a.Title.Contains(app, StringComparison.OrdinalIgnoreCase) || a.Content.Contains(app, StringComparison.OrdinalIgnoreCase));
            return match ?? "Application Related";
        }
        if (activeTab == "Grants")
        {
            var match = studentCurrentGrants.FirstOrDefault(grant => a.Title.Contains(grant, StringComparison.OrdinalIgnoreCase) || a.Content.Contains(grant, StringComparison.OrdinalIgnoreCase));
            return match ?? "Grant Related";
        }
        return a.AuthorName ?? "Institution";
    }
    private string GetTabDescription() => activeTab switch
    {
        "All" => "All announcements from all sources",
        "Institution" => "General announcements from educational institutions",
        "Application" => "Updates related to your scholarship applications",
        "Grants" => "Announcements about your current scholarships and grants",
        "Benefactor" => "Announcements from scholarship benefactors and donors",
        _ => "All announcements"
    };
    private string GetTabInfo() => activeTab switch
    {
        "All" => "This view shows all announcements from institutions, benefactors, and other sources. Use this to get a comprehensive overview of all available announcements.",
        "Institution" => "These are general announcements from educational institutions that may be relevant to all students.",
        "Application" => "These announcements are specifically related to scholarships you have applied for. Keep an eye on application deadlines and updates.",
        "Grants" => "These announcements are related to scholarships and grants you currently have. Stay informed about requirements and opportunities.",
        "Benefactor" => "These announcements are from scholarship benefactors and donors. They may include information about new opportunities, events, or program updates.",
        _ => string.Empty
    };
    private string GetEmptyStateIcon() => activeTab switch
    {
        "All" => "bi bi-megaphone",
        "Institution" => "bi bi-building",
        "Application" => "bi bi-file-earmark-text",
        "Grants" => "bi bi-award",
        "Benefactor" => "bi bi-globe",
        _ => "bi bi-megaphone"
    };
    private string GetEmptyStateTitle() => activeTab switch
    {
        "All" => "No Announcements Available",
        "Institution" => "No Institution Announcements",
        "Application" => "No Application Updates",
        "Grants" => "No Grant Announcements",
        "Benefactor" => "No Benefactor Announcements",
        _ => "No Announcements Found"
    };
    private string GetEmptyStateMessage() => activeTab switch
    {
        "All" => "There are no announcements available at the moment. Check back later for updates.",
        "Institution" => "There are no general announcements from institutions at the moment.",
        "Application" => "No updates available for your scholarship applications.",
        "Grants" => "No announcements related to your current grants and scholarships.",
        "Benefactor" => "There are no announcements from benefactors at the moment.",
        _ => "No announcements match your current filters."
    };
    private int GetTabCount() => GetAnnouncementsForTab(activeTab).Count;
}
