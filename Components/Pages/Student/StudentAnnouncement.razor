@page "/dashboard/student/announcements"
@attribute [Authorize(Roles = "Student,SuperAdmin")]
@layout Layout.StudentDashLayout
@using c2_eskolar.Models
@using c2_eskolar.Models.Enums
@using c2_eskolar.Services
@inject AnnouncementService AnnouncementService
@inject BookmarkService BookmarkService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Announcements</PageTitle>

<div class="container-fluid" style="min-height: 100vh;">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-10">
            <!-- Search and Header -->
            <div class="d-flex flex-column flex-md-row align-items-md-center mb-4 gap-3 mt-5">
                <div class="flex-grow-1">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Search announcements..." 
                               @bind="searchTerm" @oninput="OnSearchChanged" />
                        <span class="input-group-text bg-white border-0">
                            <i class="bi bi-search"></i>
                        </span>
                    </div>
                </div>
            </div>

            <!-- Category Tabs -->
            <div class="modern-tabs d-flex align-items-center mb-4 gap-3">
                <div class="tab-pills">
                    <button class="tab-pill @(activeTab == "All" ? "active" : "")" @onclick='() => SetActiveTab("All")'>
                        <i class="bi bi-megaphone"></i> <span>All</span>
                    </button>
                    <button class="tab-pill @(activeTab == "Institution" ? "active" : "")" @onclick='() => SetActiveTab("Institution")'>
                        <i class="bi bi-building"></i> <span>Institution</span>
                    </button>
                    <button class="tab-pill @(activeTab == "Application" ? "active" : "")" @onclick='() => SetActiveTab("Application")'>
                        <i class="bi bi-file-earmark-text"></i> <span>Applications</span>
                    </button>
                    <button class="tab-pill @(activeTab == "Grants" ? "active" : "")" @onclick='() => SetActiveTab("Grants")'>
                        <i class="bi bi-award"></i> <span>Grants</span>
                    </button>
                    <button class="tab-pill @(activeTab == "Benefactor" ? "active" : "")" @onclick='() => SetActiveTab("Benefactor")'>
                        <i class="bi bi-globe"></i> <span>Benefactor</span>
                    </button>
                </div>
                <div class="ms-auto" style="min-width:180px;">
                    <select class="form-select form-select-sm" @bind="selectedCategory">
                        <option value="">All Categories</option>
                        <option value="Requirements">Requirements</option>
                        <option value="Results">Results</option>
                        <option value="Events">Events</option>
                        <option value="General">General</option>
                    </select>
                </div>
            </div>

            <div class="row">
                <!-- Announcements List -->
                <div class="col-lg-8">
                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center py-5">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (filteredAnnouncements?.Any() == true)
                    {
                        <div class="mb-3">
                            <h5 class="text-muted">@GetTabDescription()</h5>
                        </div>

                        <div class="d-flex flex-column gap-3">
                            @foreach (var announcement in filteredAnnouncements.OrderByDescending(a => a.IsPinned).ThenByDescending(a => a.CreatedAt))
                            {
                                <div class="card shadow-sm border-0 @(announcement.IsPinned ? "border-warning border-2" : "")">
                                    <div class="card-body">
                                        <!-- Header with badges -->
                                        <div class="d-flex justify-content-between align-items-start mb-2">
                                            <div class="d-flex gap-2 flex-wrap">
                                                @if (announcement.IsPinned)
                                                {
                                                    <span class="badge bg-warning text-dark">
                                                        <i class="bi bi-pin-fill"></i> Pinned
                                                    </span>
                                                }
                                                <span class="badge @(GetAuthorBadgeClass(announcement.AuthorType))">
                                                    @announcement.AuthorType
                                                </span>
                                                @if (!string.IsNullOrEmpty(announcement.Category))
                                                {
                                                    <span class="badge bg-info">@announcement.Category</span>
                                                }
                                                <span class="badge bg-light text-dark">
                                                    @GetAnnouncementSource(announcement)
                                                </span>
                                            </div>
                                            <div class="d-flex align-items-center gap-2">
                                                <small class="text-muted">@announcement.CreatedAt.ToString("MMM dd, yyyy")</small>
                                                <button class="btn @(GetAnnouncementBookmarkButtonClass(announcement.AnnouncementId)) btn-sm" 
                                                        @onclick="(e) => ToggleAnnouncementBookmark(e, announcement.AnnouncementId)" 
                                                        @onclick:stopPropagation="true"
                                                        title="@(GetAnnouncementBookmarkTooltip(announcement.AnnouncementId))">
                                                    <i class="bi @(GetAnnouncementBookmarkIcon(announcement.AnnouncementId))"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-secondary" 
                                                        @onclick="() => ToggleAnnouncementExpansion(announcement.AnnouncementId)"
                                                        @onclick:stopPropagation="true">
                                                    <i class="bi bi-@(IsAnnouncementExpanded(announcement.AnnouncementId) ? "chevron-up" : "chevron-down")"></i>
                                                </button>
                                            </div>
                                        </div>

                                        <!-- Content -->
                                        <div class="d-flex align-items-start gap-3">
                                            <div>
                                                <i class="@(GetAuthorIcon(announcement.AuthorType)) fs-2 text-secondary"></i>
                                            </div>
                                            <div class="flex-grow-1">
                                                <div class="fw-semibold mb-1 cursor-pointer" @onclick="() => IncrementView(announcement.AnnouncementId)">
                                                    @announcement.Title
                                                </div>
                                                
                                                <!-- Summary/Preview (always visible) -->
                                                <div class="text-secondary mb-2">
                                                    @(announcement.Summary ?? 
                                                      (announcement.Content.Length > 150 ? 
                                                       announcement.Content.Substring(0, 150) + "..." : 
                                                       announcement.Content))
                                                </div>

                                                <!-- Collapsible Details -->
                                                @if (IsAnnouncementExpanded(announcement.AnnouncementId))
                                                {
                                                    <div class="announcement-details border-top pt-3 mt-2">
                                                        <!-- Full Content -->
                                                        @if (!string.IsNullOrEmpty(announcement.Content) && announcement.Content.Length > 150)
                                                        {
                                                            <div class="mb-3">
                                                                <h6 class="fw-bold">Full Description:</h6>
                                                                <div class="text-secondary">@announcement.Content</div>
                                                            </div>
                                                        }

                                                        <!-- Additional Details -->
                                                        <div class="row">
                                                            @if (!string.IsNullOrEmpty(announcement.OrganizationName))
                                                            {
                                                                <div class="col-md-6 mb-2">
                                                                    <small class="text-muted">Organization:</small>
                                                                    <div class="fw-semibold">@announcement.OrganizationName</div>
                                                                </div>
                                                            }
                                                            @if (announcement.ExpiryDate.HasValue)
                                                            {
                                                                <div class="col-md-6 mb-2">
                                                                    <small class="text-muted">Deadline:</small>
                                                                    <div class="fw-semibold">@announcement.ExpiryDate.Value.ToString("MMM dd, yyyy")</div>
                                                                </div>
                                                            }
                                                            <div class="col-md-6 mb-2">
                                                                <small class="text-muted">Visibility:</small>
                                                                <div class="fw-semibold">@(announcement.IsPublic ? "Public" : "Private")</div>
                                                            </div>
                                                            <div class="col-md-6 mb-2">
                                                                <small class="text-muted">Status:</small>
                                                                <div class="fw-semibold">@(announcement.IsActive ? "Active" : "Inactive")</div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                                
                                                <div class="mt-2 d-flex justify-content-between align-items-center">
                                                    <small class="text-muted">
                                                        <i class="bi bi-eye"></i> @announcement.ViewCount views
                                                        • By @announcement.AuthorName
                                                    </small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <div class="mb-3">
                                <i class="bi bi-megaphone fs-1 text-muted"></i>
                            </div>
                            <h5 class="text-muted">@GetEmptyStateTitle()</h5>
                            <p class="text-muted">@GetEmptyStateMessage()</p>
                            @if (!string.IsNullOrEmpty(searchTerm) || !string.IsNullOrEmpty(selectedCategory))
                            {
                                <button class="btn btn-outline-primary btn-sm me-2" @onclick="ClearFilters">
                                    Clear Filters
                                </button>
                            }
                        </div>
                    }
                </div>

                <!-- Statistics Sidebar -->
                <div class="col-lg-4 mt-4 mt-lg-0">
                    <div class="card shadow-sm border-0">
                        <div class="card-body">
                            <div class="fw-bold mb-3">Statistics for @activeTab</div>
                            <div class="list-group list-group-flush">
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <span>Total Announcements</span>
                                    <span class="badge bg-primary rounded-pill">@GetTabCount()</span>
                                </div>
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <span>From Institutions</span>
                                    <span class="badge bg-success rounded-pill">@institutionCount</span>
                                </div>
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <span>From Benefactors</span>
                                    <span class="badge bg-info rounded-pill">@benefactorCount</span>
                                </div>
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <span>Pinned</span>
                                    <span class="badge bg-warning rounded-pill">@pinnedCount</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Announcement>? allAnnouncements;
    private List<Announcement>? filteredAnnouncements;
    private bool isLoading = true;

    // User and bookmark state
    private string? currentUserId;
    private HashSet<Guid> bookmarkedAnnouncementIds = new HashSet<Guid>();

    // Filtering and UI state
    private string searchTerm = string.Empty;
    private string _selectedCategory = string.Empty;
    private string selectedCategory
    {
        get => _selectedCategory;
        set
        {
            if (_selectedCategory != value)
            {
                _selectedCategory = value;
                ApplyFilters();
            }
        }
    }
    private string activeTab = "All";

    // Pagination
    private int currentPage = 1;
    private const int pageSize = 10;
    private int totalAnnouncements = 0;
    private int totalPages => (int)Math.Ceiling((double)totalAnnouncements / pageSize);

    // Statistics
    private int institutionCount = 0;
    private int benefactorCount = 0;
    private int pinnedCount = 0;

    // Mock data for student's scholarships (replace with real data in production)
    private readonly List<string> studentScholarshipApplications = new() { "Tech Excellence Scholarship", "STEM Leadership Grant" };
    private readonly List<string> studentCurrentGrants = new() { "Academic Merit Scholarship", "Community Service Award" };

    protected override async Task OnInitializedAsync()
    {
        // Get current user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            currentUserId = user.FindFirst("sub")?.Value ?? user.FindFirst("id")?.Value;
        }

        await LoadAnnouncements();
        
        // Load user's announcement bookmarks
        if (!string.IsNullOrEmpty(currentUserId))
        {
            await LoadUserAnnouncementBookmarks();
        }
    }

    private async Task LoadUserAnnouncementBookmarks()
    {
        try
        {
            var bookmarks = await BookmarkService.GetUserAnnouncementBookmarksAsync(currentUserId!);
            bookmarkedAnnouncementIds = bookmarks.Select(b => b.AnnouncementId).ToHashSet();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading announcement bookmarks: {ex.Message}");
        }
    }

    // Loads announcements from the service
    private async Task LoadAnnouncements()
    {
        isLoading = true;
        try
        {
            allAnnouncements = await AnnouncementService.GetActiveAnnouncementsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading announcements: {ex.Message}");
            allAnnouncements = new List<Announcement>();
        }
        finally
        {
            isLoading = false;
            ApplyFilters();
        }
    }

    // Applies all filters and updates statistics
    private void ApplyFilters()
    {
        var tabAnnouncements = GetAnnouncementsForTab(activeTab);
        IEnumerable<Announcement> filtered = tabAnnouncements;

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(a =>
                a.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                a.Content.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }
        if (!string.IsNullOrWhiteSpace(selectedCategory))
        {
            filtered = filtered.Where(a => a.Category != null && a.Category.Contains(selectedCategory, StringComparison.OrdinalIgnoreCase));
        }

        totalAnnouncements = filtered.Count();
        filteredAnnouncements = filtered.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
        UpdateStatistics(tabAnnouncements);
    }

    // Updates statistics for the sidebar
    private void UpdateStatistics(List<Announcement> tabFiltered)
    {
        institutionCount = tabFiltered.Count(a => a.AuthorType == UserRole.Institution);
        benefactorCount = tabFiltered.Count(a => a.AuthorType == UserRole.Benefactor);
        pinnedCount = tabFiltered.Count(a => a.IsPinned);
    }

    // Returns announcements for the selected tab
    private List<Announcement> GetAnnouncementsForTab(string tab)
    {
        if (allAnnouncements == null) return new();
        return tab switch
        {
            "All" => allAnnouncements.ToList(),
            "Institution" => allAnnouncements.Where(a => a.AuthorType == UserRole.Institution && IsGeneralInstitutionAnnouncement(a)).ToList(),
            "Application" => allAnnouncements.Where(IsApplicationRelated).ToList(),
            "Grants" => allAnnouncements.Where(IsGrantRelated).ToList(),
            "Benefactor" => allAnnouncements.Where(a => a.AuthorType == UserRole.Benefactor).ToList(),
            _ => allAnnouncements.ToList()
        };
    }

    // Helper: Is a general institution announcement?
    private bool IsGeneralInstitutionAnnouncement(Announcement a) => !IsApplicationRelated(a) && !IsGrantRelated(a);

    // Helper: Is announcement related to student's applications?
    private bool IsApplicationRelated(Announcement a) =>
        studentScholarshipApplications.Any(s => a.Title.Contains(s, StringComparison.OrdinalIgnoreCase) || a.Content.Contains(s, StringComparison.OrdinalIgnoreCase))
        || a.Category == "Applications";

    // Helper: Is announcement related to student's current grants?
    private bool IsGrantRelated(Announcement a) =>
        studentCurrentGrants.Any(g => a.Title.Contains(g, StringComparison.OrdinalIgnoreCase) || a.Content.Contains(g, StringComparison.OrdinalIgnoreCase))
        || a.Category == "Funding";

    // UI event handlers
    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        currentPage = 1;
        ApplyFilters();
        await InvokeAsync(StateHasChanged);
    }
    private void SetActiveTab(string tab)
    {
        if (activeTab != tab)
        {
            activeTab = tab;
            currentPage = 1;
            ApplyFilters();
        }
    }
    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            ApplyFilters();
        }
    }
    private void ClearFilters()
    {
        searchTerm = string.Empty;
        selectedCategory = string.Empty;
        currentPage = 1;
        ApplyFilters();
    }
    private async Task RefreshAnnouncements() => await LoadAnnouncements();

    // UI helpers
    private string GetAuthorBadgeClass(UserRole authorType) => authorType switch
    {
        UserRole.Institution => "bg-success",
        UserRole.Benefactor => "bg-info",
        _ => "bg-secondary"
    };
    private string GetAuthorIcon(UserRole authorType) => authorType switch
    {
        UserRole.Institution => "bi bi-building",
        UserRole.Benefactor => "bi bi-globe",
        _ => "bi bi-person-circle"
    };
    private string GetAnnouncementSource(Announcement a)
    {
        if (activeTab == "Application")
        {
            var match = studentScholarshipApplications.FirstOrDefault(app => a.Title.Contains(app, StringComparison.OrdinalIgnoreCase) || a.Content.Contains(app, StringComparison.OrdinalIgnoreCase));
            return match ?? "Application Related";
        }
        if (activeTab == "Grants")
        {
            var match = studentCurrentGrants.FirstOrDefault(grant => a.Title.Contains(grant, StringComparison.OrdinalIgnoreCase) || a.Content.Contains(grant, StringComparison.OrdinalIgnoreCase));
            return match ?? "Grant Related";
        }
        return a.AuthorName ?? "Institution";
    }
    private string GetTabDescription() => activeTab switch
    {
        "All" => "All announcements from all sources",
        "Institution" => "General announcements from educational institutions",
        "Application" => "Updates related to your scholarship applications",
        "Grants" => "Announcements about your current scholarships and grants",
        "Benefactor" => "Announcements from scholarship benefactors and donors",
        _ => "All announcements"
    };
    private string GetTabInfo() => activeTab switch
    {
        "All" => "This view shows all announcements from institutions, benefactors, and other sources. Use this to get a comprehensive overview of all available announcements.",
        "Institution" => "These are general announcements from educational institutions that may be relevant to all students.",
        "Application" => "These announcements are specifically related to scholarships you have applied for. Keep an eye on application deadlines and updates.",
        "Grants" => "These announcements are related to scholarships and grants you currently have. Stay informed about requirements and opportunities.",
        "Benefactor" => "These announcements are from scholarship benefactors and donors. They may include information about new opportunities, events, or program updates.",
        _ => string.Empty
    };
    private string GetEmptyStateIcon() => activeTab switch
    {
        "All" => "bi bi-megaphone",
        "Institution" => "bi bi-building",
        "Application" => "bi bi-file-earmark-text",
        "Grants" => "bi bi-award",
        "Benefactor" => "bi bi-globe",
        _ => "bi bi-megaphone"
    };
    private string GetEmptyStateTitle() => activeTab switch
    {
        "All" => "No Announcements Available",
        "Institution" => "No Institution Announcements",
        "Application" => "No Application Updates",
        "Grants" => "No Grant Announcements",
        "Benefactor" => "No Benefactor Announcements",
        _ => "No Announcements Found"
    };
    private string GetEmptyStateMessage() => activeTab switch
    {
        "All" => "There are no announcements available at the moment. Check back later for updates.",
        "Institution" => "There are no general announcements from institutions at the moment.",
        "Application" => "No updates available for your scholarship applications.",
        "Grants" => "No announcements related to your current grants and scholarships.",
        "Benefactor" => "There are no announcements from benefactors at the moment.",
        _ => "No announcements match your current filters."
    };
    private int GetTabCount() => GetAnnouncementsForTab(activeTab).Count;

    // Expanded announcements state
    private HashSet<Guid> expandedAnnouncementIds = new();

    private void ToggleAnnouncementExpansion(Guid announcementId)
    {
        if (expandedAnnouncementIds.Contains(announcementId))
        {
            expandedAnnouncementIds.Remove(announcementId);
        }
        else
        {
            expandedAnnouncementIds.Add(announcementId);
        }
    }

    private bool IsAnnouncementExpanded(Guid announcementId) => expandedAnnouncementIds.Contains(announcementId);

    private void IncrementView(Guid announcementId)
    {
        var a = allAnnouncements?.FirstOrDefault(x => x.AnnouncementId == announcementId);
        if (a != null)
        {
            a.ViewCount++;
            // Local state updated; if a server update is required, AnnouncementService can be used here
            StateHasChanged();
        }
    }

    // Announcement Bookmark Methods
    private async Task ToggleAnnouncementBookmark(MouseEventArgs e, Guid announcementId)
    {
        if (string.IsNullOrEmpty(currentUserId)) return;

        try
        {
            if (bookmarkedAnnouncementIds.Contains(announcementId))
            {
                // Remove bookmark
                await BookmarkService.RemoveAnnouncementBookmarkAsync(currentUserId, announcementId);
                bookmarkedAnnouncementIds.Remove(announcementId);
            }
            else
            {
                // Add bookmark
                await BookmarkService.AddAnnouncementBookmarkAsync(currentUserId, announcementId);
                bookmarkedAnnouncementIds.Add(announcementId);
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling announcement bookmark: {ex.Message}");
        }
    }

    private string GetAnnouncementBookmarkButtonClass(Guid announcementId)
    {
        return bookmarkedAnnouncementIds.Contains(announcementId) 
            ? "btn-success border-0 shadow-sm" // Strong green for bookmarked
            : "btn-outline-secondary border-2"; // Clear outline for unbookmarked
    }

    private string GetAnnouncementBookmarkIcon(Guid announcementId)
    {
        return bookmarkedAnnouncementIds.Contains(announcementId) 
            ? "bi-bookmark-heart-fill" // Filled heart bookmark for bookmarked
            : "bi-bookmark-plus"; // Plus bookmark for unbookmarked
    }

    private string GetAnnouncementBookmarkTooltip(Guid announcementId)
    {
        return bookmarkedAnnouncementIds.Contains(announcementId) 
            ? "Remove from bookmarks ✓" 
            : "Add to bookmarks";
    }
}

<style>
    .cursor-pointer {
        cursor: pointer;
    }

    .modern-tabs {
        background: #f8f9fa;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.04);
        padding: 0.75rem 1rem;
    }
    .tab-pills {
        display: flex;
        gap: 1rem;
    }
    .tab-pill {
        background: #fff;
        border: 1px solid #e0e0e0;
        border-radius: 24px;
        padding: 0.5rem 1.25rem;
        font-weight: 500;
        color: #333;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        box-shadow: 0 1px 4px rgba(0,0,0,0.03);
        transition: background 0.2s, color 0.2s, box-shadow 0.2s;
        cursor: pointer;
        border: none;
        outline: none;
    }
    .tab-pill.active {
        background: #2563eb;
        color: #fff;
        box-shadow: 0 2px 8px rgba(37,99,235,0.08);
    }
    .tab-pill:hover:not(.active) {
        background: #e0e7ff;
        color: #2563eb;
    }
    .tab-pill i {
        font-size: 1.1rem;
    }
    .modern-tabs .form-select {
        border-radius: 24px;
        font-size: 0.95rem;
        padding-left: 1rem;
    }
    .announcement-details {
        animation: fadeIn 0.3s ease-in-out;
    }
    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(-10px); }
        to { opacity: 1; transform: translateY(0); }
    }
</style>

