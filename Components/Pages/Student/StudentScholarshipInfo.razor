@page "/dashboard/student/scholarships-info/{ScholarshipId:int}"
@attribute [Authorize(Roles = "Student,SuperAdmin")]
@layout Layout.StudentDashLayout

@using Microsoft.EntityFrameworkCore
@using c2_eskolar.Data
@using c2_eskolar.Models
@using c2_eskolar.Services
@using System.Security.Claims

@inject ApplicationDbContext DbContext
@inject BookmarkService BookmarkService
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject BlobStorageService BlobStorageService

@code {
    [Parameter] public int ScholarshipId { get; set; }

    private Scholarship? scholarship;
    private bool hasPendingApplication = false;
    private string? currentUserId;
    private bool isBookmarked = false;
    private string? scholarshipIconSasUrl = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get current user
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user.Identity?.IsAuthenticated == true)
            {
                currentUserId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            }

            Console.WriteLine($"[DEBUG] ScholarshipId parameter: {ScholarshipId}");
            scholarship = await DbContext.Scholarships
                .Include(s => s.Institution)
                .Include(s => s.Benefactor)
                .Include(s => s.Applications)
                    .ThenInclude(a => a.Student)
                .FirstOrDefaultAsync(s => s.ScholarshipId == ScholarshipId);
            if (scholarship == null)
            {
                Console.WriteLine($"[DEBUG] No scholarship found with ID {ScholarshipId}");
            }
            else
            {
                Console.WriteLine($"[DEBUG] Scholarship loaded: {scholarship.Title}");
                
                // Generate secure SAS URL for the scholarship icon
                scholarshipIconSasUrl = GetSecureIconUrl(scholarship.IconUrl);
                
                await AddToRecentlyViewedAsync(ScholarshipId);

                // Check if the current student has a pending application for this scholarship
                if (!string.IsNullOrEmpty(currentUserId))
                {
                    var studentProfile = await DbContext.StudentProfiles.FirstOrDefaultAsync(sp => sp.UserId == currentUserId);
                    if (studentProfile != null)
                    {
                        var studentId = studentProfile.StudentProfileId;
                        hasPendingApplication = scholarship.Applications.Any(a => a.StudentProfileId == studentId && (a.Status == "Submitted" || a.Status == "Under Review" || a.Status == "Pending"));
                        
                        // Check if scholarship is bookmarked
                        await CheckBookmarkStatus();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[ERROR] Exception in OnInitializedAsync: {ex.Message}");
        }
    }

    private async Task AddToRecentlyViewedAsync(int scholarshipId)
    {
        try
        {
            var idsJson = await JS.InvokeAsync<string>("localStorage.getItem", "recentlyViewedScholarships");
            List<int> ids = !string.IsNullOrEmpty(idsJson)
                ? System.Text.Json.JsonSerializer.Deserialize<List<int>>(idsJson) ?? new List<int>()
                : new List<int>();
            // Remove if already exists, then insert at front
            ids.Remove(scholarshipId);
            ids.Insert(0, scholarshipId);
            // Only keep the most recent 9
            ids = ids.Take(9).ToList();
            var newJson = System.Text.Json.JsonSerializer.Serialize(ids);
            await JS.InvokeVoidAsync("localStorage.setItem", "recentlyViewedScholarships", newJson);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[ERROR] Failed to update recently viewed scholarships: {ex.Message}");
        }
    }

    private async Task GoBack()
    {
        try
        {
            await JS.InvokeVoidAsync("history.back");
        }
        catch
        {
            // fallback: navigate to scholarships list if JS interop fails
            Navigation.NavigateTo("/dashboard/student/scholarships");
        }
    }

    private async Task CheckBookmarkStatus()
    {
        if (string.IsNullOrEmpty(currentUserId)) return;

        try
        {
            var bookmarkOrganization = await BookmarkService.GetOrganizedBookmarksAsync(currentUserId);
            isBookmarked = bookmarkOrganization.AllBookmarks.Any(b => b.ScholarshipId == ScholarshipId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking bookmark status: {ex.Message}");
        }
    }

    private async Task ToggleBookmark()
    {
        if (string.IsNullOrEmpty(currentUserId)) return;

        try
        {
            if (isBookmarked)
            {
                // Remove bookmark
                await BookmarkService.RemoveBookmarkAsync(currentUserId, ScholarshipId);
                isBookmarked = false;
            }
            else
            {
                // Add bookmark
                await BookmarkService.AddBookmarkAsync(currentUserId, ScholarshipId, "Interested", 2);
                isBookmarked = true;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling bookmark: {ex.Message}");
        }
    }

    private string GetBookmarkButtonClass()
    {
        return isBookmarked ? "btn-success border-0 shadow-sm" : "btn-outline-secondary";
    }

    private string GetBookmarkIcon()
    {
        return isBookmarked ? "bi-bookmark-heart-fill" : "bi-bookmark-plus";
    }

    private string GetBookmarkText()
    {
        return isBookmarked ? "Bookmarked ‚úì" : "Add Bookmark";
    }

    private string GetBookmarkTooltip()
    {
        return isBookmarked ? "Remove from bookmarks" : "Add to bookmarks";
    }

    /// <summary>
    /// Converts a blob URL to a secure SAS URL for display
    /// </summary>
    private string GetSecureIconUrl(string? iconUrl)
    {
        if (string.IsNullOrEmpty(iconUrl))
        {
            return string.Empty;
        }

        try
        {
            // If it's already a data URL (base64), return as-is
            if (iconUrl.StartsWith("data:"))
            {
                return iconUrl;
            }

            // If it's a blob storage URL, convert to SAS URL
            if (iconUrl.Contains("blob.core.windows.net"))
            {
                return BlobStorageService.GetPhotoSasUrlFromBlobUrl(iconUrl, 480); // 8 hours validity
            }

            // Return original URL for other cases
            return iconUrl;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ö†Ô∏è Error generating secure icon URL: {ex.Message}");
            return iconUrl; // Return original URL on error
        }
    }
}

@if (scholarship == null)
{
    <div class="text-center my-5">
        <div class="spinner-border text-primary" role="status"></div>
        <p>Loading scholarship details...</p>
    </div>
}
else
{
    <!-- Back Button -->
    <button class="btn btn-outline-primary mb-4 animate__animated animate__fadeIn d-flex align-items-center gap-2" 
            style="border-radius: 8px; padding: 0.5rem 1.25rem; font-weight: 500;" 
            @onclick="GoBack">
        <span style="font-size:1.2rem;">‚Üê</span>
        <span>Back</span>
    </button>

    <!-- Professional Header Banner -->
    <div class="scholarship-banner mb-4 animate__animated animate__fadeIn" 
         style="background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%); 
                border-radius: 16px; 
                padding: 2.5rem; 
                box-shadow: 0 8px 32px rgba(30, 64, 175, 0.15);
                position: relative;
                overflow: hidden;">
        
        <!-- Subtle background pattern -->
        <div style="position: absolute; top: 0; right: 0; width: 300px; height: 300px; 
                    background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
                    border-radius: 50%;
                    transform: translate(30%, -30%);"></div>
        
        <div class="d-flex align-items-center gap-4" style="position: relative; z-index: 1;">
            <!-- Icon Container -->
            <div class="flex-shrink-0">
                <div style="width: 100px; height: 100px; 
                           border-radius: 20px; 
                           background: white; 
                           display: flex; 
                           align-items: center; 
                           justify-content: center; 
                           box-shadow: 0 4px 16px rgba(0,0,0,0.1);
                           border: 3px solid rgba(255,255,255,0.3);">
                    @if (!string.IsNullOrEmpty(scholarshipIconSasUrl))
                    {
                        <img src="@scholarshipIconSasUrl" alt="@scholarship.Title Icon" 
                             style="width: 80px; height: 80px; border-radius: 14px; object-fit: cover;" 
                             onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                        <div style="width: 80px; height: 80px; 
                                   border-radius: 14px; 
                                   background: linear-gradient(135deg, #3b82f6, #60a5fa); 
                                   display: none; 
                                   align-items: center; 
                                   justify-content: center; 
                                   color: white; 
                                   font-size: 2.5rem;">
                            üéì
                        </div>
                    }
                    else
                    {
                        <div style="width: 80px; height: 80px; 
                                   border-radius: 14px; 
                                   background: linear-gradient(135deg, #3b82f6, #60a5fa); 
                                   display: flex; 
                                   align-items: center; 
                                   justify-content: center; 
                                   color: white; 
                                   font-size: 2.5rem;">
                            üéì
                        </div>
                    }
                </div>
            </div>

            <!-- Content -->
            <div class="flex-grow-1">
                <h1 class="mb-2 fw-bold" style="color: white; font-size: 2.25rem; letter-spacing: -0.5px;">
                    @scholarship.Title
                </h1>
                
                <div class="d-flex align-items-center flex-wrap gap-2 mb-3">
                    <span class="badge" style="background: rgba(255,255,255,0.2); 
                                              color: white; 
                                              padding: 0.5rem 1rem; 
                                              font-size: 0.95rem; 
                                              font-weight: 500;
                                              border-radius: 8px;">
                        @(!string.IsNullOrEmpty(scholarship.Institution?.InstitutionName)
                            ? scholarship.Institution.InstitutionName
                            : scholarship.Benefactor?.OrganizationName ?? "Unknown Provider")
                    </span>
                </div>

                <!-- Status Badges -->
                <div class="d-flex align-items-center flex-wrap gap-2">
                    <span class="badge" style="background: white; 
                                              color: #1e40af; 
                                              padding: 0.4rem 0.9rem; 
                                              font-size: 0.875rem;
                                              font-weight: 600;
                                              border-radius: 6px;
                                              box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                        üìÖ @scholarship.ApplicationDeadline.ToString("MMM dd, yyyy")
                    </span>
                    @if (scholarship.SlotsAvailable.HasValue && scholarship.SlotsAvailable.Value > 0)
                    {
                        var takenCount = scholarship.Applications?.Count(a => a.Status != "Rejected" && a.Status != "Withdrawn") ?? 0;
                        var slotsLeft = Math.Max(0, scholarship.SlotsAvailable.Value - takenCount);
                        <span class="badge" style="background: rgba(255,255,255,0.25); 
                                                  color: white; 
                                                  padding: 0.4rem 0.9rem; 
                                                  font-size: 0.875rem;
                                                  font-weight: 600;
                                                  border-radius: 6px;">
                            üë• @slotsLeft / @scholarship.SlotsAvailable Slots
                        </span>
                    }
                    @if (scholarship.IsInternal)
                    {
                        <span class="badge" style="background: #059669; 
                                                  color: white; 
                                                  padding: 0.4rem 0.9rem; 
                                                  font-size: 0.875rem;
                                                  font-weight: 600;
                                                  border-radius: 6px;">
                            üèõÔ∏è Internal
                        </span>
                    }
                    else
                    {
                        <span class="badge" style="background: #8b5cf6; 
                                                  color: white; 
                                                  padding: 0.4rem 0.9rem; 
                                                  font-size: 0.875rem;
                                                  font-weight: 600;
                                                  border-radius: 6px;">
                            üåê Open
                        </span>
                    }
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="flex-shrink-0 d-flex flex-column gap-2">
                <button class="btn animate__animated animate__fadeIn @GetBookmarkButtonClass()" 
                        style="padding: 0.75rem 1.5rem; 
                               border-radius: 10px; 
                               font-weight: 600;
                               box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                               transition: all 0.3s ease;
                               min-width: 150px;"
                        @onclick="ToggleBookmark">
                    <i class="bi @GetBookmarkIcon() me-2"></i>@GetBookmarkText()
                </button>
                @if (scholarship.IsActive)
                {
                    @if (hasPendingApplication)
                    {
                        <button class="btn btn-secondary" 
                                style="padding: 0.75rem 1.5rem; 
                                       border-radius: 10px; 
                                       font-weight: 600;
                                       min-width: 150px;" 
                                disabled>
                            ‚úì Already Applied
                        </button>
                    }
                    else
                    {
                        <a class="btn animate__animated animate__fadeIn" 
                           href="/dashboard/student/apply/@scholarship.ScholarshipId" 
                           style="background: linear-gradient(135deg, #10b981 0%, #059669 100%); 
                                  color: white; 
                                  border: none; 
                                  padding: 0.75rem 1.5rem; 
                                  border-radius: 10px; 
                                  font-weight: 600;
                                  box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
                                  min-width: 150px;
                                  text-decoration: none;
                                  text-align: center;">
                            üìù Apply Now
                        </a>
                    }
                }
            </div>
        </div>
    </div>

    <div class="container-fluid px-2 px-md-4">
        <div class="row gx-4 gy-4">
            <!-- üìÑ Scholarship Info (Single Column Layout) -->
            <div class="col-12 mb-5 animate__animated animate__fadeInUp">
                
                <!-- Basic Information -->
                <div class="card shadow-sm border-0 mb-3 animate__animated animate__fadeIn" 
                     style="border-radius: 12px; overflow: hidden;">
                    <div class="card-header text-white fw-semibold py-3 px-4" 
                         style="background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%); 
                                font-size: 1.05rem; 
                                border: none;">
                        üìã Basic Information
                    </div>
                    <div class="card-body bg-white text-dark py-3 px-4" style="background: #f9fafb !important;">
                        <div class="mb-3">
                            <label class="form-label fw-semibold mb-2" style="color: #374151;">Provider</label>
                            <p class="text-secondary mb-0">
                                @(!string.IsNullOrEmpty(scholarship.Institution?.InstitutionName)
                                    ? scholarship.Institution.InstitutionName
                                    : scholarship.Benefactor?.OrganizationName ?? "Unknown")
                            </p>
                        </div>
                        @if (!string.IsNullOrWhiteSpace(scholarship.Description))
                        {
                            <div class="mb-3">
                                <label class="form-label fw-semibold mb-2" style="color: #374151;">Description</label>
                                <p class="text-secondary mb-0" style="line-height: 1.6;">@scholarship.Description</p>
                            </div>
                        }
                        <div class="mb-3">
                            <label class="form-label fw-semibold mb-2" style="color: #374151;">Benefits</label>
                            <p class="text-secondary mb-0" style="line-height: 1.6; white-space: pre-wrap;">@scholarship.Benefits</p>
                        </div>
                        <div class="mb-3">
                            <label class="form-label fw-semibold mb-2" style="color: #374151;">Application Deadline</label>
                            <p class="text-secondary mb-0">@scholarship.ApplicationDeadline.ToString("MMMM dd, yyyy")</p>
                        </div>
                        @if (scholarship.SlotsAvailable.HasValue && scholarship.SlotsAvailable.Value > 0)
                        {
                            var takenCount = scholarship.Applications?.Count(a => a.Status != "Rejected" && a.Status != "Withdrawn") ?? 0;
                            var slotsLeft = Math.Max(0, scholarship.SlotsAvailable.Value - takenCount);
                            <div class="mb-0">
                                <label class="form-label fw-semibold mb-2" style="color: #374151;">Slots Available</label>
                                <p class="text-secondary mb-0 fs-5 fw-bold">@slotsLeft of @scholarship.SlotsAvailable</p>
                            </div>
                        }
                    </div>
                </div>

                <!-- Eligibility & Requirements -->
                <div class="card shadow-sm border-0 mb-3 animate__animated animate__fadeIn" 
                     style="border-radius: 12px; overflow: hidden;">
                    <div class="card-header text-white fw-semibold py-3 px-4" 
                         style="background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%); 
                                font-size: 1.05rem; 
                                border: none;">
                        üìù Eligibility & Requirements
                    </div>
                    <div class="card-body bg-white text-dark py-3 px-4" style="background: #f9fafb !important;">
                        @if (!string.IsNullOrWhiteSpace(scholarship.RequiredCourse))
                        {
                            <div class="mb-3">
                                <label class="form-label fw-semibold mb-2" style="color: #374151;">Required Course</label>
                                <p class="text-secondary mb-0">@scholarship.RequiredCourse</p>
                            </div>
                        }
                        @if (!string.IsNullOrWhiteSpace(scholarship.Eligibility))
                        {
                            <div class="mb-3">
                                <label class="form-label fw-semibold mb-2" style="color: #374151;">Eligibility</label>
                                <p class="text-secondary mb-0" style="line-height: 1.6; white-space: pre-wrap;">@scholarship.Eligibility</p>
                            </div>
                        }
                        @if (!string.IsNullOrWhiteSpace(scholarship.Requirements))
                        {
                            <div class="mb-3">
                                <label class="form-label fw-semibold mb-2" style="color: #374151;">Requirements</label>
                                <p class="text-secondary mb-0" style="line-height: 1.6; white-space: pre-wrap;">@scholarship.Requirements</p>
                            </div>
                        }
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-semibold mb-2" style="color: #374151;">Minimum GPA</label>
                                <p class="text-secondary mb-0">@(scholarship.MinimumGPA.HasValue ? scholarship.MinimumGPA.Value.ToString("0.00") : "None")</p>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-semibold mb-2" style="color: #374151;">Required Year Level</label>
                                <p class="text-secondary mb-0">@(scholarship.RequiredYearLevel.HasValue && scholarship.RequiredYearLevel > 0 ? $"Year {scholarship.RequiredYearLevel}" : "Any year level")</p>
                            </div>
                        </div>
                        @if (!string.IsNullOrWhiteSpace(scholarship.RequiredUniversity))
                        {
                            <div class="mb-3">
                                <label class="form-label fw-semibold mb-2" style="color: #374151;">Required University</label>
                                <p class="text-secondary mb-0">@scholarship.RequiredUniversity</p>
                            </div>
                        }
                        @if (!string.IsNullOrWhiteSpace(scholarship.ExternalApplicationUrl))
                        {
                            <div class="mb-0">
                                <label class="form-label fw-semibold mb-2" style="color: #374151;">External Application</label>
                                <p class="mb-0">
                                    <a href="@scholarship.ExternalApplicationUrl" 
                                       target="_blank" 
                                       style="color: #3b82f6; text-decoration: none; font-weight: 500;"
                                       class="d-inline-flex align-items-center gap-1">
                                        @scholarship.ExternalApplicationUrl
                                        <span style="font-size: 0.875rem;">‚Üó</span>
                                    </a>
                                </p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}
