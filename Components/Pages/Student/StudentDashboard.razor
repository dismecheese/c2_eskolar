@page "/dashboard/student"
@attribute [Authorize(Roles = "Student")]
@layout Layout.StudentDashLayout

@using c2_eskolar.Models
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore
@using c2_eskolar.Components.Pages


@using c2_eskolar.Data
@inject NavigationManager Navigation
@inject InstitutionProfileService InstitutionProfileService
@inject AuthenticationStateProvider AuthStateProvider
@inject ApplicationDbContext DbContext
@inject IJSRuntime JS

<style>
    .text-decoration-none {
        text-decoration: none !important;
    }
</style>

<PageTitle>Institution Dashboard</PageTitle>

<div class="dashboard-center-container">
    <!-- Top Bar -->
    <div class="dashboard-topbar">
        <input class="university-input" type="text" placeholder="University Name:" />
        <span class="dashboard-date">@DateTime.Now.ToString("dd MMM yyyy, ddd")</span>
    </div>

    <!-- Welcome Banner -->
    <div class="dashboard-banner-centered">
        <div class="banner-text">
            <h2>Welcome, @(profile?.AdminFirstName ?? "Institution")!</h2>
        </div>
        <img src="images/eskolar_books.svg" alt="Books" class="banner-img" />
    </div>

    <!-- Yellow Tabs -->
    <div class="dashboard-tabs">
        <button class="dashboard-tab @(activeTab == 0 ? "active" : "")" @onclick="() => SetTab(0)">Recently Viewed</button>
        <a class="dashboard-tab text-decoration-none" href="/dashboard/institution/scholars">View Scholars</a>
    </div>

    @if (showScholarshipList)
    {
        <!-- Scholarship List Page (matches your screenshot) -->
        <div style="background:#fff;padding:32px 0;">
            <div style="max-width:1100px;margin:0 auto;">
                <input type="text" placeholder="Search" style="width:400px;padding:12px 16px;border-radius:8px;border:1.5px solid #d1d5db;margin-bottom:24px;"/>
                <div style="display:flex;gap:8px;margin-bottom:18px;">
                    <button class="scholarship-list-tab @(scholarshipTab == 0 ? "active" : "")" @onclick="() => SetScholarshipTab(0)">Institutional</button>
                    <button class="scholarship-list-tab @(scholarshipTab == 1 ? "active" : "")" @onclick="() => SetScholarshipTab(1)">Open</button>
                    <button class="scholarship-list-tab @(scholarshipTab == 2 ? "active" : "")" @onclick="() => SetScholarshipTab(2)">All</button>
                    <button class="scholarship-list-tab @(scholarshipTab == 3 ? "active" : "")" @onclick="() => SetScholarshipTab(3)">Recommended</button>
                </div>
                <div style="display:flex;gap:12px;justify-content:flex-end;margin-bottom:18px;">
                    <select style="padding:6px 16px;border-radius:6px;border:1.5px solid #e0e0e0;">
                        <option>Filter</option>
                    </select>
                    <select style="padding:6px 16px;border-radius:6px;border:1.5px solid #e0e0e0;">
                        <option>Sort</option>
                    </select>
                </div>
                @if (scholarshipTab == 0)
                {
                    <div style="margin-top:100px;text-align:center;font-size:1.18rem;font-family:'Inter',sans-serif;">
                        Institutional scholarships will be available here once your school joins our platform.<br />
                        Suggest your school to join eSkolar!
                    </div>
                }
                else
                {
                    <div style="display:grid;grid-template-columns:repeat(3,1fr);gap:32px;">
                        @foreach (var scholarship in scholarships)
                        {
                            <div class="col-md-6 col-lg-4">
                                <div class="card shadow-sm h-100 clickable-card border-0"
                                     @onclick="async () => await ViewScholarshipAsync(scholarship.ScholarshipId)"
                                     style="cursor: pointer; transition: box-shadow 0.2s;">
                                    <div class="card-body d-flex flex-column">
                                        <div class="d-flex align-items-center mb-2">
                                            <i class="bi bi-award text-warning me-2 fs-4"></i>
                                            <h5 class="card-title mb-0">@scholarship.Title</h5>
                                        </div>
                                        <p class="card-text text-muted mb-2">
                                            <span class="badge bg-primary me-1">@(!string.IsNullOrEmpty(scholarship.Institution?.InstitutionName)
                                                ? scholarship.Institution.InstitutionName
                                                : scholarship.Benefactor?.OrganizationName ?? "Unknown Provider")</span>
                                        </p>
                                        <div class="mb-2">
                                            <span class="badge bg-success">@scholarship.CreatedAt.ToString("MMM dd, yyyy")</span>
                                            <span class="badge bg-secondary ms-1">@((scholarship.IsInternal ? "Internal" : "External"))</span>
                                        </div>
                                        <div class="mt-auto d-flex justify-content-between align-items-center">
                                            <span class="badge @(scholarship.IsActive ? "bg-success" : "bg-danger")">
                                                @(scholarship.IsActive ? "Active" : "Inactive")
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
            <div style="text-align:center;margin-top:32px;">
                <button class="dashboard-tab" style="width:auto;padding:8px 32px;" @onclick="BackToDashboard">Back</button>
            </div>
        </div>
    }
    else if (activeTab == -1)
    {
        <!-- Sectioned Layout (default view) -->
        <div class="scholarship-section">
            <div class="scholarship-row">
                <div style="display: flex; align-items: center; margin-bottom: 8px;">
                    <button class="scholarship-row-title scholarship-row-title-btn"
                            @onclick="() => ShowScholarshipList(0)">
                        Institutional Scholarships <span>&gt;</span>
                    </button>
                </div>
                <div class="scholarship-cards" style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 32px;">
                    @foreach (var scholarship in scholarships.Where(s => s.IsInternal))
                    {
                        <div>
                            <div class="card shadow-sm h-100 clickable-card border-0"
                                 @onclick="async () => await ViewScholarshipAsync(scholarship.ScholarshipId)"
                                 style="cursor: pointer; transition: box-shadow 0.2s;">
                                <div class="card-body d-flex flex-column">
                                    <div class="d-flex align-items-center mb-2">
                                        <i class="bi bi-award text-warning me-2 fs-4"></i>
                                        <h5 class="card-title mb-0">@scholarship.Title</h5>
                                    </div>
                                    <p class="card-text text-muted mb-2">
                                        <span class="badge bg-primary me-1">@(!string.IsNullOrEmpty(scholarship.Institution?.InstitutionName)
                                            ? scholarship.Institution.InstitutionName
                                            : scholarship.Benefactor?.OrganizationName ?? "Unknown Provider")</span>
                                    </p>
                                    <div class="mb-2">
                                        <span class="badge bg-success">@scholarship.CreatedAt.ToString("MMM dd, yyyy")</span>
                                        <span class="badge bg-secondary ms-1">@((scholarship.IsInternal ? "Internal" : "External"))</span>
                                    </div>
                                    <div class="mt-auto d-flex justify-content-between align-items-center">
                                        <span class="badge @(scholarship.IsActive ? "bg-success" : "bg-danger")">
                                            @(scholarship.IsActive ? "Active" : "Inactive")
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="scholarship-row">
                <div style="display: flex; align-items: center; margin-bottom: 8px;">
                    <button class="scholarship-row-title scholarship-row-title-btn"
                            @onclick="() => ShowScholarshipList(1)">
                        Open Scholarships <span>&gt;</span>
                    </button>
                </div>
                <div class="scholarship-cards" style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 32px;">
                    @foreach (var scholarship in scholarships.Where(s => !s.IsInternal))
                    {
                        <div>
                            <div class="card shadow-sm h-100 clickable-card border-0"
                                 @onclick="async () => await ViewScholarshipAsync(scholarship.ScholarshipId)"
                                 style="cursor: pointer; transition: box-shadow 0.2s;">
                                <div class="card-body d-flex flex-column">
                                    <div class="d-flex align-items-center mb-2">
                                        <i class="bi bi-award text-warning me-2 fs-4"></i>
                                        <h5 class="card-title mb-0">@scholarship.Title</h5>
                                    </div>
                                    <p class="card-text text-muted mb-2">
                                        <span class="badge bg-primary me-1">@(!string.IsNullOrEmpty(scholarship.Institution?.InstitutionName)
                                            ? scholarship.Institution.InstitutionName
                                            : scholarship.Benefactor?.OrganizationName ?? "Unknown Provider")</span>
                                    </p>
                                    <div class="mb-2">
                                        <span class="badge bg-success">@scholarship.CreatedAt.ToString("MMM dd, yyyy")</span>
                                        <span class="badge bg-secondary ms-1">@((scholarship.IsInternal ? "Internal" : "External"))</span>
                                    </div>
                                    <div class="mt-auto d-flex justify-content-between align-items-center">
                                        <span class="badge @(scholarship.IsActive ? "bg-success" : "bg-danger")">
                                            @(scholarship.IsActive ? "Active" : "Inactive")
                                        </span>
                                        <button class="btn btn-sm btn-outline-danger ms-2"
                                                @onclick:stopPropagation="true"
                                                @onclick="() => DeleteScholarship(scholarship.ScholarshipId)">
                                            <i class="bi bi-trash"></i> Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="scholarship-row">
                <div style="display: flex; align-items: center; margin-bottom: 8px;">
                    <button class="scholarship-row-title scholarship-row-title-btn"
                            @onclick="() => ShowScholarshipList(3)">
                        Recommended Scholarships <span>&gt;</span>
                    </button>
                </div>
                <div class="scholarship-cards" style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 32px;">
                    @foreach (var scholarship in scholarships.Where(s => s.IsActive))
                    {
                        <div>
                            <div class="card shadow-sm h-100 clickable-card border-0"
                                 @onclick="async () => await ViewScholarshipAsync(scholarship.ScholarshipId)"
                                 style="cursor: pointer; transition: box-shadow 0.2s;">
                                <div class="card-body d-flex flex-column">
                                    <div class="d-flex align-items-center mb-2">
                                        <i class="bi bi-award text-warning me-2 fs-4"></i>
                                        <h5 class="card-title mb-0">@scholarship.Title</h5>
                                    </div>
                                    <p class="card-text text-muted mb-2">
                                        <span class="badge bg-primary me-1">@(!string.IsNullOrEmpty(scholarship.Institution?.InstitutionName)
                                            ? scholarship.Institution.InstitutionName
                                            : scholarship.Benefactor?.OrganizationName ?? "Unknown Provider")</span>
                                    </p>
                                    <div class="mb-2">
                                        <span class="badge bg-success">@scholarship.CreatedAt.ToString("MMM dd, yyyy")</span>
                                        <span class="badge bg-secondary ms-1">@((scholarship.IsInternal ? "Internal" : "External"))</span>
                                    </div>
                                    <div class="mt-auto d-flex justify-content-between align-items-center">
                                        <span class="badge @(scholarship.IsActive ? "bg-success" : "bg-danger")">
                                            @(scholarship.IsActive ? "Active" : "Inactive")
                                        </span>
                                        <button class="btn btn-sm btn-outline-danger ms-2"
                                                @onclick:stopPropagation="true"
                                                @onclick="() => DeleteScholarship(scholarship.ScholarshipId)">
                                            <i class="bi bi-trash"></i> Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    else if (activeTab == 0)
    {
        <!-- Recently Viewed Scholarships Tab (separate layout) -->
        <div class="scholarship-section">
            <div style="display: flex; justify-content: flex-end; align-items: center; margin-bottom: 8px;">
                <button class="clear-link" style="background:none;border:none;color:#bbb;font-weight:500;font-size:16px;" @onclick="async () => await ClearRecentlyViewedAsync()">Clear</button>
            </div>
            <div class="scholarship-cards" style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 32px;">
                @if (recentlyViewedScholarships.Count == 0)
                {
                    <div style="grid-column: 1 / span 3; text-align: center; color: #bbb; font-size: 1.1rem;">No recently viewed scholarships.</div>
                }
                else
                {
                    @foreach (var scholarship in recentlyViewedScholarships)
                    {
                        <div class="scholarship-card" style="position:relative;">
                            <span style="position:absolute;top:10px;right:16px;font-size:18px;color:#bbb;cursor:pointer;" @onclick="async () => await RemoveRecentlyViewedAsync(scholarship.ScholarshipId)">&times;</span>
                            <div class="scholarship-card-img" style="display:flex;align-items:center;justify-content:center;">
                                <i class="bi bi-award text-warning fs-4"></i>
                            </div>
                            <div class="scholarship-card-title" style="text-align:center;">@scholarship.Title</div>
                            <div style="text-align:center;font-size:0.95rem;color:#888;">@(!string.IsNullOrEmpty(scholarship.Institution?.InstitutionName)
                                ? scholarship.Institution.InstitutionName
                                : scholarship.Benefactor?.OrganizationName ?? "Unknown Provider")</div>
                            <div style="text-align:center;font-size:0.9rem;color:#aaa;">@scholarship.CreatedAt.ToString("MMM dd, yyyy")</div>
                        </div>
                    }
                }
            </div>
        </div>
    }
    else if (activeTab == 1)
    {
        <!-- Current Applications Content -->
        <div class="scholarship-section">
            <div class="scholarship-cards">
                @for (int i = 0; i < 9; i++)
                {
                    <div class="scholarship-card" style="position:relative;">
                        <span style="position:absolute;top:8px;right:12px;font-size:18px;color:#bbb;cursor:pointer;">&times;</span>
                        <div class="scholarship-card-img"></div>
                        <div class="scholarship-card-title">Scholarship Name</div>
                        <div class="scholarship-card-status">@((i % 2 == 0) ? "Pending" : "Applied")</div>
                    </div>
                }
            </div>
        </div>
    }
    else if (activeTab == 2)
    {
        <!-- My Scholarships Content -->
        <div class="scholarship-section">
            <div class="scholarship-cards" style="flex-direction:column;gap:24px;">
                @for (int i = 0; i < 4; i++)
                {
                    <div class="scholarship-card" style="width: 90%; max-width: 600px; margin: 0 auto; flex-direction: row; align-items: center; height: 80px;">
                        <div class="scholarship-card-img" style="margin-bottom:0;margin-right:16px;"></div>
                        <div class="scholarship-card-title" style="flex:1;text-align:left;">Scholarship Name</div>
                        <div class="scholarship-card-status" style="position:static;right:unset;top:unset;">
                            @(i == 0 || i == 1 ? "Active" : i == 2 ? "Completed" : "Suspended")
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private int activeTab = -1;
    private bool showScholarshipList = false;
    private int scholarshipTab = 0;
    private c2_eskolar.Models.InstitutionProfile? profile;



    private List<Scholarship> scholarships = new();
    private List<Scholarship> recentlyViewedScholarships = new();


    protected override async Task OnInitializedAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("tab", out var tabValue) && int.TryParse(tabValue, out var tabIndex))
        {
            activeTab = tabIndex;
        }

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        if (userId != null)
        {
            profile = await InstitutionProfileService.GetProfileByUserIdAsync(userId);
        }
        // Load scholarships from the database (customize filter as needed)
        scholarships = await DbContext.Scholarships
            .Include(s => s.Institution)
            .Include(s => s.Benefactor)
            .OrderByDescending(s => s.CreatedAt)
            .ToListAsync();

        // Load recently viewed scholarship IDs from local storage (JS interop)
        try
        {
            var idsJson = await JS.InvokeAsync<string>("localStorage.getItem", "recentlyViewedScholarshipIds");
            if (!string.IsNullOrEmpty(idsJson))
            {
                var ids = System.Text.Json.JsonSerializer.Deserialize<List<int>>(idsJson);
                if (ids != null)
                {
                    recentlyViewedScholarships = scholarships.Where(s => ids.Contains(s.ScholarshipId)).OrderByDescending(s => ids.IndexOf(s.ScholarshipId)).ToList();
                }
            }
        }
        catch { }
    }

    private void SetTab(int tab)
    {
        activeTab = tab;
        showScholarshipList = false;
        StateHasChanged();
    }

    private void ShowScholarshipList(int tab)
    {
        showScholarshipList = true;
        scholarshipTab = tab;
    }

    private void SetScholarshipTab(int tab)
    {
        scholarshipTab = tab;
    }

    private void BackToDashboard()
    {
        showScholarshipList = false;
    }

    private async Task ClearRecentlyViewedAsync()
    {
        recentlyViewedScholarships.Clear();
        await JS.InvokeVoidAsync("localStorage.removeItem", "recentlyViewedScholarshipIds");
    }

    private void CloseProfilePopout()
    {
        // Add logic to close profile popout if needed
        StateHasChanged();
    }



    private async Task ViewScholarshipAsync(int scholarshipId)
    {
        var scholarship = scholarships.FirstOrDefault(s => s.ScholarshipId == scholarshipId);
        if (scholarship != null)
        {
            recentlyViewedScholarships.RemoveAll(s => s.ScholarshipId == scholarshipId);
            recentlyViewedScholarships.Insert(0, scholarship);
            if (recentlyViewedScholarships.Count > 9)
                recentlyViewedScholarships = recentlyViewedScholarships.Take(9).ToList();

            // Save IDs to local storage
            var ids = recentlyViewedScholarships.Select(s => s.ScholarshipId).ToList();
            await JS.InvokeVoidAsync("localStorage.setItem", "recentlyViewedScholarshipIds", System.Text.Json.JsonSerializer.Serialize(ids));
        }
        Navigation.NavigateTo($"/dashboard/student/scholarships-info/{scholarshipId}");
    }

    private async Task RemoveRecentlyViewedAsync(int scholarshipId)
    {
        recentlyViewedScholarships.RemoveAll(s => s.ScholarshipId == scholarshipId);
        var ids = recentlyViewedScholarships.Select(s => s.ScholarshipId).ToList();
        await JS.InvokeVoidAsync("localStorage.setItem", "recentlyViewedScholarshipIds", System.Text.Json.JsonSerializer.Serialize(ids));
    }

    // Stub for deleting a scholarship (replace with delete logic)
    private void DeleteScholarship(int scholarshipId)
    {
        // Example: scholarships.RemoveAll(s => s.ScholarshipId == scholarshipId);
    }
}