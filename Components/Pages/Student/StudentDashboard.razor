@page "/dashboard/student"
@attribute [Authorize(Roles = "Student,SuperAdmin")]

@layout Layout.StudentDashLayout
@using Microsoft.AspNetCore.WebUtilities
@using c2_eskolar.Components.Pages
@using c2_eskolar.Services

@using c2_eskolar.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity

@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject AuthenticationStateProvider AuthStateProvider
@inject StudentProfileService StudentProfileService
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject BookmarkService BookmarkService
@inject ILogger<StudentDashboard> Logger

@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

<div class="dashboard-center-container">

    <!-- Top Bar -->
    <div class="dashboard-topbar">
        <div style="position:relative;display:inline-block;width:320px;">
            <input class="university-input" type="text" placeholder="Search scholarships..."
                @bind="scholarshipSearchBarQuery" @bind:event="oninput"
                @onfocus="ShowScholarshipDropdown" @onblur="HideScholarshipDropdownWithDelay"
                @onkeydown="ScholarshipSearchBarKeyDown"
                style="width:100%;padding:10px 16px;border-radius:8px;border:1.5px solid #d1d5db;font-size:16px;box-sizing:border-box;outline:none;"
                aria-label="Search scholarships" autocomplete="off" />
            @if (showScholarshipDropdown && filteredScholarshipBarResults.Any())
            {
                <ul style="position:absolute;z-index:10;top:110%;left:0;width:100%;background:#fff;border:1.5px solid #d1d5db;border-radius:0 0 8px 8px;max-height:220px;overflow-y:auto;box-shadow:0 2px 8px rgba(0,0,0,0.08);margin:0;padding:0;list-style:none;">
                    @foreach (var s in filteredScholarshipBarResults)
                    {
                        <li style="padding:10px 16px;cursor:pointer;display:flex;flex-direction:column;" @onclick="() => SelectScholarshipBarResult(s)">
                            <span style="font-weight:500;">@s.Title</span>
                            <span style="font-size:13px;color:#888;">@((s.Institution?.InstitutionName ?? s.Benefactor?.OrganizationName) ?? "")</span>
                        </li>
                    }
                </ul>
            }
        </div>
        <span class="dashboard-date">@DateTime.Now.ToString("dd MMM yyyy, ddd")</span>
    </div>

    <!-- Welcome Banner -->
    <div class="dashboard-banner-centered">
        <div class="banner-text">
            <h2>Welcome, @(firstName ?? "Student")!</h2>
        </div>
        <img src="images/eskolar_books.svg" alt="Books" class="banner-img" />
    </div>

    <!-- Yellow Tabs -->
    <div class="dashboard-tabs">
        <button class="dashboard-tab @(activeTab == 0 ? "active" : "")" @onclick="() => SetTab(0)">Recently Viewed</button>
        <button class="dashboard-tab @(activeTab == 1 ? "active" : "")" @onclick="() => SetTab(1)">Current Applications</button>
        <button class="dashboard-tab @(activeTab == 2 ? "active" : "")" @onclick="() => SetTab(2)">My Scholarships</button>
    </div>

    @if (showScholarshipList)
    {
        <!-- Scholarship List Page (matches your screenshot) -->
        <div style="background:#fff;padding:32px 0;">
            <div style="max-width:1100px;margin:0 auto;">
                <div style="position:relative;display:inline-block;width:400px;margin-bottom:24px;">
                    <label for="scholarship-search" class="visually-hidden">Search scholarships</label>
                    <input id="scholarship-search" type="text" placeholder="Search scholarships..."
                        @bind-value="searchQuery" @bind-value:event="oninput"
                        @onkeydown="HandleSearchKeyDown"
                        style="width:100%;padding:12px 40px 12px 44px;border-radius:8px;border:1.5px solid #d1d5db;font-size:16px;box-sizing:border-box;outline:none;transition:border-color 0.2s;z-index:2;position:relative;background:#fff;"
                        aria-label="Search scholarships" />
                    <span style="position:absolute;left:16px;top:50%;transform:translateY(-50%);color:#888;font-size:20px;pointer-events:none;z-index:1;">
                        <svg width="20" height="20" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><circle cx="9" cy="9" r="7" stroke="#888" stroke-width="2"/><path d="M15.5 15.5L13 13" stroke="#888" stroke-width="2" stroke-linecap="round"/></svg>
                    </span>
                </div>
                <div style="display:flex;gap:8px;margin-bottom:18px;">
                    <button class="scholarship-list-tab @(scholarshipTab == 0 ? "active" : "")" @onclick="() => SetScholarshipTab(0)">Institutional</button>
                    <button class="scholarship-list-tab @(scholarshipTab == 1 ? "active" : "")" @onclick="() => SetScholarshipTab(1)">Open</button>
                    <button class="scholarship-list-tab @(scholarshipTab == 2 ? "active" : "")" @onclick="() => SetScholarshipTab(2)">All</button>
                    <button class="scholarship-list-tab @(scholarshipTab == 3 ? "active" : "")" @onclick="() => SetScholarshipTab(3)">Recommended</button>
                </div>
                <div style="display:flex;gap:12px;justify-content:flex-end;margin-bottom:18px;">
                    <select style="padding:6px 16px;border-radius:6px;border:1.5px solid #e0e0e0;">
                        <option>Sort</option>
                    </select>
                </div>
                @if (scholarshipTab == 0)
                {
                    @if (filteredInstitutionalScholarships?.Any() == true)
                    {
                        <div style="display:grid;grid-template-columns:repeat(3,1fr);gap:32px;">
                            @foreach (var scholarship in filteredInstitutionalScholarships)
                            {
                                <div class="scholarship-card" style="height:160px;position:relative;cursor:pointer;">
                                    <!-- Bookmark Button -->
                                    <button class="@GetBookmarkButtonClass(scholarship.ScholarshipId)" 
                                            style="position:absolute;top:8px;right:8px;z-index:10;border:none;background:rgba(255,255,255,0.9);border-radius:4px;width:32px;height:32px;display:flex;align-items:center;justify-content:center;box-shadow:0 2px 4px rgba(0,0,0,0.1);"
                                            @onclick="(e) => ToggleBookmark(scholarship.ScholarshipId, e)"
                                            @onclick:stopPropagation="true"
                                            title="@GetBookmarkTooltip(scholarship.ScholarshipId)">
                                        <i class="@GetBookmarkIcon(scholarship.ScholarshipId)" style="font-size:14px;"></i>
                                    </button>
                                    
                                    <!-- Clickable Card Content -->
                                    <a href="/dashboard/student/scholarships-info/@scholarship.ScholarshipId" class="text-decoration-none" style="display:block;height:100%;padding:16px;">
                                        <div style="display:flex;flex-direction:column;align-items:center;justify-content:center;height:100%;padding:6px 0;box-sizing:border-box;text-align:center;">
                                            <div class="scholarship-card-img" style="width:72px;height:72px;background:#e3f2fd;display:flex;align-items:center;justify-content:center;border-radius:50%;flex-shrink:0;">
                                                @if (!string.IsNullOrEmpty(scholarship.Institution?.Logo))
                                                {
                                                    <img src="@scholarship.Institution.Logo" alt="Logo" style="width:64px;height:64px;object-fit:cover;border-radius:50%;" />
                                                }
                                                else
                                                {
                                                    <div style="background:#1976d2;color:white;width:64px;height:64px;border-radius:50%;display:flex;align-items:center;justify-content:center;font-weight:700;font-size:20px;">
                                                        @GetInitials(scholarship.Institution?.InstitutionName ?? "I")
                                                    </div>
                                                }
                                            </div>
                                            <div class="scholarship-card-title" style="font-size:15px;line-height:1.2;font-weight:600;margin-top:10px;">@scholarship.Title</div>
                                            <div style="font-size:13px;color:#666;margin-top:6px;">@scholarship.Institution?.InstitutionName</div>
                                            <div style="font-size:13px;color:#666;margin-top:4px;">â‚±@((scholarship.MonetaryValue ?? 0).ToString("N0"))</div>
                                        </div>
                                    </a>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div style="margin-top:100px;text-align:center;font-size:1.18rem;font-family:'Inter',sans-serif;">
                            @if (string.IsNullOrEmpty(searchQuery))
                            {
                                <text>No institutional scholarships available yet.<br />Suggest your school to join eSkolar!</text>
                            }
                            else
                            {
                                <text>No institutional scholarships found matching "@searchQuery"</text>
                            }
                        </div>
                    }
                }
                else
                {
                    @if (GetFilteredScholarships()?.Any() == true)
                    {
                        <div style="display:grid;grid-template-columns:repeat(3,1fr);gap:32px;">
                            @foreach (var scholarship in GetFilteredScholarships() ?? new List<Scholarship>())
                            {
                                <div class="scholarship-card" style="height:160px;position:relative;cursor:pointer;">
                                    <!-- Bookmark Button -->
                                    <button class="@GetBookmarkButtonClass(scholarship.ScholarshipId)" 
                                            style="position:absolute;top:8px;right:8px;z-index:10;border:none;background:rgba(255,255,255,0.9);border-radius:4px;width:32px;height:32px;display:flex;align-items:center;justify-content:center;box-shadow:0 2px 4px rgba(0,0,0,0.1);"
                                            @onclick="(e) => ToggleBookmark(scholarship.ScholarshipId, e)"
                                            @onclick:stopPropagation="true"
                                            title="@GetBookmarkTooltip(scholarship.ScholarshipId)">
                                        <i class="@GetBookmarkIcon(scholarship.ScholarshipId)" style="font-size:14px;"></i>
                                    </button>
                                    
                                    <!-- Clickable Card Content -->
                                    <a href="/dashboard/student/scholarships-info/@scholarship.ScholarshipId" class="text-decoration-none" style="display:block;height:100%;padding:16px;">
                                        <div style="display:flex;flex-direction:column;align-items:center;justify-content:center;height:100%;padding:6px 0;box-sizing:border-box;text-align:center;">
                                            <div class="scholarship-card-img" style="width:72px;height:72px;background:@(scholarship.IsInternal ? "#e3f2fd" : "#e8f5e8");display:flex;align-items:center;justify-content:center;border-radius:50%;flex-shrink:0;">
                                                @if (scholarship.IsInternal && !string.IsNullOrEmpty(scholarship.Institution?.Logo))
                                                {
                                                    <img src="@scholarship.Institution.Logo" alt="Logo" style="width:64px;height:64px;object-fit:cover;border-radius:50%;" />
                                                }
                                                else if (!scholarship.IsInternal && !string.IsNullOrEmpty(scholarship.Benefactor?.Logo))
                                                {
                                                    <img src="@scholarship.Benefactor.Logo" alt="Logo" style="width:64px;height:64px;object-fit:cover;border-radius:50%;" />
                                                }
                                                else
                                                {
                                                    <div style="background:@(scholarship.IsInternal ? "#1976d2" : "#388e3c");color:white;width:64px;height:64px;border-radius:50%;display:flex;align-items:center;justify-content:center;font-weight:700;font-size:20px;">
                                                        @GetInitials(scholarship.IsInternal ? (scholarship.Institution?.InstitutionName ?? "I") : (scholarship.Benefactor?.OrganizationName ?? "B"))
                                                    </div>
                                                }
                                            </div>
                                            <div class="scholarship-card-title" style="font-size:15px;line-height:1.2;font-weight:600;margin-top:10px;">@scholarship.Title</div>
                                            <div style="font-size:13px;color:#666;margin-top:6px;">@(scholarship.IsInternal ? scholarship.Institution?.InstitutionName : scholarship.Benefactor?.OrganizationName)</div>
                                            <div style="font-size:13px;color:#666;margin-top:4px;">â‚±@((scholarship.MonetaryValue ?? 0).ToString("N0"))</div>
                                        </div>
                                        @if (scholarship.ApplicationDeadline > DateTime.Now)
                                        {
                                            <div style="font-size:11px;color:#d32f2f;margin-top:2px;">Deadline: @scholarship.ApplicationDeadline.ToString("MMM dd, yyyy")</div>
                                        }
                                    </a>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div style="margin-top:100px;text-align:center;font-size:1.18rem;font-family:'Inter',sans-serif;">
                            @if (string.IsNullOrEmpty(searchQuery))
                            {
                                <text>No scholarships available at the moment.<br />Check back later for new opportunities!</text>
                            }
                            else
                            {
                                <text>No scholarships found matching "@searchQuery"</text>
                            }
                        </div>
                    }
                }
            </div>
            <div style="text-align:center;margin-top:32px;">
                <button class="dashboard-tab" style="width:auto;padding:8px 32px;" @onclick="BackToDashboard">Back</button>
            </div>
        </div>
    }
    else if (activeTab == -1)
    {
        <!-- Sectioned Layout (default view) -->
        <div class="scholarship-section">
            <div class="scholarship-row">
                <button class="scholarship-row-title scholarship-row-title-btn"
                        @onclick="() => ShowScholarshipList(0)">
                    Institutional Scholarships (@(institutionalScholarships?.Count ?? 0)) <span>&gt;</span>
                </button>
                <div class="scholarship-cards">
                    @if (institutionalScholarships?.Any() == true)
                    {
                        @foreach (var scholarship in institutionalScholarships.Take(3))
                        {
                            <a href="/dashboard/student/scholarships-info/@scholarship.ScholarshipId" class="scholarship-card text-decoration-none" style="text-align:center;">
                                <div style="display:flex;flex-direction:column;align-items:center;justify-content:center;padding:14px;">
                                    <div class="scholarship-card-img" style="width:64px;height:64px;background:#e3f2fd;display:flex;align-items:center;justify-content:center;border-radius:50%;flex-shrink:0;margin-bottom:10px;">
                                        @if (!string.IsNullOrEmpty(scholarship.Institution?.Logo))
                                        {
                                            <img src="@scholarship.Institution.Logo" alt="Logo" style="width:56px;height:56px;object-fit:cover;border-radius:50%;" />
                                        }
                                        else
                                        {
                                            <div style="background:#1976d2;color:white;width:56px;height:56px;border-radius:50%;display:flex;align-items:center;justify-content:center;font-weight:700;font-size:18px;">
                                                @GetInitials(scholarship.Institution?.InstitutionName ?? "I")
                                            </div>
                                        }
                                    </div>
                                    <div class="scholarship-card-title" style="font-size:14px;font-weight:600;">@(scholarship.Title.Length > 25 ? scholarship.Title.Substring(0, 22) + "..." : scholarship.Title)</div>
                                </div>
                            </a>
                        }
                    }
                    else
                    {
                        <div style="grid-column:1/-1;text-align:center;color:#666;padding:20px;">No institutional scholarships available</div>
                    }
                </div>
            </div>
            <div class="scholarship-row">
                <button class="scholarship-row-title scholarship-row-title-btn"
                        @onclick="() => ShowScholarshipList(1)">
                    Open Scholarships (@(openScholarships?.Count ?? 0)) <span>&gt;</span>
                </button>
                <div class="scholarship-cards">
                    @if (openScholarships?.Any() == true)
                    {
                        @foreach (var scholarship in openScholarships.Take(3))
                        {
                            <a href="/dashboard/student/scholarships-info/@scholarship.ScholarshipId" class="scholarship-card text-decoration-none" style="text-align:center;">
                                <div style="display:flex;flex-direction:column;align-items:center;justify-content:center;padding:14px;">
                                    <div class="scholarship-card-img" style="width:64px;height:64px;background:#e8f5e8;display:flex;align-items:center;justify-content:center;border-radius:50%;flex-shrink:0;margin-bottom:10px;">
                                        @if (!string.IsNullOrEmpty(scholarship.Benefactor?.Logo))
                                        {
                                            <img src="@scholarship.Benefactor.Logo" alt="Logo" style="width:56px;height:56px;object-fit:cover;border-radius:50%;" />
                                        }
                                        else
                                        {
                                            <div style="background:#388e3c;color:white;width:56px;height:56px;border-radius:50%;display:flex;align-items:center;justify-content:center;font-weight:700;font-size:18px;">
                                                @GetInitials(scholarship.Benefactor?.OrganizationName ?? "B")
                                            </div>
                                        }
                                    </div>
                                    <div class="scholarship-card-title" style="font-size:14px;font-weight:600;">@(scholarship.Title.Length > 25 ? scholarship.Title.Substring(0, 22) + "..." : scholarship.Title)</div>
                                </div>
                            </a>
                        }
                    }
                    else
                    {
                        <div style="grid-column:1/-1;text-align:center;color:#666;padding:20px;">No open scholarships available</div>
                    }
                </div>
            </div>
            <div class="scholarship-row">
                <button class="scholarship-row-title scholarship-row-title-btn"
                        @onclick="() => ShowScholarshipList(3)">
                    Recommended Scholarships (@(recommendedScholarships?.Count ?? 0)) <span>&gt;</span>
                </button>
                <div class="scholarship-cards">
                    @if (recommendedScholarships?.Any() == true)
                    {
                        @foreach (var scholarship in recommendedScholarships.Take(3))
                        {
                            <a href="/dashboard/student/scholarships-info/@scholarship.ScholarshipId" class="scholarship-card text-decoration-none">
                                <div style="display:flex;flex-direction:column;align-items:center;justify-content:center;padding:14px;text-align:center;">
                                    <div class="scholarship-card-img" style="width:64px;height:64px;background:@(scholarship.IsInternal ? "#e3f2fd" : "#e8f5e8");display:flex;align-items:center;justify-content:center;border-radius:50%;flex-shrink:0;margin-bottom:10px;">
                                        @if (scholarship.IsInternal && !string.IsNullOrEmpty(scholarship.Institution?.Logo))
                                        {
                                            <img src="@scholarship.Institution.Logo" alt="Logo" style="width:56px;height:56px;object-fit:cover;border-radius:50%;" />
                                        }
                                        else if (!scholarship.IsInternal && !string.IsNullOrEmpty(scholarship.Benefactor?.Logo))
                                        {
                                            <img src="@scholarship.Benefactor.Logo" alt="Logo" style="width:56px;height:56px;object-fit:cover;border-radius:50%;" />
                                        }
                                        else
                                        {
                                            <div style="background:@(scholarship.IsInternal ? "#1976d2" : "#388e3c");color:white;width:56px;height:56px;border-radius:50%;display:flex;align-items:center;justify-content:center;font-weight:700;font-size:18px;">
                                                @GetInitials(scholarship.IsInternal ? (scholarship.Institution?.InstitutionName ?? "I") : (scholarship.Benefactor?.OrganizationName ?? "B"))
                                            </div>
                                        }
                                    </div>
                                    <div class="scholarship-card-title">@(scholarship.Title.Length > 25 ? scholarship.Title.Substring(0, 22) + "..." : scholarship.Title)</div>
                                </div>
                            </a>
                        }
                    }
                    else
                    {
                        <div style="grid-column:1/-1;text-align:center;color:#666;padding:20px;">No recommended scholarships available</div>
                    }
                </div>
            </div>
        </div>
    }
    else if (activeTab == 0)
    {
        <!-- Recently Viewed Scholarships Tab (real data) -->
        <div class="scholarship-section">
            <div style="display: flex; align-items: center; margin-bottom: 16px;">
                <button @onclick="BackToDashboard" class="back-link-btn" aria-label="Back">
                    &#60;
                </button>
                <div style="flex:1"></div>
                <button class="clear-link" style="background:none;border:none;color:#bbb;font-weight:500;font-size:16px;" @onclick="ClearRecentlyViewedAsync">Clear</button>
            </div>
            <div class="scholarship-cards" style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 32px;">
                @if (recentlyViewedScholarships?.Any() == true)
                {
                    @foreach (var scholarship in recentlyViewedScholarships)
                    {
                        <a href="/dashboard/student/scholarships-info/@scholarship.ScholarshipId" class="text-decoration-none">
                                <div class="scholarship-card" style="position:relative;text-align:center;padding:18px;">
                                    <span style="position:absolute;top:8px;right:12px;font-size:18px;color:#bbb;cursor:pointer;" @onclick="() => RemoveRecentlyViewedAsync(scholarship.ScholarshipId)">&times;</span>
                                    <div style="display:flex;flex-direction:column;align-items:center;justify-content:center;">
                                        <div class="scholarship-card-img" style="width:72px;height:72px;border-radius:50%;display:flex;align-items:center;justify-content:center;margin-bottom:10px;">
                                            @if (scholarship.IsInternal && !string.IsNullOrEmpty(scholarship.Institution?.Logo))
                                            {
                                                <img src="@scholarship.Institution.Logo" alt="Logo" style="width:64px;height:64px;object-fit:cover;border-radius:50%;" />
                                            }
                                            else if (!scholarship.IsInternal && !string.IsNullOrEmpty(scholarship.Benefactor?.Logo))
                                            {
                                                <img src="@scholarship.Benefactor.Logo" alt="Logo" style="width:64px;height:64px;object-fit:cover;border-radius:50%;" />
                                            }
                                            else
                                            {
                                                <div style="background:@(scholarship.IsInternal ? "#1976d2" : "#388e3c");color:white;width:64px;height:64px;border-radius:50%;display:flex;align-items:center;justify-content:center;font-weight:700;font-size:18px;">
                                                    @GetInitials(scholarship.IsInternal ? (scholarship.Institution?.InstitutionName ?? "I") : (scholarship.Benefactor?.OrganizationName ?? "B"))
                                                </div>
                                            }
                                        </div>
                                        <div class="scholarship-card-title" style="font-size:14px;font-weight:600;">@scholarship.Title</div>
                                        <div style="font-size:12px;color:#666;">@((scholarship.IsInternal ? scholarship.Institution?.InstitutionName : scholarship.Benefactor?.OrganizationName) ?? "Provider")</div>
                                    </div>
                                </div>
                        </a>
                    }
                }
                else
                {
                    <div style="grid-column:1/-1;text-align:center;color:#666;padding:20px;">No recently viewed scholarships</div>
                }
            </div>
        </div>
    }
    else if (activeTab == 1)
    {
        <!-- Current Applications Content: My Applications Table -->
        <div class="scholarship-section">
            <div style="display: flex; align-items: center; margin-bottom: 16px;">
                <button @onclick="BackToDashboard" class="back-link-btn" aria-label="Back">
                    &#60;
                </button>
            </div>
            <div class="minimal-bg" style="margin-top: 0;">
                <div class="container px-2 px-md-4" style="margin-right: 2.5rem;">
                    <h2 class="minimal-title">My Scholarship Applications</h2>
                    @if (isLoadingApplications)
                    {
                        <div class="d-flex flex-column align-items-center justify-content-center my-5 py-5">
                            <div class="spinner-border text-primary" style="width: 2.5rem; height: 2.5rem;" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <div class="mt-3" style="color: #2563eb; font-weight: 400;">Loading applications...</div>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(applicationsErrorMessage))
                    {
                        <div class="alert alert-danger" style="max-width: 600px; margin: 32px auto;">@applicationsErrorMessage</div>
                    }
                    else
                    {
                        <div class="minimal-card">
                            <table class="table minimal-table mb-0">
                                <thead>
                                    <tr>
                                        <th>Scholarship</th>
                                        <th>Provider</th>
                                        <th>Date Applied</th>
                                        <th>Status</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (applications != null)
                                    {
                                        @foreach (var app in applications)
                                        {
                                            <tr>
                                                <td style="font-weight: 500;">@app.ScholarshipTitle</td>
                                                <td>@app.Provider</td>
                                                <td>@app.DateApplied.ToString("MMM dd, yyyy")</td>
                                                <td>
                                                    <span class="badge @GetStatusClass(app.Status)" style="font-size: 1rem; min-width: 90px; display: inline-block;">@app.Status</span>
                                                </td>
                                                <td>
                                                    <button class="btn btn-sm btn-outline-info btn-animate" @onclick="() => ViewApplicationSummary(app.ApplicationId)">
                                                        <i class="bi bi-eye"></i> View Summary
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                            @if (applications == null || !applications.Any())
                            {
                                <div class="minimal-empty">You have not applied to any scholarships yet.</div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    else if (activeTab == 2)
    {
        <!-- My Scholarships Content: Show all approved scholarships -->
        <div class="scholarship-section">
            <div style="display: flex; align-items: center; margin-bottom: 16px;">
                <button @onclick="BackToDashboard" class="back-link-btn" aria-label="Back">
                    &#60;
                </button>
            </div>
            <div class="scholarship-cards" style="flex-direction:column;gap:24px;">
                @if (approvedScholarships?.Any() == true)
                {
                    @foreach (var scholarship in approvedScholarships)
                    {
                        <a href="/dashboard/student/scholarships-info/@scholarship.ScholarshipId" class="text-decoration-none">
                                <div class="scholarship-card" style="width: 90%; max-width: 600px; margin: 0 auto; flex-direction: column; align-items: center; padding:12px;">
                                    <div style="display:flex;flex-direction:column;align-items:center;justify-content:center;">
                                        <div class="scholarship-card-img" style="width:56px;height:56px;border-radius:50%;display:flex;align-items:center;justify-content:center;margin-bottom:8px;">
                                            @if (scholarship.IsInternal && !string.IsNullOrEmpty(scholarship.Institution?.Logo))
                                            {
                                                <img src="@scholarship.Institution.Logo" alt="Logo" style="width:48px;height:48px;object-fit:cover;border-radius:50%;" />
                                            }
                                            else if (!scholarship.IsInternal && !string.IsNullOrEmpty(scholarship.Benefactor?.Logo))
                                            {
                                                <img src="@scholarship.Benefactor.Logo" alt="Logo" style="width:48px;height:48px;object-fit:cover;border-radius:50%;" />
                                            }
                                            else
                                            {
                                                <div style="background:@(scholarship.IsInternal ? "#1976d2" : "#388e3c");color:white;width:48px;height:48px;border-radius:50%;display:flex;align-items:center;justify-content:center;font-weight:700;font-size:16px;">
                                                    @GetInitials(scholarship.IsInternal ? (scholarship.Institution?.InstitutionName ?? "I") : (scholarship.Benefactor?.OrganizationName ?? "B"))
                                                </div>
                                            }
                                        </div>
                                        <div class="scholarship-card-title" style="text-align:center;font-weight:600;">@scholarship.Title</div>
                                        <div class="scholarship-card-status" style="margin-top:6px;color:#4caf50;">Active</div>
                                    </div>
                                </div>
                        </a>
                    }
                }
                else
                {
                    <div style="width:100%;text-align:center;color:#666;padding:20px;">No approved scholarships yet.</div>
                }
            </div>
        </div>
    }
</div>

@code {
    // --- Modal State for Verification ---
    private bool showVerificationModal = false;
    private bool? isVerified = null;
    private string? accountStatus = null;
    private string? userId;

    // --- Bookmark State ---
    private HashSet<int> bookmarkedScholarshipIds = new HashSet<int>();

    // --- Scholarship Search Bar State ---
    private string scholarshipSearchBarQuery = string.Empty;
    private bool showScholarshipDropdown = false;
    private List<Scholarship> allScholarshipBarResults = new();
    private List<Scholarship> filteredScholarshipBarResults = new();



    private void GoToVerification()
    {
        showVerificationModal = false;
        Navigation.NavigateTo("/student/verification");
    }

    private void SkipVerification()
    {
        showVerificationModal = false;
        Navigation.NavigateTo("/dashboard//studentunverified");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load all scholarships for search bar autocomplete using separate context
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            allScholarshipBarResults = await dbContext.Scholarships
                .Include(s => s.Institution)
                .Include(s => s.Benefactor)
                .Where(s => s.IsActive && s.ApplicationDeadline > DateTime.Now)
                .OrderByDescending(s => s.CreatedAt)
                .ToListAsync();
            FilterScholarshipBarResults();
            StateHasChanged();
        }
    }

    private void ShowScholarshipDropdown()
    {
        showScholarshipDropdown = true;
        FilterScholarshipBarResults();
    }

    private async Task HideScholarshipDropdownWithDelay()
    {
        // Delay to allow click event to register
        await Task.Delay(150);
        showScholarshipDropdown = false;
        StateHasChanged();
    }

    private void FilterScholarshipBarResults()
    {
        var query = scholarshipSearchBarQuery?.Trim().ToLower() ?? "";
        if (string.IsNullOrEmpty(query))
        {
            filteredScholarshipBarResults = allScholarshipBarResults.Take(10).ToList();
        }
        else
        {
            filteredScholarshipBarResults = allScholarshipBarResults
                .Where(s => (s.Title?.ToLower().Contains(query) ?? false)
                    || (s.Institution?.InstitutionName?.ToLower().Contains(query) ?? false)
                    || (s.Benefactor?.OrganizationName?.ToLower().Contains(query) ?? false))
                .Take(10)
                .ToList();
        }
    }

    private void SelectScholarshipBarResult(Scholarship s)
    {
        scholarshipSearchBarQuery = s.Title;
        showScholarshipDropdown = false;
        Navigation.NavigateTo($"/dashboard/student/scholarships-info/{s.ScholarshipId}");
    }

    private void ScholarshipSearchBarKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && filteredScholarshipBarResults.Count == 1)
        {
            var s = filteredScholarshipBarResults[0];
            SelectScholarshipBarResult(s);
        }
    }
    private int activeTab = -1;
    private bool showScholarshipList = false;
    private int scholarshipTab = 0; // 0: Institutional, 1: Open, 2: All, 3: Recommended
    private string? firstName;
    private string _searchQuery = string.Empty;
    private string searchQuery
    {
        get => _searchQuery;
        set
        {
            if (_searchQuery != value)
            {
                _searchQuery = value;
                ApplyFilters();
                StateHasChanged();
            }
        }
    }

    // Student data
    private c2_eskolar.Models.StudentProfile? currentStudent;

    // Scholarship collections
    private List<Scholarship>? allScholarships;
    private List<Scholarship>? institutionalScholarships;
    private List<Scholarship>? openScholarships;
    private List<Scholarship>? recommendedScholarships;



    // Filtered collections
    private List<Scholarship>? filteredInstitutionalScholarships;
    private List<Scholarship>? filteredOpenScholarships;
    private List<Scholarship>? filteredAllScholarships;
    private List<Scholarship>? filteredRecommendedScholarships;

    // Applications tab state
    private List<ApplicationViewModel>? applications;
    private bool isLoadingApplications = false;
    private string? applicationsErrorMessage;

    // My Scholarships (approved)
    private List<Scholarship> approvedScholarships = new();

    // Recently viewed scholarships
    private List<int> recentlyViewedIds = new();
    private List<Scholarship> recentlyViewedScholarships = new();

    protected override async Task OnInitializedAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("tab", out var tabValue) && int.TryParse(tabValue, out var tabIndex))
        {
            activeTab = tabIndex;
        }

        // Modal verification logic
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        
        if (!string.IsNullOrEmpty(userId))
        {
            var profile = await StudentProfileService.GetProfileByUserIdAsync(userId);
            isVerified = profile?.IsVerified;
            accountStatus = profile?.AccountStatus;
            // Show modal if account status is not "Verified"
            if (string.IsNullOrEmpty(accountStatus) || accountStatus != "Verified")
            {
                showVerificationModal = true;
            }
        }

        await LoadStudentProfile();
        await LoadScholarships();
        await LoadRecentlyViewedAsync();
        await LoadApprovedScholarshipsAsync();
        await LoadUserBookmarks(); // Add bookmark loading
        ApplyFilters();
        // Preload applications if Current Applications tab is default
        if (activeTab == 1)
        {
            await LoadApplicationsAsync();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadScholarships();
        ApplyFilters();
    }



    private async Task LoadApprovedScholarshipsAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userId))
            {
                approvedScholarships = new List<Scholarship>();
                return;
            }
            
            var studentProfile = await StudentProfileService.GetProfileByUserIdAsync(userId);
            if (studentProfile == null)
            {
                approvedScholarships = new List<Scholarship>();
                return;
            }
            
            Guid studentId = studentProfile.StudentProfileId;
            
            // Use a scoped context for this operation
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            var approvedApps = await dbContext.ScholarshipApplications
                .Where(a => a.StudentProfileId == studentId && a.Status == "Approved")
                .Include(a => a.Scholarship)
                    .ThenInclude(s => s.Institution)
                .Include(a => a.Scholarship)
                    .ThenInclude(s => s.Benefactor)
                .ToListAsync();
                
            approvedScholarships = approvedApps
                .Where(a => a.Scholarship != null)
                .Select(a => a.Scholarship!)
                .ToList();
        }
        catch (Exception ex)
        {
            approvedScholarships = new List<Scholarship>();
            Console.WriteLine($"Error loading approved scholarships: {ex.Message}");
        }
    }
    // --- Recently Viewed Logic ---
    private async Task LoadRecentlyViewedAsync()
    {
        try
        {
            var idsJson = await JS.InvokeAsync<string>("localStorage.getItem", "recentlyViewedScholarships");
            if (!string.IsNullOrEmpty(idsJson))
            {
                recentlyViewedIds = System.Text.Json.JsonSerializer.Deserialize<List<int>>(idsJson) ?? new List<int>();
            }
            else
            {
                recentlyViewedIds = new List<int>();
            }

            // Only keep the most recent 9
            recentlyViewedIds = recentlyViewedIds.Take(9).ToList();

            if (recentlyViewedIds.Any())
            {
                // Load scholarship details for these IDs, preserving order using scoped context
                using var dbContext = await DbContextFactory.CreateDbContextAsync();
                recentlyViewedScholarships = await dbContext.Scholarships
                    .Include(s => s.Institution)
                    .Include(s => s.Benefactor)
                    .Where(s => recentlyViewedIds.Contains(s.ScholarshipId))
                    .ToListAsync();
                    
                // Preserve order as in recentlyViewedIds
                recentlyViewedScholarships = recentlyViewedIds
                    .Select(id => recentlyViewedScholarships.FirstOrDefault(s => s.ScholarshipId == id))
                    .Where(s => s != null)
                    .ToList()!;
            }
            else
            {
                recentlyViewedScholarships = new List<Scholarship>();
            }
        }
        catch (Exception ex)
        {
            recentlyViewedScholarships = new List<Scholarship>();
            Console.WriteLine($"Error loading recently viewed scholarships: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task ClearRecentlyViewedAsync()
    {
        recentlyViewedIds.Clear();
        recentlyViewedScholarships.Clear();
        await JS.InvokeVoidAsync("localStorage.removeItem", "recentlyViewedScholarships");
        StateHasChanged();
    }

    private async Task RemoveRecentlyViewedAsync(int scholarshipId)
    {
        recentlyViewedIds.Remove(scholarshipId);
        recentlyViewedScholarships = recentlyViewedScholarships.Where(s => s.ScholarshipId != scholarshipId).ToList();
        var idsJson = System.Text.Json.JsonSerializer.Serialize(recentlyViewedIds);
        await JS.InvokeVoidAsync("localStorage.setItem", "recentlyViewedScholarships", idsJson);
        StateHasChanged();
    }

    private async Task LoadStudentProfile()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            if (userId != null)
            {
                currentStudent = await StudentProfileService.GetProfileByUserIdAsync(userId);
                firstName = currentStudent?.FirstName;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading student profile: {ex.Message}");
        }
    }

    private async Task LoadScholarships()
    {
        try
        {
            // Load all active scholarships with their related data using a scoped context
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            allScholarships = await dbContext.Scholarships
                .Include(s => s.Institution)
                .Include(s => s.Benefactor)
                .Where(s => s.IsActive && s.ApplicationDeadline > DateTime.Now)
                .OrderBy(s => s.ApplicationDeadline)
                .ToListAsync();

            // Categorize scholarships
            institutionalScholarships = allScholarships
                .Where(s => s.IsInternal && s.InstitutionProfileId != null)
                .ToList();

            openScholarships = allScholarships
                .Where(s => !s.IsInternal && s.BenefactorProfileId != null)
                .ToList();

            // Generate recommendations based on student profile
            recommendedScholarships = await GenerateRecommendations();

            Console.WriteLine($"Loaded {allScholarships.Count} total scholarships: {institutionalScholarships.Count} institutional, {openScholarships.Count} open, {recommendedScholarships.Count} recommended");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading scholarships: {ex.Message}");
            allScholarships = new List<Scholarship>();
            institutionalScholarships = new List<Scholarship>();
            openScholarships = new List<Scholarship>();
            recommendedScholarships = new List<Scholarship>();
        }
    }

    private Task<List<Scholarship>> GenerateRecommendations()
    {
        if (currentStudent == null || allScholarships == null)
            return Task.FromResult(new List<Scholarship>());

        var recommendations = allScholarships.Where(s =>
        {
            // Match by university
            if (!string.IsNullOrEmpty(currentStudent.UniversityName) &&
                !string.IsNullOrEmpty(s.RequiredUniversity) &&
                s.RequiredUniversity.Contains(currentStudent.UniversityName, StringComparison.OrdinalIgnoreCase))
                return true;

            // Match by course
            if (!string.IsNullOrEmpty(currentStudent.Course) &&
                !string.IsNullOrEmpty(s.RequiredCourse) &&
                s.RequiredCourse.Contains(currentStudent.Course, StringComparison.OrdinalIgnoreCase))
                return true;

            // Match by year level
            if (currentStudent.YearLevel.HasValue && s.RequiredYearLevel.HasValue &&
                currentStudent.YearLevel.Value >= s.RequiredYearLevel.Value)
                return true;

            // Match by GPA
            if (currentStudent.GPA.HasValue && s.MinimumGPA.HasValue &&
                currentStudent.GPA.Value >= s.MinimumGPA.Value)
                return true;

            return false;
        }).ToList();

        // If no specific matches, return recent scholarships
        if (!recommendations.Any())
        {
            recommendations = allScholarships.Take(6).ToList();
        }

        return Task.FromResult(recommendations.OrderByDescending(s => s.CreatedAt).Take(20).ToList());
    }

    private void ApplyFilters()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredInstitutionalScholarships = institutionalScholarships;
            filteredOpenScholarships = openScholarships;
            filteredAllScholarships = allScholarships;
            filteredRecommendedScholarships = recommendedScholarships;
        }
        else
        {
            var searchLower = searchQuery.ToLower();

            filteredInstitutionalScholarships = institutionalScholarships?
                .Where(s => s.Title.ToLower().Contains(searchLower) ||
                           (s.Institution?.InstitutionName.ToLower().Contains(searchLower) ?? false) ||
                           (s.Description?.ToLower().Contains(searchLower) ?? false))
                .ToList();

            filteredOpenScholarships = openScholarships?
                .Where(s => s.Title.ToLower().Contains(searchLower) ||
                           (s.Benefactor?.OrganizationName.ToLower().Contains(searchLower) ?? false) ||
                           (s.Description?.ToLower().Contains(searchLower) ?? false))
                .ToList();

            filteredAllScholarships = allScholarships?
                .Where(s => s.Title.ToLower().Contains(searchLower) ||
                           (s.Institution?.InstitutionName.ToLower().Contains(searchLower) ?? false) ||
                           (s.Benefactor?.OrganizationName.ToLower().Contains(searchLower) ?? false) ||
                           (s.Description?.ToLower().Contains(searchLower) ?? false))
                .ToList();

            filteredRecommendedScholarships = recommendedScholarships?
                .Where(s => s.Title.ToLower().Contains(searchLower) ||
                           (s.Institution?.InstitutionName.ToLower().Contains(searchLower) ?? false) ||
                           (s.Benefactor?.OrganizationName.ToLower().Contains(searchLower) ?? false) ||
                           (s.Description?.ToLower().Contains(searchLower) ?? false))
                .ToList();
        }
    }



    // Removed HandleSearch: logic now in searchQuery setter

    private void HandleSearchKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            var filtered = GetFilteredScholarships();
            if (filtered != null && filtered.Count == 1)
            {
                var scholarship = filtered[0];
                Navigation.NavigateTo($"/dashboard/student/scholarships-info/{scholarship.ScholarshipId}");
            }
        }
    }

    private List<Scholarship>? GetFilteredScholarships()
    {
        return scholarshipTab switch
        {
            0 => filteredInstitutionalScholarships,
            1 => filteredOpenScholarships,
            2 => filteredAllScholarships,
            3 => filteredRecommendedScholarships,
            _ => filteredAllScholarships
        };
    }

    private string GetInitials(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
            return "?";

        // Return only the first letter of the name as the placeholder initial
        var trimmed = name.Trim();
        return trimmed.Substring(0, 1).ToUpper();
    }

    private void SetTab(int tab)
    {
        activeTab = tab;
        showScholarshipList = false;
        if (tab == 1)
        {
            // Load applications when Current Applications tab is selected
            _ = LoadApplicationsAsync();
        }
        StateHasChanged();
    }

    private void ShowScholarshipList(int tab)
    {
        showScholarshipList = true;
        scholarshipTab = tab;
        StateHasChanged();
    }

    private void SetScholarshipTab(int tab)
    {
        scholarshipTab = tab;
        StateHasChanged();
    }

    private void BackToDashboard()
    {
        activeTab = -1;
        showScholarshipList = false;
        StateHasChanged();
    }

    private void ClearRecentlyViewed()
    {
        // Add logic to clear recently viewed scholarships if needed
    }

    // --- Applications Tab Logic ---
    private async Task LoadApplicationsAsync()
    {
        isLoadingApplications = true;
        applicationsErrorMessage = null;
        try
        {
            // Get user id
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userId))
            {
                applicationsErrorMessage = "User not authenticated.";
                isLoadingApplications = false;
                return;
            }

            // Find the student's profile
            var studentProfile = await StudentProfileService.GetProfileByUserIdAsync(userId);
            if (studentProfile == null)
            {
                applicationsErrorMessage = "Student profile not found.";
                isLoadingApplications = false;
                return;
            }

            Guid studentId = studentProfile.StudentProfileId;

            // Load all applications for this student, including scholarship and provider info using scoped context
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            var appEntities = await dbContext.ScholarshipApplications
                .Where(a => a.StudentProfileId == studentId)
                .Include(a => a.Scholarship.Institution)
                .Include(a => a.Scholarship.Benefactor)
                .OrderByDescending(a => a.ApplicationDate)
                .ToListAsync();

            applications = appEntities.Select(a => new ApplicationViewModel
            {
                ApplicationId = a.ScholarshipApplicationId,
                ScholarshipTitle = a.Scholarship?.Title ?? "(No Title)",
                Provider = (a.Scholarship != null && a.Scholarship.Institution != null && !string.IsNullOrEmpty(a.Scholarship.Institution.InstitutionName))
                    ? a.Scholarship.Institution.InstitutionName
                    : (a.Scholarship != null && a.Scholarship.Benefactor != null && !string.IsNullOrEmpty(a.Scholarship.Benefactor.OrganizationName)
                        ? a.Scholarship.Benefactor.OrganizationName
                        : "Unknown Provider"),
                DateApplied = a.ApplicationDate,
                Status = a.Status ?? "Pending"
            }).ToList();
        }
        catch (Exception ex)
        {
            applicationsErrorMessage = $"Error loading applications: {ex.Message}";
        }
        finally
        {
            isLoadingApplications = false;
            StateHasChanged();
        }
    }

    private void ViewApplicationSummary(Guid applicationId)
    {
        Navigation.NavigateTo($"/dashboard/student/applications/{applicationId}/summary");
    }

    private string GetStatusClass(string status)
    {
        return status switch
        {
            "Pending" => "bg-warning text-dark",
            "Approved" => "bg-success",
            "Rejected" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    // --- Bookmark Methods ---
    private async Task LoadUserBookmarks()
    {
        try
        {
            // Get userId if not already set
            if (string.IsNullOrEmpty(userId))
            {
                var authState = await AuthStateProvider.GetAuthenticationStateAsync();
                userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            }
            
            if (!string.IsNullOrEmpty(userId))
            {
                var bookmarkOrganization = await BookmarkService.GetOrganizedBookmarksAsync(userId);
                bookmarkedScholarshipIds = bookmarkOrganization.AllBookmarks.Select(b => b.ScholarshipId).ToHashSet();
            }
        }
        catch (Exception)
        {
            // Log error but don't throw to prevent page crash
        }
    }

    private async Task ToggleBookmark(int scholarshipId, MouseEventArgs e)
    {
        if (string.IsNullOrEmpty(userId)) 
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            
            if (string.IsNullOrEmpty(userId))
            {
                return;
            }
        }

        try
        {
            bool wasBookmarked = bookmarkedScholarshipIds.Contains(scholarshipId);
            
            if (wasBookmarked)
            {
                await BookmarkService.RemoveBookmarkAsync(userId, scholarshipId);
                bookmarkedScholarshipIds.Remove(scholarshipId);
            }
            else
            {
                await BookmarkService.AddBookmarkAsync(userId, scholarshipId, "Interested", 2);
                bookmarkedScholarshipIds.Add(scholarshipId);
            }
            
            StateHasChanged(); // Force UI update
        }
        catch (Exception)
        {
            // Handle error silently or log appropriately
        }
    }

    private string GetBookmarkButtonClass(int scholarshipId)
    {
        bool isBookmarked = bookmarkedScholarshipIds.Contains(scholarshipId);
        
        return isBookmarked 
            ? "btn btn-sm btn-warning" // Bookmarked state - yellow/orange
            : "btn btn-sm btn-outline-secondary"; // Not bookmarked state - gray outline
    }

    private string GetBookmarkIcon(int scholarshipId)
    {
        bool isBookmarked = bookmarkedScholarshipIds.Contains(scholarshipId);
        return isBookmarked 
            ? "bi-bookmark-fill" // Filled bookmark
            : "bi-bookmark"; // Empty bookmark
    }

    private string GetBookmarkTooltip(int scholarshipId)
    {
        bool isBookmarked = bookmarkedScholarshipIds.Contains(scholarshipId);
        return isBookmarked
            ? "Remove from bookmarks" 
            : "Add to bookmarks";
    }

    private class ApplicationViewModel
    {
        public Guid ApplicationId { get; set; }
        public string ScholarshipTitle { get; set; } = string.Empty;
        public string Provider { get; set; } = string.Empty;
        public DateTime DateApplied { get; set; }
        public string Status { get; set; } = string.Empty;
    }
}