@page "/dashboard/student/applications"
@layout Layout.StudentDashLayout

@using c2_eskolar.Data
@using c2_eskolar.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject AuthenticationStateProvider AuthProvider

@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>My Applications</PageTitle>

<div class="minimal-bg" style="margin-top: 2.5rem;">
	<div class="container px-2 px-md-4" style="margin-right: 2.5rem;">
		<div class="minimal-banner mb-4">
			<div class="banner-icon">
				<i class="fas fa-award" aria-hidden="true"></i>
			</div>
			<div class="banner-text">
				<span class="banner-title">My Scholarship Applications</span>
				<span class="banner-subtitle">All your submitted applications in one place</span>
			</div>
		</div>
		@if (isLoading)
		{
			<div class="d-flex flex-column align-items-center justify-content-center my-5 py-5">
				<div class="spinner-border text-primary" style="width: 2.5rem; height: 2.5rem;" role="status">
					<span class="visually-hidden">Loading...</span>
				</div>
				<div class="mt-3" style="color: #2563eb; font-weight: 400;">Loading applications...</div>
			</div>
		}
		else if (!string.IsNullOrEmpty(errorMessage))
		{
			<div class="alert alert-danger" style="max-width: 600px; margin: 32px auto;">@errorMessage</div>
		}
		else
		{
			<div class="application-list">
				@if (applications != null && applications.Any())
				{
					@foreach (var app in applications)
					{
						<div class="application-card">
							<div class="application-card-header">
								<div class="application-icon">
									<i class="fas fa-graduation-cap"></i>
								</div>
								<div class="application-title-group">
									<div class="application-title">@app.ScholarshipTitle</div>
									<div class="application-provider">
										<i class="fas fa-university me-1"></i>
										@app.Provider
									</div>
								</div>
								<div class="application-status">
									<span class="status-badge @GetStatusClass(app.Status)">
										<i class="fas @(app.Status == "Approved" ? "fa-check-circle" : app.Status == "Rejected" ? "fa-times-circle" : "fa-hourglass-half") me-1"></i>
										@app.Status
									</span>
								</div>
							</div>
							<div class="application-card-body">
								<div class="application-date">
									<i class="fas fa-calendar-alt me-1"></i>
									<span>Applied: @app.DateApplied.ToString("MMM dd, yyyy")</span>
								</div>
								<div class="application-actions">
									<button class="btn btn-sm btn-outline-primary btn-animate" @onclick="() => ViewSummary(app.ApplicationId)">
										<i class="fas fa-eye me-1"></i> View Summary
									</button>
								</div>
							</div>
						</div>
					}
				}
				else
				{
					<div class="minimal-empty">You have not applied to any scholarships yet.</div>
				}
			</div>
		}
		</div>
	</div>

@code {
	private List<ApplicationViewModel>? applications;
	private bool isLoading = true;
	private string? errorMessage;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			var authState = await AuthProvider.GetAuthenticationStateAsync();
			var user = authState.User;
			var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
			if (string.IsNullOrEmpty(userId))
			{
				errorMessage = "User not authenticated.";
				isLoading = false;
				return;
			}

					// Use factory to create a new DbContext instance for this operation
					using var db = DbContextFactory.CreateDbContext();

					// Find the student's profile
					var studentProfile = await db.StudentProfiles.FirstOrDefaultAsync(sp => sp.UserId == userId);
					if (studentProfile == null)
					{
						errorMessage = "Student profile not found.";
						isLoading = false;
						return;
					}

					Guid studentId = studentProfile.StudentProfileId;

					// Load all applications for this student, including scholarship and provider info
					var appEntities = await db.ScholarshipApplications
						.Where(a => a.StudentProfileId == studentId)
						.Include(a => a.Scholarship.Institution)
						.Include(a => a.Scholarship.Benefactor)
						.OrderByDescending(a => a.ApplicationDate)
						.ToListAsync();

					applications = appEntities.Select(a => new ApplicationViewModel
					{
						ApplicationId = a.ScholarshipApplicationId,
						ScholarshipTitle = a.Scholarship?.Title ?? "(No Title)",
						Provider = (a.Scholarship != null && a.Scholarship.Institution != null && !string.IsNullOrEmpty(a.Scholarship.Institution.InstitutionName))
							? a.Scholarship.Institution.InstitutionName
							: (a.Scholarship != null && a.Scholarship.Benefactor != null && !string.IsNullOrEmpty(a.Scholarship.Benefactor.OrganizationName)
								? a.Scholarship.Benefactor.OrganizationName
								: "Unknown Provider"),
						DateApplied = a.ApplicationDate,
						Status = a.Status ?? "Pending"
					}).ToList();
		}
		catch (Exception ex)
		{
			errorMessage = $"Error loading applications: {ex.Message}";
		}
		finally
		{
			isLoading = false;
		}

		// Log debug info to browser console
		if (!string.IsNullOrEmpty(errorMessage))
		{
			await JS.InvokeVoidAsync("console.error", $"DEBUG: {errorMessage}");
		}
		if (applications != null)
		{
			await JS.InvokeVoidAsync("console.log", $"DEBUG: applications.Count = {applications.Count}");
		}
	}

	private void ViewSummary(Guid applicationId)
	{
		Navigation.NavigateTo($"/dashboard/student/applications/{applicationId}/summary");
	}

	private string GetStatusClass(string status)
	{
		return status switch
		{
			"Pending" => "bg-warning text-dark",
			"Approved" => "bg-success",
			"Rejected" => "bg-danger",
			_ => "bg-secondary"
		};
	}

	private class ApplicationViewModel
	{
		public Guid ApplicationId { get; set; }
		public string ScholarshipTitle { get; set; } = string.Empty;
		public string Provider { get; set; } = string.Empty;
		public DateTime DateApplied { get; set; }
		public string Status { get; set; } = string.Empty;
	}
}
