@page "/dashboard/student/applications/{ApplicationId:guid}/summary"
@layout Layout.StudentDashLayout

@using c2_eskolar.Data
@using c2_eskolar.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using System.Web


@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@inject c2_eskolar.Services.BlobStorageService BlobStorageService

@attribute [Authorize(Roles = "Student,SuperAdmin")]

<PageTitle>Application Summary</PageTitle>

<!-- Styles moved to wwwroot/app.css -->

<div class="container-fluid py-5" style="background: linear-gradient(135deg, #e0e7ff 60%, #f8fafc 100%); min-height: 100vh; margin-top: 40px;">
    <div class="container px-2 px-md-4">
        <div class="row justify-content-center">
            <div class="col-12 col-md-10 col-lg-8">
                <div class="app-summary-banner mb-4">
                    <i class="bi bi-journal-text"></i>
                    <span>Application Summary</span>
                </div>
                @if (isLoading)
                {
                    <div class="text-center my-5 py-5"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>
                }
                else if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">@errorMessage</div>
                }
                else if (application == null)
                {
                    <div class="alert alert-warning">Application not found.</div>
                }
                else
                {
                    <div class="card shadow-sm border-0 mx-auto mb-5" style="border-radius: 18px; max-width: 700px; background: linear-gradient(90deg, #2563eb 0%, #3b82f6 100%); color: #fff; margin-top: 24px; box-shadow: 0 2px 12px rgba(37,99,235,0.10);">
                        <div class="card-body p-4 p-md-5" style="margin-bottom: 8px; background: rgba(255,255,255,0.85); border-radius: 14px; color: #222;">
                            <dl class="row mb-0" style="margin-bottom: 0;">
                                <dt class="col-sm-4 text-primary" style="margin-bottom: 0.5rem; font-size: 1.25rem; font-weight: 500;">Scholarship</dt>
                                <dd class="col-sm-8 mb-3" style="margin-bottom: 1.25rem; color: #2563eb; font-size: 1.25rem; font-weight: 500;">
                                    @(application?.Scholarship != null && !string.IsNullOrWhiteSpace(application.Scholarship.Title) ? application.Scholarship.Title : "(No Title)")
                                </dd>

                                <dt class="col-sm-4 text-primary" style="margin-bottom: 0.5rem; font-size: 1.25rem; font-weight: 500;">Provider</dt>
                                <dd class="col-sm-8 mb-3" style="margin-bottom: 1.25rem; color: #2563eb; font-size: 1.25rem; font-weight: 500;">
                                    @if (application?.Scholarship?.Institution != null && !string.IsNullOrEmpty(application.Scholarship.Institution.InstitutionName))
                                    {
                                        @application.Scholarship.Institution.InstitutionName
                                    }
                                    else if (application?.Scholarship?.Benefactor != null && !string.IsNullOrEmpty(application.Scholarship.Benefactor.OrganizationName))
                                    {
                                        @application.Scholarship.Benefactor.OrganizationName
                                    }
                                    else
                                    {
                                        <span>Unknown Provider</span>
                                    }
                                </dd>

                                <dt class="col-sm-4 text-primary" style="margin-bottom: 0.5rem; font-size: 1.25rem; font-weight: 500;">Date Applied</dt>
                                <dd class="col-sm-8 mb-3" style="margin-bottom: 1.25rem; color: #2563eb; font-size: 1.25rem; font-weight: 500;">
                                    @(application?.ApplicationDate != null ? application.ApplicationDate.ToString("MMM dd, yyyy") : "N/A")
                                </dd>

                                @if (GetStatus(application?.Status) == ApplicationStatus.Rejected)
                                {
                                    <dt class="col-sm-4 text-muted" style="margin-bottom: 0.5rem; font-size: 1.25rem; font-weight: 500;">Status</dt>
                                    <dd class="col-sm-8 mb-3" style="margin-bottom: 1.25rem; font-size: 1.25rem; font-weight: 500;">
                                        <span class="badge px-3 py-2 fs-6 @GetStatusClass(ApplicationStatus.Rejected) text-light" style="font-size: 1rem; letter-spacing: 0.5px; background: #2563eb; color: #fff;">
                                            Rejected
                                        </span>
                                    </dd>
                                }

                                @if (!string.IsNullOrEmpty(application?.ReviewNotes))
                                {
                                    <dt class="col-sm-4 text-primary" style="margin-bottom: 0.5rem; font-size: 1.25rem; font-weight: 500;">Institution Review</dt>
                                    <dd class="col-sm-8 mb-3" style="margin-bottom: 1.25rem; color: #2563eb; font-size: 1.25rem; font-weight: 500;">@application.ReviewNotes</dd>
                                }

                                <dt class="col-sm-4 text-primary" style="margin-bottom: 0.5rem; font-size: 1.25rem; font-weight: 500;">Personal Statement</dt>
                                <dd class="col-sm-8 mb-3" style="white-space: pre-line; margin-bottom: 1.25rem; color: #2563eb; font-size: 1.25rem; font-weight: 500;">@(application?.PersonalStatement ?? "N/A")</dd>

                                <dt class="col-sm-4 text-primary" style="margin-bottom: 0.5rem; font-size: 1.25rem; font-weight: 500;">Uploaded Documents</dt>
                                <dd class="col-sm-8" style="margin-bottom: 1.25rem; color: #2563eb; font-size: 1.25rem; font-weight: 500;">
                                    @if (documentLinks != null && documentLinks.Count > 0)
                                    {
                                        <ul class="list-unstyled mb-0">
                                        @foreach (var doc in documentLinks)
                                        {
                                            <li class="mb-1 d-flex flex-column">
                                                <div class="d-flex align-items-center">
                                                    <i class="@doc.IconClass me-2" style="font-size: 1.2em;"></i>
                                                    @if (!string.IsNullOrEmpty(doc.SasUrl))
                                                    {
                                                        <a href="@doc.SasUrl" target="_blank" rel="noopener noreferrer" class="text-decoration-none doc-link" style="transition: color 0.2s; color: #2563eb; font-weight: 500;" aria-label="Open document @doc.DisplayName in new tab">
                                                            @doc.DisplayName
                                                        </a>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-danger" style="color: #ef4444;">
                                                            <i class="bi bi-exclamation-circle-fill me-1" title="File not found"></i>
                                                            @doc.DisplayName
                                                            <span class="ms-1" title="@doc.ErrorText">(File not found)</span>
                                                        </span>
                                                    }
                                                </div>
                                                <!-- Debug URLs removed for production -->
                                            </li>
                                        }
                                        </ul>
                                    }
                                    else
                                    {
                                        <span class="text-muted">No documents uploaded.</span>
                                    }
                                </dd>
                            </dl>
                            <hr class="my-4" />
                            <div class="d-flex justify-content-end" style="margin-top: 16px;">
                                <button class="btn btn-outline-primary px-4 py-2 app-btn" style="border-color: #2563eb; color: #2563eb; background: #fff; font-weight: 500;" @onclick="GoBack" aria-label="Back to Applications">
                                    <i class="bi bi-arrow-left me-2"></i>Back to Applications
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public Guid ApplicationId { get; set; }

    private ScholarshipApplication? application;
    private bool isLoading = true;
    private string? errorMessage;

    // Document link info model
    private List<DocumentLinkInfo> documentLinks = new();

    // Helper class for document link info
    public class DocumentLinkInfo
    {
        public string BlobName { get; set; } = string.Empty;
        public string DisplayName { get; set; } = string.Empty;
        public string IconClass { get; set; } = "bi bi-paperclip text-secondary";
        public string? SasUrl { get; set; }
        public string RawUrl { get; set; } = string.Empty;
        public string ErrorText { get; set; } = string.Empty;
    }

    // Helper method to process document links
    private List<DocumentLinkInfo> GetDocumentLinks(string? uploadedDocuments)
    {
        var links = new List<DocumentLinkInfo>();
        if (string.IsNullOrEmpty(uploadedDocuments)) return links;
        var files = uploadedDocuments.Split(',', System.StringSplitOptions.RemoveEmptyEntries);
        foreach (var file in files)
        {
            var doc = new DocumentLinkInfo();
            doc.BlobName = file.Contains("/") ? file.Substring(file.LastIndexOf('/') + 1) : file;
            doc.BlobName = Uri.UnescapeDataString(doc.BlobName);
            doc.DisplayName = doc.BlobName.Contains('_') ? doc.BlobName.Substring(doc.BlobName.IndexOf('_') + 1) : doc.BlobName;
            var ext = System.IO.Path.GetExtension(doc.BlobName).ToLowerInvariant();
            doc.IconClass = ext switch
            {
                ".pdf" => "bi bi-file-earmark-pdf text-danger",
                ".doc" or ".docx" => "bi bi-file-earmark-word text-primary",
                ".jpg" or ".jpeg" or ".png" => "bi bi-file-earmark-image text-success",
                _ => "bi bi-paperclip text-secondary"
            };
            doc.RawUrl = BlobStorageService.GetDocumentUrl(doc.BlobName);
            try
            {
                doc.SasUrl = BlobStorageService.GetDocumentSasUrl(doc.BlobName);
            }
            catch (Exception ex)
            {
                doc.SasUrl = null;
                doc.ErrorText = $"(link error: {ex.Message})";
            }
            links.Add(doc);
        }
        return links;
    }

    private CancellationTokenSource _cts = new();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userId))
            {
                errorMessage = "User not authenticated.";
                isLoading = false;
                return;
            }

            using var db = DbContextFactory.CreateDbContext();

            // Find the student's profile
            var studentProfile = await db.StudentProfiles.FirstOrDefaultAsync(sp => sp.UserId == userId, _cts.Token);
            if (studentProfile == null)
            {
                errorMessage = "Student profile not found.";
                isLoading = false;
                return;
            }

            Guid studentId = studentProfile.StudentProfileId;

            // Load the application and related scholarship/provider
            application = await db.ScholarshipApplications
                .Where(a => a.ScholarshipApplicationId == ApplicationId && a.StudentProfileId == studentId)
                .Include(a => a.Scholarship)
                    .ThenInclude(s => s.Institution)
                .Include(a => a.Scholarship)
                    .ThenInclude(s => s.Benefactor)
                .FirstOrDefaultAsync(_cts.Token);

            // Precompute document links
            documentLinks = GetDocumentLinks(application?.UploadedDocuments);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading application: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    private const string ApplicationsRoute = "/dashboard/student/applications";
    private void GoBack()
    {
        Navigation.NavigateTo(ApplicationsRoute);
    }

    public enum ApplicationStatus
    {
        Pending,
        Approved,
        Rejected,
        Unknown
    }

    private ApplicationStatus GetStatus(string? status)
    {
        return status switch
        {
            "Pending" => ApplicationStatus.Pending,
            "Approved" => ApplicationStatus.Approved,
            "Rejected" => ApplicationStatus.Rejected,
            _ => ApplicationStatus.Unknown
        };
    }

    private string GetStatusClass(ApplicationStatus status)
    {
        return status switch
        {
            ApplicationStatus.Pending => "bg-warning text-dark",
            ApplicationStatus.Approved => "bg-success",
            ApplicationStatus.Rejected => "bg-danger",
            _ => "bg-secondary"
        };
    }
}
