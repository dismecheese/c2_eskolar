@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms;
@page "/student/verification"
@layout Layout.SUnDashLayout

@if (!HasAlreadySubmitted || CurrentAccountStatus == "Rejected")
{
<EditForm Model="verificationModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="dashboard-center-container">
    <div class="sv-header">
        <h2 id="sv-modal-title">Student Verification</h2>
        <div class="sv-divider"></div>
    </div>

    @if (!string.IsNullOrEmpty(ProfileErrorMessage))
    {
        <div class="alert @(ProfileErrorMessage.Contains("✓") ? "alert-success" : "alert-info")" role="alert">
            @ProfileErrorMessage
            @if (ProfileErrorMessage.Contains("✓"))
            {
                <button type="button" class="btn btn-sm btn-outline-secondary ms-2" @onclick="ClearAiExtractedData">
                    Reset Form
                </button>
            }
        </div>
    }

    <!-- Institution Check Section -->
    <section class="sv-card sv-card-elevated">
        <div class="sv-section-title">Partnership Check</div>
        <div class="sv-institution-check">
            <div class="sv-field sv-field-vertical">
                <label class="sv-field-label">Are you affiliated with a partner institution?</label>
                <div class="sv-radio-group">
                    <label for="instYes" class="sv-radio-label">
                        <input type="radio" id="instYes" name="institutionCheck" value="Yes" @onchange="() => SetInstitutionCheck(true)" checked="@IsInstitutionAffiliated" />
                        Yes
                    </label>
                    <label for="instNo" class="sv-radio-label">
                        <input type="radio" id="instNo" name="institutionCheck" value="No" @onchange="() => SetInstitutionCheck(false)" checked="@(!IsInstitutionAffiliated)" />
                        No
                    </label>
                </div>
            </div>
            <div class="sv-field sv-field-vertical">
                <label for="institutionDropdown" class="sv-field-label">Select Institution</label>
                <div class="sv-custom-select @(IsInstitutionDropdownDisabled ? "sv-custom-select-disabled" : null)" tabindex="0"
                     @onclick="() => { if (!IsInstitutionDropdownDisabled) ToggleInstitutionDropdown(); }"
                     @onblur="CloseInstitutionDropdown"
                     style="@(IsInstitutionDropdownDisabled ? "pointer-events: none; opacity: 0.6;" : null)">
                    <span class="sv-custom-select-value">@SelectedInstitutionText</span>
                    <svg class="sv-custom-select-arrow" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M6 9l6 6 6-6"/></svg>
                    @if (ShowInstitutionDropdown && !IsInstitutionDropdownDisabled)
                    {
                        <ul class="sv-custom-select-list">
                            @{
                                var instNone = string.Empty;
                                var instA = "Institution A";
                                var instB = "Institution B";
                                var instC = "Institution C";
                            }
                            <li class="sv-custom-select-item @(string.IsNullOrEmpty(SelectedInstitution) ? "selected" : null)" @onmousedown="() => SelectInstitution(instNone)">Select an institution</li>
                            <li class="sv-custom-select-item @(SelectedInstitution == instA ? "selected" : null)" @onmousedown="() => SelectInstitution(instA)">Institution A</li>
                            <li class="sv-custom-select-item @(SelectedInstitution == instB ? "selected" : null)" @onmousedown="() => SelectInstitution(instB)">Institution B</li>
                            <li class="sv-custom-select-item @(SelectedInstitution == instC ? "selected" : null)" @onmousedown="() => SelectInstitution(instC)">Institution C</li>
                        </ul>
                    }
                </div>
            </div>
        </div>

        <!-- Add spacing between institution and benefactor check sections -->
        <div style="height: 2rem;"></div>

        <!-- Benefactor Check Section -->
        <div class="sv-institution-check">
            <div class="sv-field sv-field-vertical">
                <label class="sv-field-label">Are you affiliated with a partner benefactor?</label>
                <div class="sv-radio-group">
                    <label for="benefactorYes" class="sv-radio-label">
                        <input type="radio" id="benefactorYes" name="benefactorCheck" value="Yes" @onchange="() => SetBenefactorCheck(true)" checked="@IsBenefactorAffiliated" />
                        Yes
                    </label>
                    <label for="benefactorNo" class="sv-radio-label">
                        <input type="radio" id="benefactorNo" name="benefactorCheck" value="No" @onchange="() => SetBenefactorCheck(false)" checked="@(!IsBenefactorAffiliated)" />
                        No
                    </label>
                </div>
            </div>
            <div class="sv-field sv-field-vertical">
                <label for="benefactorDropdown" class="sv-field-label">Select Benefactor</label>
                <div class="sv-custom-select @(IsBenefactorDropdownDisabled ? "sv-custom-select-disabled" : null)" tabindex="0"
                     @onclick="() => { if (!IsBenefactorDropdownDisabled) ToggleBenefactorDropdown(); }"
                     @onblur="CloseBenefactorDropdown"
                     style="@(IsBenefactorDropdownDisabled ? "pointer-events: none; opacity: 0.6;" : null)">
                    <span class="sv-custom-select-value">@SelectedBenefactorText</span>
                    <svg class="sv-custom-select-arrow" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M6 9l6 6 6-6"/></svg>
                    @if (ShowBenefactorDropdown && !IsBenefactorDropdownDisabled)
                    {
                        <ul class="sv-custom-select-list">
                            @{
                                var benefNone = string.Empty;
                                var benefA = "Benefactor A";
                                var benefB = "Benefactor B";
                                var benefC = "Benefactor C";
                            }
                            <li class="sv-custom-select-item @(string.IsNullOrEmpty(SelectedBenefactor) ? "selected" : null)" @onmousedown="() => SelectBenefactor(benefNone)">Select a benefactor</li>
                            <li class="sv-custom-select-item @(SelectedBenefactor == benefA ? "selected" : null)" @onmousedown="() => SelectBenefactor(benefA)">Benefactor A</li>
                            <li class="sv-custom-select-item @(SelectedBenefactor == benefB ? "selected" : null)" @onmousedown="() => SelectBenefactor(benefB)">Benefactor B</li>
                            <li class="sv-custom-select-item @(SelectedBenefactor == benefC ? "selected" : null)" @onmousedown="() => SelectBenefactor(benefC)">Benefactor C</li>
                        </ul>
                    }
                </div>
            </div>
        </div>

    </section>

        <!-- Document Upload Section -->
    <section class="sv-card sv-card-elevated">
        <div class="sv-section-title">Document Upload</div>
        <div class="sv-upload-grid">
            <div class="sv-upload-field">
                <label for="idUploadInput" class="sv-field-label">Student ID <span class="sv-required">*</span></label>
                <div class="sv-upload-area">
                    <InputFile id="idUploadInput" style="display:none" accept="image/*,.pdf" OnChange="OnStudentIdFileChange" />
                    <label for="idUploadInput" class="sv-upload-placeholder" style="cursor:pointer;">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M12 16L16 12H13V8H11V12H8L12 16Z" fill="currentColor"/>
                            <path d="M20 6H16L14 4H10L8 6H4C2.9 6 2 6.9 2 8V18C2 19.1 2.9 20 4 20H20C21.1 20 22 19.1 22 18V8C22 6.9 21.1 6 20 6Z" fill="currentColor"/>
                        </svg>
                        <span>@(StudentIdUploadStatus ?? "Click to upload or drag and drop")</span>
                        <small>PNG, JPG or PDF (max. 5MB) - AI will extract your personal info</small>
                        @if (!string.IsNullOrEmpty(StudentIdFileName))
                        {
                            <div style="font-size:0.9em; display:flex; align-items:center; gap:0.5em;">
                                <span>@StudentIdFileName</span>
                                <button type="button" class="btn btn-sm btn-danger" @onclick="RemoveStudentIdDocument" style="margin-left:0.5em;">Remove</button>
                            </div>
                        }
                        @if (StudentIdUploadStatus?.Contains("Processing") == true)
                        {
                            <div style="color:orange;font-size:0.9em;">
                                <i class="fas fa-spinner fa-spin"></i> Processing with AI...
                            </div>
                        }
                        else if (StudentIdUploadStatus?.Contains("Extracted") == true)
                        {
                            <div style="color:green;font-size:0.9em;">
                                <i class="fas fa-check-circle"></i> Uploaded & Data Extracted!
                            </div>
                        }
                        else if (!string.IsNullOrEmpty(StudentIdUploadUrl))
                        {
                            <div style="color:green;font-size:0.9em;">
                                <i class="fas fa-check"></i> Uploaded!
                            </div>
                        }
                    </label>
                </div>
            </div>
            <div class="sv-upload-field">
                <label for="corUploadInput" class="sv-field-label">Certificate of Registration (COR) <span class="sv-required">*</span></label>
                <div class="sv-upload-area">
                    <InputFile id="corUploadInput" style="display:none" accept="image/*,.pdf" OnChange="OnCorFileChange" />
                    <label for="corUploadInput" class="sv-upload-placeholder" style="cursor:pointer;">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M12 16L16 12H13V8H11V12H8L12 16Z" fill="currentColor"/>
                            <path d="M20 6H16L14 4H10L8 6H4C2.9 6 2 6.9 2 8V18C2 19.1 2.9 20 4 20H20C21.1 20 22 19.1 22 18V8C22 6.9 21.1 6 20 6Z" fill="currentColor"/>
                        </svg>
                        <span>@(CorUploadStatus ?? "Click to upload or drag and drop")</span>
                        <small>PNG, JPG or PDF (max. 5MB) - AI will extract your academic info</small>
                        @if (!string.IsNullOrEmpty(CorFileName))
                        {
                            <div style="font-size:0.9em; display:flex; align-items:center; gap:0.5em;">
                                <span>@CorFileName</span>
                                <button type="button" class="btn btn-sm btn-danger" @onclick="RemoveCorDocument" style="margin-left:0.5em;">Remove</button>
                            </div>
                        }
                        @if (CorUploadStatus?.Contains("Processing") == true)
                        {
                            <div style="color:orange;font-size:0.9em;">
                                <i class="fas fa-spinner fa-spin"></i> Processing with AI...
                            </div>
                        }
                        else if (CorUploadStatus?.Contains("Extracted") == true)
                        {
                            <div style="color:green;font-size:0.9em;">
                                <i class="fas fa-check-circle"></i> Uploaded & Data Extracted!
                            </div>
                        }
                        else if (!string.IsNullOrEmpty(CorUploadUrl))
                        {
                            <div style="color:green;font-size:0.9em;">
                                <i class="fas fa-check"></i> Uploaded!
                            </div>
                        }
                    </label>
                </div>
            </div>
        </div>
    </section>

    <!-- Personal Information Section -->
    <section class="sv-card sv-card-elevated">
        <div class="sv-section-title">Personal Information</div>
        <div class="sv-form-grid-personal">
            <!-- Name Row: First Name (wider), Middle Name (shorter), Last Name (wider) -->
            <div class="sv-field-name-row">
                <div class="sv-field sv-field-vertical">
                    <label for="firstName" class="sv-field-label">First Name <span class="sv-required">*</span></label>
                    <InputText id="firstName" class="sv-input" placeholder="Enter your first name" @bind-Value="verificationModel.FirstName" />
                    <ValidationMessage For="@(() => verificationModel.FirstName)" />
                </div>
                <div class="sv-field sv-field-vertical">
                    <label for="middleName" class="sv-field-label">Middle Name</label>
                    <InputText id="middleName" class="sv-input" placeholder="Middle name" @bind-Value="verificationModel.MiddleName" />
                    <ValidationMessage For="@(() => verificationModel.MiddleName)" />
                </div>
                <div class="sv-field sv-field-vertical">
                    <label for="lastName" class="sv-field-label">Last Name <span class="sv-required">*</span></label>
                    <InputText id="lastName" class="sv-input" placeholder="Enter your last name" @bind-Value="verificationModel.LastName" />
                    <ValidationMessage For="@(() => verificationModel.LastName)" />
                </div>
            </div>
            
            <!-- Compact Row: Sex and Birthday -->
            <div class="sv-field-compact-row">
                <div class="sv-field sv-field-vertical sv-field-short">
                    <label for="sexDropdown" class="sv-field-label">Sex <span class="sv-required">*</span></label>
                    <div class="sv-custom-select @(ShowSexDropdown ? "sv-custom-select-open" : null)" tabindex="0"
                         @onclick="ToggleSexDropdown"
                         @onblur="CloseSexDropdown"
                         id="sexDropdown">
                        <span class="sv-custom-select-value">@SelectedSexText</span>
                        <svg class="sv-custom-select-arrow" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M6 9l6 6 6-6"/></svg>
                        @if (ShowSexDropdown)
                        {
                            <ul class="sv-custom-select-list">
                                    <li class="sv-custom-select-item" @onmousedown='() => SelectSex("")'>Select sex</li>
                                    <li class="sv-custom-select-item" @onmousedown='() => SelectSex("Male")'>Male</li>
                                    <li class="sv-custom-select-item" @onmousedown='() => SelectSex("Female")'>Female</li>
                                    <li class="sv-custom-select-item" @onmousedown='() => SelectSex("Other")'>Other</li>
                            </ul>
                        }
                    </div>
                    <ValidationMessage For="@(() => verificationModel.Sex)" />
                </div>
                <div class="sv-field sv-field-vertical">
                    <label for="bday" class="sv-field-label">Birthday <span class="sv-required">*</span></label>
                    <InputDate id="bday" class="sv-input" @bind-Value="verificationModel.BirthDate" />
                    <ValidationMessage For="@(() => verificationModel.BirthDate)" />
                </div>
            </div>
            
            <!-- Contact Row: Nationality (wider) and Contact Number (shorter) -->
            <div class="sv-field-contact-row">
                <div class="sv-field sv-field-vertical">
                    <label for="nationality" class="sv-field-label">Nationality <span class="sv-required">*</span></label>
                    <InputText id="nationality" class="sv-input" placeholder="Enter your nationality" @bind-Value="verificationModel.Nationality" />
                    <ValidationMessage For="@(() => verificationModel.Nationality)" />
                </div>
                <div class="sv-field sv-field-vertical">
                    <label for="number" class="sv-field-label">Contact Number <span class="sv-required">*</span></label>
                    <InputText id="number" class="sv-input" placeholder="Enter your contact number" @bind-Value="verificationModel.Phone" />
                    <ValidationMessage For="@(() => verificationModel.Phone)" />
                </div>
            </div>
            
            <!-- Full Width Fields -->
            <div class="sv-field sv-field-vertical sv-field-full">
                <label for="address" class="sv-field-label">Address <span class="sv-required">*</span></label>
                <InputText id="address" class="sv-input" placeholder="Enter your complete address" @bind-Value="verificationModel.PermanentAddress" />
                <ValidationMessage For="@(() => verificationModel.PermanentAddress)" />
            </div>
            <div class="sv-field sv-field-vertical sv-field-full">
                <label for="personalEmail" class="sv-field-label">Personal Email <span class="sv-required">*</span></label>
                <InputText id="personalEmail" class="sv-input" placeholder="Enter your personal email" @bind-Value="verificationModel.Email" />
                <ValidationMessage For="@(() => verificationModel.Email)" />
            </div>
            <div class="sv-field sv-field-vertical sv-field-full">
                <label for="institutionalEmail" class="sv-field-label">Institutional Email</label>
                <InputText id="institutionalEmail" class="sv-input" placeholder="Enter your institutional email" @bind-Value="verificationModel.InstitutionalEmail" />
                <ValidationMessage For="@(() => verificationModel.InstitutionalEmail)" />
            </div>
        </div>
    </section>



    <!-- Educational Information Section -->
    <section class="sv-card sv-card-elevated">
        <div class="sv-section-title">Educational Information</div>
        <div class="sv-form-grid">
            <div class="sv-field sv-field-vertical">
                <label for="university" class="sv-field-label">University <span class="sv-required">*</span></label>
                <InputText id="university" class="sv-input" placeholder="Enter your university" @bind-Value="verificationModel.University" />
                <ValidationMessage For="@(() => verificationModel.University)" />
            </div>
            <div class="sv-field sv-field-vertical">
                <label for="studentNumber" class="sv-field-label">Student Number <span class="sv-required">*</span></label>
                <InputText id="studentNumber" class="sv-input" placeholder="Enter your student number" @bind-Value="verificationModel.StudentNumber" />
                <ValidationMessage For="@(() => verificationModel.StudentNumber)" />
            </div>
            <div class="sv-field sv-field-vertical">
                <label for="program" class="sv-field-label">Program <span class="sv-required">*</span></label>
                <InputText id="program" class="sv-input" placeholder="BS Information Technology" @bind-Value="verificationModel.Program" />
                <ValidationMessage For="@(() => verificationModel.Program)" />
            </div>
            <div class="sv-field sv-field-vertical">
                <label for="yearLevelDropdown" class="sv-field-label">Year Level <span class="sv-required">*</span></label>
                <div class="sv-custom-select @(ShowYearLevelDropdown ? "sv-custom-select-open" : null)" tabindex="0"
                     @onclick="ToggleYearLevelDropdown"
                     @onblur="CloseYearLevelDropdown"
                     id="yearLevelDropdown">
                    <span class="sv-custom-select-value">@SelectedYearLevelText</span>
                    <svg class="sv-custom-select-arrow" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M6 9l6 6 6-6"/></svg>
                    @if (ShowYearLevelDropdown)
                    {
                        <ul class="sv-custom-select-list">
                            <li class="sv-custom-select-item" @onmousedown='() => SelectYearLevel("")'>Select year level</li>
                            <li class="sv-custom-select-item" @onmousedown='() => SelectYearLevel("1st Year")'>1st Year</li>
                            <li class="sv-custom-select-item" @onmousedown='() => SelectYearLevel("2nd Year")'>2nd Year</li>
                            <li class="sv-custom-select-item" @onmousedown='() => SelectYearLevel("3rd Year")'>3rd Year</li>
                            <li class="sv-custom-select-item" @onmousedown='() => SelectYearLevel("4th Year")'>4th Year</li>
                            <li class="sv-custom-select-item" @onmousedown='() => SelectYearLevel("5th Year")'>5th Year</li>
                            <li class="sv-custom-select-item" @onmousedown='() => SelectYearLevel("Other")'>Other</li>
                        </ul>
                    }
                </div>
                <ValidationMessage For="@(() => verificationModel.YearLevel)" />
            </div>
            <div class="sv-field sv-field-vertical">
                <label for="status" class="sv-field-label">Status</label>
                <div class="sv-status-badge sv-status-pending">Pending Verification</div>
            </div>
        </div>
    </section>

    <!-- Actions Section -->
    <div class="sv-actions-container">
        <div class="sv-actions-buttons">
            <button type="button" class="sv-btn sv-btn-secondary">Skip for now</button>
            <button type="submit" class="sv-btn sv-btn-primary" disabled="@(IsSubmitting)">
                @if (IsSubmitting)
                {
                    <span>
                        <i class="fas fa-spinner fa-spin"></i> Submitting...
                    </span>
                }
                else
                {
                    <span>Submit Verification</span>
                }
            </button>
        </div>
        <div class="sv-status-messages">
            <div class="sv-status-info" style="display:none;">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z" fill="currentColor"/>
                </svg>
                <span>Status message placeholder</span>
            </div>
            <div class="sv-status-error" style="display:none;">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z" fill="currentColor"/>
                </svg>
                <span>Error message placeholder</span>
            </div>
        </div>
    </div>

    <!-- Success Modal -->
    @if (ShowSuccessModal)
    {
        <div class="sv-modal-overlay" @onclick="CloseSuccessModal">
            <div class="sv-modal" @onclick:stopPropagation="true">
                <div class="sv-modal-header">
                    <h3>Verification Submitted Successfully!</h3>
                    <button type="button" class="sv-modal-close" @onclick="CloseSuccessModal">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M6 18L18 6M6 6l12 12"/>
                        </svg>
                    </button>
                </div>
                <div class="sv-modal-body">
                    <div class="sv-modal-icon">
                        <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M9 12l2 2 4-4"/>
                            <circle cx="12" cy="12" r="10"/>
                        </svg>
                    </div>
                    <div class="sv-modal-content">
                        <h4>Your verification request has been submitted!</h4>
                        <p>Thank you for submitting your verification documents. Our admin team will review your information and documents within 2-3 business days.</p>
                        <div class="sv-modal-info-box">
                            <h5>What happens next?</h5>
                            <ul>
                                <li>Admin review of your submitted documents</li>
                                <li>Verification of your academic information</li>
                                <li>Email notification once verification is complete</li>
                                <li>Access to all scholarship features upon approval</li>
                            </ul>
                        </div>
                        <p><strong>Status:</strong> <span class="sv-status-badge sv-status-pending">Pending Review</span></p>
                    </div>
                </div>
                <div class="sv-modal-footer">
                    <button type="button" class="sv-btn sv-btn-secondary" @onclick="CloseSuccessModal">Stay Here</button>
                    <button type="button" class="sv-btn sv-btn-primary" @onclick="NavigateToProfile">View Profile</button>
                </div>
            </div>
        </div>
    }

    @code {
        // Validation model for the form
        public class StudentVerificationModel
        {
            [Required(ErrorMessage = "First name is required.")]
            public string FirstName { get; set; } = string.Empty;

            public string? MiddleName { get; set; }

            [Required(ErrorMessage = "Last name is required.")]
            public string LastName { get; set; } = string.Empty;

            [Required(ErrorMessage = "Sex is required.")]
            public string Sex { get; set; } = string.Empty;

            [Required(ErrorMessage = "Birthdate is required.")]
            public DateTime? BirthDate { get; set; }

            [Required(ErrorMessage = "Nationality is required.")]
            public string Nationality { get; set; } = string.Empty;

            [Required(ErrorMessage = "Address is required.")]
            public string PermanentAddress { get; set; } = string.Empty;

            [Required(ErrorMessage = "Personal email is required.")]
            [EmailAddress(ErrorMessage = "Invalid email address.")]
            public string Email { get; set; } = string.Empty;

            public string? InstitutionalEmail { get; set; }

            [Required(ErrorMessage = "Contact number is required.")]
            public string Phone { get; set; } = string.Empty;

            [Required(ErrorMessage = "University is required.")]
            public string University { get; set; } = string.Empty;

            [Required(ErrorMessage = "Student number is required.")]
            public string StudentNumber { get; set; } = string.Empty;

            [Required(ErrorMessage = "Program is required.")]
            public string Program { get; set; } = string.Empty;

            [Required(ErrorMessage = "Year level is required.")]
            public string YearLevel { get; set; } = string.Empty;
    }

    private StudentVerificationModel verificationModel = new StudentVerificationModel();

        private bool IsSubmitting = false;
        private bool ShowSuccessModal = false;
        
        // Modal state management properties
        protected bool ShowAlreadySubmittedModal = false;
        protected bool HasAlreadySubmitted = false;
        protected string CurrentAccountStatus = "";

    private async Task HandleValidSubmit()
        {
            Console.WriteLine("[StudentVerification] HandleValidSubmit called");
            
            if (IsSubmitting) 
            {
                Console.WriteLine("[StudentVerification] Already submitting, returning");
                return;
            }
            
            IsSubmitting = true;
            ProfileErrorMessage = "";
            
            Console.WriteLine("[StudentVerification] Starting form validation and submission");
            
            try
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var userId = authState.User?.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                if (string.IsNullOrWhiteSpace(userId))
                {
                    ProfileErrorMessage = "User not found.";
                    IsSubmitting = false;
                    return;
                }

                var studentProfile = await StudentProfileService.GetProfileByUserIdAsync(userId) ?? new c2_eskolar.Models.StudentProfile {
                    UserId = userId,
                    FirstName = verificationModel.FirstName,
                    LastName = verificationModel.LastName
                };

                studentProfile.FirstName = verificationModel.FirstName;
                studentProfile.MiddleName = verificationModel.MiddleName;
                studentProfile.LastName = verificationModel.LastName;
                studentProfile.Sex = verificationModel.Sex;
                studentProfile.BirthDate = verificationModel.BirthDate ?? DateTime.Now;
                studentProfile.Nationality = verificationModel.Nationality;
                studentProfile.PermanentAddress = verificationModel.PermanentAddress;
                studentProfile.Email = verificationModel.Email;
                studentProfile.MobileNumber = verificationModel.Phone;
                studentProfile.UniversityName = verificationModel.University;
                studentProfile.StudentNumber = verificationModel.StudentNumber;
                studentProfile.Course = verificationModel.Program;
                studentProfile.YearLevel = ParseYearLevel(verificationModel.YearLevel);
                studentProfile.InstitutionalEmail = verificationModel.InstitutionalEmail;
                studentProfile.AccountStatus = "Pending";
                studentProfile.StudentIdDocumentPath = StudentIdUploadUrl;
                studentProfile.CorDocumentPath = CorUploadUrl;
                
                // Save institution affiliation
                studentProfile.IsPartnerInstitution = IsInstitutionAffiliated;
                studentProfile.PartnerInstitutionName = IsInstitutionAffiliated ? SelectedInstitution : null;
                
                // Save benefactor affiliation
                studentProfile.IsPartnerBenefactor = IsBenefactorAffiliated;
                studentProfile.PartnerBenefactorName = IsBenefactorAffiliated ? SelectedBenefactor : null;

                await StudentProfileService.SaveProfileAsync(studentProfile, studentProfile.Email);
                
                Console.WriteLine("[StudentVerification] Profile saved successfully, showing success modal");
                
                // Show success modal instead of immediate redirect
                ShowSuccessModal = true;
                ProfileErrorMessage = ""; // Clear any previous error messages
                
                Console.WriteLine($"[StudentVerification] ShowSuccessModal set to: {ShowSuccessModal}");
                StateHasChanged();
                
                Console.WriteLine("[StudentVerification] StateHasChanged called, modal should be visible");
            }
            catch (Exception ex)
            {
                ProfileErrorMessage = $"Error submitting verification: {ex.Message}";
            }
            IsSubmitting = false;
        }

        private int? ParseYearLevel(string yearLevelStr)
        {
            if (string.IsNullOrWhiteSpace(yearLevelStr)) return null;
            var digits = new string(yearLevelStr.TakeWhile(char.IsDigit).ToArray());
            if (int.TryParse(digits, out var yl)) return yl;
            if (yearLevelStr.Contains("1")) return 1;
            if (yearLevelStr.Contains("2")) return 2;
            if (yearLevelStr.Contains("3")) return 3;
            if (yearLevelStr.Contains("4")) return 4;
            if (yearLevelStr.Contains("5")) return 5;
            return null;
        }
    // Remove old field properties (now using verificationModel)
    private string Status = "Pending";
    private string ProfileErrorMessage = "";

        [Inject] private Services.StudentProfileService StudentProfileService { get; set; } = default!;
        [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;
        [Inject] private Services.DocumentIntelligenceService DocumentIntelligenceService { get; set; } = default!;
        [Inject] private NavigationManager Navigation { get; set; } = default!;

        protected override async Task OnInitializedAsync()
        {
            await LoadStudentProfileData();
        }

        private async Task LoadStudentProfileData()
        {
            try
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var userId = authState.User?.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                var userEmail = authState.User?.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value;
                if (!string.IsNullOrWhiteSpace(userId))
                {
                    var studentProfile = await StudentProfileService.GetProfileByUserIdAsync(userId);
                    if (studentProfile != null)
                    {
                        // Check account status to determine if user has already submitted
                        CurrentAccountStatus = studentProfile.AccountStatus ?? "";
                        
                        // Check if user has already submitted (any status except null/empty)
                        if (!string.IsNullOrEmpty(studentProfile.AccountStatus))
                        {
                            HasAlreadySubmitted = true;
                            ShowAlreadySubmittedModal = true;
                        }
                        
                        verificationModel.FirstName = studentProfile.FirstName ?? "";
                        verificationModel.MiddleName = studentProfile.MiddleName ?? "";
                        verificationModel.LastName = studentProfile.LastName ?? "";
                        verificationModel.Sex = studentProfile.Sex ?? "";
                        verificationModel.Nationality = studentProfile.Nationality ?? "";
                        verificationModel.PermanentAddress = studentProfile.PermanentAddress ?? "";
                        verificationModel.BirthDate = studentProfile.BirthDate ?? DateTime.Now;
                        verificationModel.Phone = studentProfile.MobileNumber ?? "";
                        // Always prepopulate email from profile, fallback to authenticated user's email
                        verificationModel.Email = !string.IsNullOrWhiteSpace(studentProfile.Email) ? studentProfile.Email : (userEmail ?? "");
                        verificationModel.University = studentProfile.UniversityName ?? "";
                        verificationModel.StudentNumber = studentProfile.StudentNumber ?? "";
                        verificationModel.Program = studentProfile.Course ?? "";
                        verificationModel.YearLevel = studentProfile.YearLevel.HasValue ? $"{studentProfile.YearLevel} year" : "";
                        Status = studentProfile.AccountStatus ?? "Pending";
                    }
                    else
                    {
                        // If no profile, prepopulate email from authentication state
                        verificationModel.Email = userEmail ?? "";
                    }
                }
            }
            catch (Exception ex)
            {
                ProfileErrorMessage = $"Error loading profile: {ex.Message}";
            }
        }
        private async Task RemoveCorDocument()
        {
            if (string.IsNullOrEmpty(CorUploadUrl)) return;
            try
            {
                // Extract filename from URL (after last '/')
                var uri = new Uri(CorUploadUrl);
                var fileName = uri.Segments[^1];
                var response = await Http.DeleteAsync($"/api/document/{fileName}");
                if (response.IsSuccessStatusCode)
                {
                    CorFileName = null;
                    CorUploadUrl = null;
                    CorUploadStatus = null;
                }
                else
                {
                    CorUploadStatus = "Remove failed.";
                }
            }
            catch (Exception ex)
            {
                CorUploadStatus = $"Error: {ex.Message}";
            }
        }
        private async Task RemoveStudentIdDocument()
        {
            if (string.IsNullOrEmpty(StudentIdUploadUrl)) return;
            try
            {
                // Extract filename from URL (after last '/')
                var uri = new Uri(StudentIdUploadUrl);
                var fileName = uri.Segments[^1];
                var response = await Http.DeleteAsync($"/api/document/{fileName}");
                if (response.IsSuccessStatusCode)
                {
                    StudentIdFileName = null;
                    StudentIdUploadUrl = null;
                    StudentIdUploadStatus = null;
                }
                else
                {
                    StudentIdUploadStatus = "Remove failed.";
                }
            }
            catch (Exception ex)
            {
                StudentIdUploadStatus = $"Error: {ex.Message}";
            }
        }
        // Upload status and file names
        private string? StudentIdFileName;
        private string? CorFileName;
        private string? StudentIdUploadUrl;
        private string? CorUploadUrl;
        private string? StudentIdUploadStatus;
        private string? CorUploadStatus;


        [Inject] private HttpClient Http { get; set; } = default!;

        private async Task OnStudentIdFileChange(Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs e)
        {
        var file = e.File;
        if (file == null)
        {
            StudentIdUploadStatus = "No file selected.";
            StateHasChanged();
            return;
        }
        // Validate file type and size before upload
        var validExtensions = new[] { ".jpg", ".jpeg", ".png", ".pdf" };
        var fileExt = System.IO.Path.GetExtension(file.Name).ToLowerInvariant();
        if (!validExtensions.Contains(fileExt))
        {
            StudentIdUploadStatus = $"Invalid file type: {fileExt}. Allowed: {string.Join(", ", validExtensions)}";
            StateHasChanged();
            return;
        }
        if (file.Size > 5 * 1024 * 1024)
        {
            StudentIdUploadStatus = "File too large. Max 5MB.";
            StateHasChanged();
            return;
        }
        StudentIdFileName = file.Name;
        StudentIdUploadStatus = "Uploading...";
        StateHasChanged();
        try
        {
            // Step 1: Upload the file
            var content = new MultipartFormDataContent();
            var stream = file.OpenReadStream(5 * 1024 * 1024);
            content.Add(new StreamContent(stream), "file", file.Name);
            content.Add(new StringContent("StudentID"), "docType");
            var response = await Http.PostAsync("/api/document/upload", content);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<UploadResult>();
                StudentIdUploadUrl = result?.url;
                StudentIdUploadStatus = "Processing with AI...";
                StateHasChanged();
                // Step 2: Analyze the document with Document Intelligence
                try
                {
                    var extractedData = await DocumentIntelligenceService.AnalyzeIdDocumentAsync(file);
                    if (extractedData != null)
                    {
                        PrepopulateFromIdDocument(extractedData);
                        StudentIdUploadStatus = "Document uploaded and processed successfully.";
                    }
                    else
                    {
                        StudentIdUploadStatus = "Document uploaded successfully. Automated extraction could not be completed - please verify image quality and document type.";
                    }
                }
                catch (HttpRequestException ex) when (ex.Message.Contains("Connection reset") || ex.Message.Contains("network"))
                {
                    StudentIdUploadStatus = "Document uploaded successfully. Network connectivity issues prevented automated processing - please complete the form manually or retry upload.";
                }
                catch (TaskCanceledException ex) when (ex.Message.Contains("timeout"))
                {
                    StudentIdUploadStatus = "Document uploaded successfully. Processing timeout occurred - please complete the form manually or retry upload.";
                }
                catch (Exception ex)
                {
                    StudentIdUploadStatus = $"AI extraction error: {ex.Message.Substring(0, Math.Min(100, ex.Message.Length))}...";
                }
            }
            else
            {
                var errorMsg = await response.Content.ReadAsStringAsync();
                StudentIdUploadStatus = $"Upload failed: {errorMsg}";
            }
        }
        catch (Exception ex)
        {
            StudentIdUploadStatus = $"Error: {ex.Message}";
        }
        StateHasChanged();
        }

        private async Task OnCorFileChange(Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs e)
        {
        var file = e.File;
        if (file == null)
        {
            CorUploadStatus = "No file selected.";
            StateHasChanged();
            return;
        }
        // Validate file type and size before upload
        var validExtensions = new[] { ".jpg", ".jpeg", ".png", ".pdf" };
        var fileExt = System.IO.Path.GetExtension(file.Name).ToLowerInvariant();
        if (!validExtensions.Contains(fileExt))
        {
            CorUploadStatus = $"Invalid file type: {fileExt}. Allowed: {string.Join(", ", validExtensions)}";
            StateHasChanged();
            return;
        }
        if (file.Size > 5 * 1024 * 1024)
        {
            CorUploadStatus = "File too large. Max 5MB.";
            StateHasChanged();
            return;
        }
        CorFileName = file.Name;
        CorUploadStatus = "Uploading...";
        StateHasChanged();
        try
        {
            // Step 1: Upload the file
            var content = new MultipartFormDataContent();
            var stream = file.OpenReadStream(5 * 1024 * 1024);
            content.Add(new StreamContent(stream), "file", file.Name);
            content.Add(new StringContent("COR"), "docType");
            var response = await Http.PostAsync("/api/document/upload", content);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<UploadResult>();
                CorUploadUrl = result?.url;
                CorUploadStatus = "Processing with AI...";
                StateHasChanged();
                // Step 2: Analyze the document with Document Intelligence
                try
                {
                    var extractedData = await DocumentIntelligenceService.AnalyzeCorDocumentAsync(file);
                    if (extractedData != null)
                    {
                        PrepopulateFromCorDocument(extractedData);
                        CorUploadStatus = "Document uploaded and processed successfully.";
                    }
                    else
                    {
                        CorUploadStatus = "Document uploaded successfully. Automated extraction could not be completed - please verify image quality and document type.";
                    }
                }
                catch (HttpRequestException ex) when (ex.Message.Contains("Connection reset") || ex.Message.Contains("network"))
                {
                    CorUploadStatus = "Document uploaded successfully. Network connectivity issues prevented automated processing - please complete the form manually or retry upload.";
                }
                catch (TaskCanceledException ex) when (ex.Message.Contains("timeout"))
                {
                    CorUploadStatus = "Document uploaded successfully. Processing timeout occurred - please complete the form manually or retry upload.";
                }
                catch (Exception ex)
                {
                    CorUploadStatus = $"AI extraction error: {ex.Message.Substring(0, Math.Min(100, ex.Message.Length))}...";
                }
            }
            else
            {
                var errorMsg = await response.Content.ReadAsStringAsync();
                CorUploadStatus = $"Upload failed: {errorMsg}";
            }
        }
        catch (Exception ex)
        {
            CorUploadStatus = $"Error: {ex.Message}";
        }
        StateHasChanged();
        }

        public class UploadResult { public string? url { get; set; } }

        private void PrepopulateFromIdDocument(Services.ExtractedIdData extractedData)
        {
            // Debug log for extracted address
            Console.WriteLine($"[DEBUG] Extracted Address: '{extractedData.Address}'");
            // Prepopulate personal information fields
            if (!string.IsNullOrEmpty(extractedData.FirstName))
                verificationModel.FirstName = extractedData.FirstName;
            if (!string.IsNullOrEmpty(extractedData.MiddleName))
                verificationModel.MiddleName = extractedData.MiddleName;
            if (!string.IsNullOrEmpty(extractedData.LastName))
                verificationModel.LastName = extractedData.LastName;
            if (!string.IsNullOrEmpty(extractedData.Sex))
            {
                verificationModel.Sex = extractedData.Sex;
                SelectedSex = extractedData.Sex; // Update the dropdown selection
            }
            if (extractedData.DateOfBirth.HasValue)
                verificationModel.BirthDate = extractedData.DateOfBirth;
            if (!string.IsNullOrEmpty(extractedData.Address))
                verificationModel.PermanentAddress = extractedData.Address;
            if (!string.IsNullOrEmpty(extractedData.Nationality))
                verificationModel.Nationality = extractedData.Nationality;

            // Show success message
            ProfileErrorMessage = "Personal information has been automatically filled from your ID document. Please review and complete any missing fields.";
            StateHasChanged();
        }

        private void PrepopulateFromCorDocument(Services.ExtractedCorData extractedData)
        {
            // Prepopulate educational information fields
            if (!string.IsNullOrEmpty(extractedData.StudentNumber))
                verificationModel.StudentNumber = extractedData.StudentNumber;
                
            if (!string.IsNullOrEmpty(extractedData.Program))
                verificationModel.Program = extractedData.Program;
                
            if (!string.IsNullOrEmpty(extractedData.University))
                verificationModel.University = extractedData.University;
                
            if (!string.IsNullOrEmpty(extractedData.YearLevel))
            {
                verificationModel.YearLevel = extractedData.YearLevel;
                SelectedYearLevel = extractedData.YearLevel; // Update the dropdown selection
            }

            // Enhanced name parsing for Philippine naming conventions
            if (!string.IsNullOrEmpty(extractedData.StudentName) && 
                string.IsNullOrEmpty(verificationModel.FirstName))
            {
                ParseAndSetStudentName(extractedData.StudentName);
            }

            // Prepopulate address if available and current address is empty
            if (!string.IsNullOrEmpty(extractedData.Address) && 
                string.IsNullOrEmpty(verificationModel.PermanentAddress))
            {
                verificationModel.PermanentAddress = extractedData.Address;
            }

            // Prepopulate phone number if available and current phone is empty
            if (!string.IsNullOrEmpty(extractedData.PhoneNumber) && 
                string.IsNullOrEmpty(verificationModel.Phone))
            {
                verificationModel.Phone = extractedData.PhoneNumber;
            }

            // Store additional COR data in a format we can display to the user
            var extractedFields = new List<string>();
            
            if (!string.IsNullOrEmpty(extractedData.PhoneNumber))
                extractedFields.Add($"Phone: {extractedData.PhoneNumber}");
                
            if (!string.IsNullOrEmpty(extractedData.Semester))
                extractedFields.Add($"Semester: {extractedData.Semester}");
                
            if (!string.IsNullOrEmpty(extractedData.AcademicYear))
                extractedFields.Add($"Academic Year: {extractedData.AcademicYear}");
                
            if (!string.IsNullOrEmpty(extractedData.College))
                extractedFields.Add($"College: {extractedData.College}");
                
            if (!string.IsNullOrEmpty(extractedData.EnrollmentStatus))
                extractedFields.Add($"Status: {extractedData.EnrollmentStatus}");
                
            if (!string.IsNullOrEmpty(extractedData.UnitsEnrolled))
                extractedFields.Add($"Units: {extractedData.UnitsEnrolled}");
                
            if (!string.IsNullOrEmpty(extractedData.GPA))
                extractedFields.Add($"GPA: {extractedData.GPA}");

            // Show professional success message with extracted details
            var additionalInfo = extractedFields.Any() 
                ? $" Additional information extracted: {string.Join(", ", extractedFields.Take(3))}{(extractedFields.Count > 3 ? ", and more" : "")}."
                : "";
                
            ProfileErrorMessage = $"Educational information has been automatically populated from your COR. Please review all fields for accuracy before proceeding.";
            
            StateHasChanged();
        }

        private void ParseAndSetStudentName(string fullName)
        {
            try
            {
                // Handle Philippine naming conventions:
                // Format 1: "LAST NAME, FIRST NAME MIDDLE NAME" 
                // Format 2: "FIRST NAME MIDDLE NAME LAST NAME"
                
                if (fullName.Contains(','))
                {
                    // Format: "LAST NAME, FIRST NAME MIDDLE NAME"
                    var parts = fullName.Split(',', StringSplitOptions.RemoveEmptyEntries);
                    if (parts.Length >= 2)
                    {
                        verificationModel.LastName = parts[0].Trim();
                        
                        var givenNames = parts[1].Trim().Split(' ', StringSplitOptions.RemoveEmptyEntries);
                        if (givenNames.Length == 1)
                        {
                            verificationModel.FirstName = givenNames[0];
                        }
                        else if (givenNames.Length >= 2)
                        {
                            // Last word is middle name, everything else is first name
                            verificationModel.MiddleName = givenNames[^1];
                            verificationModel.FirstName = string.Join(" ", givenNames.Take(givenNames.Length - 1));
                        }
                    }
                }
                else
                {
                    // Format: "FIRST NAME MIDDLE NAME LAST NAME"
                    var nameParts = fullName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
                    if (nameParts.Length >= 2)
                    {
                        verificationModel.FirstName = nameParts[0];
                        if (nameParts.Length == 2)
                        {
                            verificationModel.LastName = nameParts[1];
                        }
                        else if (nameParts.Length >= 3)
                        {
                            verificationModel.MiddleName = string.Join(" ", nameParts.Skip(1).Take(nameParts.Length - 2));
                            verificationModel.LastName = nameParts[^1];
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error parsing student name '{fullName}': {ex.Message}");
                // Fallback: just use the full name as first name
                verificationModel.FirstName = fullName.Trim();
            }
        }

        private void ClearAiExtractedData()
        {
            // Clear all form fields to allow user to start fresh
            verificationModel = new StudentVerificationModel();
            
            // Reset dropdown selections
            SelectedSex = string.Empty;
            SelectedYearLevel = string.Empty;
            
            // Clear the success message
            ProfileErrorMessage = "";
            
            StateHasChanged();
        }

        // Institution Check
        private bool IsInstitutionAffiliated = false;
        private void SetInstitutionCheck(bool affiliated)
        {
            IsInstitutionAffiliated = affiliated;
            if (!affiliated)
            {
                SelectedInstitution = string.Empty;
                ShowInstitutionDropdown = false;
            }
        }

        // Institution Dropdown
        private bool ShowInstitutionDropdown = false;
        private string SelectedInstitution = string.Empty;
        private string SelectedInstitutionText => string.IsNullOrEmpty(SelectedInstitution) ? "Select an institution" : SelectedInstitution;
        private bool IsInstitutionDropdownDisabled => !IsInstitutionAffiliated;
        private void ToggleInstitutionDropdown() { if (!IsInstitutionDropdownDisabled) ShowInstitutionDropdown = !ShowInstitutionDropdown; }
        private void CloseInstitutionDropdown() => ShowInstitutionDropdown = false;
        private void SelectInstitution(string value)
        {
            SelectedInstitution = value;
            ShowInstitutionDropdown = false;
        }

        // Benefactor Check
        private bool IsBenefactorAffiliated = false;
        private void SetBenefactorCheck(bool affiliated)
        {
            IsBenefactorAffiliated = affiliated;
            if (!affiliated)
            {
                SelectedBenefactor = string.Empty;
                ShowBenefactorDropdown = false;
            }
        }

        // Benefactor Dropdown
        private bool ShowBenefactorDropdown = false;
        private string SelectedBenefactor = string.Empty;
        private string SelectedBenefactorText => string.IsNullOrEmpty(SelectedBenefactor) ? "Select a benefactor" : SelectedBenefactor;
        private bool IsBenefactorDropdownDisabled => !IsBenefactorAffiliated;
        private void ToggleBenefactorDropdown() { if (!IsBenefactorDropdownDisabled) ShowBenefactorDropdown = !ShowBenefactorDropdown; }
        private void CloseBenefactorDropdown() => ShowBenefactorDropdown = false;
        private void SelectBenefactor(string value)
        {
            SelectedBenefactor = value;
            ShowBenefactorDropdown = false;
        }

        // Sex Dropdown (custom)
        private bool ShowSexDropdown = false;
        private string SelectedSex
        {
            get => verificationModel.Sex;
            set
            {
                verificationModel.Sex = value;
            }
        }
        private string SelectedSexText => string.IsNullOrEmpty(SelectedSex) ? "Select sex" : SelectedSex;
        private void ToggleSexDropdown() => ShowSexDropdown = !ShowSexDropdown;
        private void CloseSexDropdown() => ShowSexDropdown = false;
        private void SelectSex(string value)
        {
            SelectedSex = value;
            ShowSexDropdown = false;
        }

        // Year Level Dropdown
        private bool ShowYearLevelDropdown = false;
        private string SelectedYearLevel
        {
            get => verificationModel.YearLevel;
            set => verificationModel.YearLevel = value;
        }
        private string SelectedYearLevelText => string.IsNullOrEmpty(SelectedYearLevel) ? "Select year level" : SelectedYearLevel;
        private void ToggleYearLevelDropdown() => ShowYearLevelDropdown = !ShowYearLevelDropdown;
        private void CloseYearLevelDropdown() => ShowYearLevelDropdown = false;
        private void SelectYearLevel(string value)
        {
            SelectedYearLevel = value;
            ShowYearLevelDropdown = false;
        }

        // Success Modal Methods
        private void CloseSuccessModal()
        {
            Console.WriteLine("[StudentVerification] CloseSuccessModal called");
            ShowSuccessModal = false;
            StateHasChanged();
        }

        private void NavigateToProfile()
        {
            Console.WriteLine("[StudentVerification] NavigateToProfile called");
            ShowSuccessModal = false;
            Navigation.NavigateTo("/dashboard/student/profile/unverified");
        }
        
        // Modal logic for already submitted modal
        public void CloseAlreadySubmittedModal()
        {
            ShowAlreadySubmittedModal = false;
            InvokeAsync(StateHasChanged);
        }
        
        public void GoToDashboard()
        {
            ShowAlreadySubmittedModal = false;
            Navigation.NavigateTo("/dashboard/student/unverified");
        }
        
        public void ViewStudentProfile()
        {
            ShowAlreadySubmittedModal = false;
            Navigation.NavigateTo("dashboard/student/profile/unverified");
        }
    }

    </div>
</EditForm>
}

<!-- Already Submitted Modal -->
@if (ShowAlreadySubmittedModal)
{
    <div class="sv-modal-overlay" @onclick="CloseAlreadySubmittedModal">
        <div class="sv-modal" @onclick:stopPropagation="true">
            <div class="sv-modal-header">
                <h3>@(CurrentAccountStatus == "Approved" ? "Verification Complete!" : 
                       CurrentAccountStatus == "Rejected" ? "Verification Update" : 
                       "Verification In Progress")</h3>
                <button type="button" class="sv-modal-close" @onclick="CloseAlreadySubmittedModal">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </button>
            </div>
            <div class="sv-modal-body">
                <div class="sv-modal-icon">
                    @if (CurrentAccountStatus == "Approved")
                    {
                        <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="#10b981" stroke-width="2">
                            <path d="M9 12l2 2 4-4"/>
                            <circle cx="12" cy="12" r="10"/>
                        </svg>
                    }
                    else if (CurrentAccountStatus == "Rejected")
                    {
                        <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="#ef4444" stroke-width="2">
                            <circle cx="12" cy="12" r="10"/>
                            <path d="m15 9-6 6"/>
                            <path d="m9 9 6 6"/>
                        </svg>
                    }
                    else
                    {
                        <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="#f59e0b" stroke-width="2">
                            <circle cx="12" cy="12" r="10"/>
                            <path d="M12 6v6"/>
                            <path d="m16 10-4 4-4-4"/>
                        </svg>
                    }
                </div>
                <div class="sv-modal-content">
                    @if (CurrentAccountStatus == "Approved")
                    {
                        <h4>Your student account has been verified!</h4>
                        <p>Congratulations! Your student verification has been approved. You now have full access to all scholarship features.</p>
                    }
                    else if (CurrentAccountStatus == "Rejected")
                    {
                        <h4>Verification was not approved</h4>
                        <p>Unfortunately, your student verification was not approved. Please contact support for more information or to resubmit with corrected documents.</p>
                    }
                    else
                    {
                        <h4>Your verification is under review</h4>
                        <p>You have already submitted your student verification request. Our admin team is currently reviewing your information and documents.</p>
                    }
                    
                    <div class="sv-modal-info-box">
                        <h5>Current Status:</h5>
                        <p><strong>Status:</strong> 
                            <span class="sv-status-badge @(CurrentAccountStatus == "Approved" ? "sv-status-approved" : 
                                                        CurrentAccountStatus == "Rejected" ? "sv-status-rejected" : 
                                                        "sv-status-pending")">
                                @(string.IsNullOrEmpty(CurrentAccountStatus) ? "Pending Review" : CurrentAccountStatus)
                            </span>
                        </p>
                        @if (CurrentAccountStatus == "Pending")
                        {
                            <p>Please wait 2-3 business days for review completion. You will receive an email notification once the review is complete.</p>
                        }
                    </div>
                </div>
            </div>
            <div class="sv-modal-footer">
                <button type="button" class="sv-btn sv-btn-secondary" @onclick="CloseAlreadySubmittedModal">Close</button>
                <button type="button" class="sv-btn sv-btn-primary" @onclick="GoToDashboard">Go to Dashboard</button>
                <button type="button" class="sv-btn sv-btn-primary" @onclick="ViewStudentProfile">View Profile</button>
            </div>
        </div>
    </div>
}




