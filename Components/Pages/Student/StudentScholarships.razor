@page "/dashboard/student/scholarships/"
@attribute [Authorize(Roles = "Student,SuperAdmin")]
@layout Layout.StudentDashLayout

@using Microsoft.EntityFrameworkCore
@using c2_eskolar.Data
@using c2_eskolar.Models
@using c2_eskolar.Services
@using System.Security.Claims
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject BookmarkService BookmarkService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject ILogger<StudentScholarships> Logger

<PageTitle>Scholarships</PageTitle>

<div class="container-fluid" style="min-height: 100vh;">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-10">

            <!-- SEARCH BAR + VIEW APPLICATIONS BUTTON -->
            <div class="search-header-section d-flex flex-column flex-md-row align-items-md-center mb-4 gap-3 mt-5">
                <div class="flex-grow-1">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Search scholarships..." 
                               @bind="searchTerm" @oninput="OnSearchChanged" />
                        <span class="input-group-text"><i class="bi bi-search"></i></span>
                    </div>
                </div>

                <!-- View Applications -->
                <button class="btn btn-custom-primary d-flex align-items-center gap-2" @onclick="ViewApplicationSummary">
                    <i class="bi bi-list-ul"></i>
                    <span>My Applications</span>
                </button>
            </div>

            <!-- CATEGORY TABS -->
            <div class="modern-tabs d-flex align-items-center mb-4 gap-3">
                <div class="tab-pills">
                    <button class="tab-pill @(selectedTab == 0 ? "active" : "")" @onclick="() => SelectTab(0)">
                        <i class="bi bi-building"></i> <span>Internal</span>
                    </button>
                    <button class="tab-pill @(selectedTab == 1 ? "active" : "")" @onclick="() => SelectTab(1)">
                        <i class="bi bi-door-open-fill"></i> <span>Open</span>
                    </button>
                    <button class="tab-pill @(selectedTab == 2 ? "active" : "")" @onclick="() => SelectTab(2)">
                        <i class="bi bi-bookmark-heart-fill"></i> <span>Bookmarked</span>
                    </button>
                </div>
            </div>

            <div class="row">

                @if (scholarships is null)
                {
                    <div class="col-12">
                        <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    var filteredScholarships = GetFilteredScholarships();

                    if (!filteredScholarships.Any())
                    {
                        <div class="col-12">
                            <div class="empty-state text-center py-5">
                                <div class="empty-state-icon mb-3">
                                    <i class="bi bi-inbox fs-1 text-muted"></i>
                                </div>
                                <h5 class="text-muted mb-2">@GetEmptyStateTitle()</h5>
                                <p class="text-muted small">@GetEmptyStateMessage()</p>
                                @if (!string.IsNullOrEmpty(searchTerm))
                                {
                                    <button class="btn btn-sm btn-outline-primary mt-2" @onclick="ClearFilters">
                                        <i class="bi bi-x-circle me-1"></i> Clear Search
                                    </button>
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        @foreach (var scholarship in filteredScholarships)
                        {
                            <div class="col-md-6 col-lg-4">
                                <div class="card shadow-sm h-100 clickable-card border-0"
                                     @onclick="() => ViewScholarship(scholarship.ScholarshipId)"
                                     style="cursor: pointer; background: #fff; border-radius: 1rem; transition: all 0.2s ease;">
                                    <div class="card-body d-flex flex-column">
                                        <div class="d-flex align-items-start mb-3">
                                            <div class="flex-grow-1">
                                                <h5 class="card-title mb-1 fw-bold">@scholarship.Title</h5>
                                                <p class="text-muted small mb-0">
                                                    <i class="bi bi-building me-1"></i>
                                                    @(scholarship.Institution?.InstitutionName ?? scholarship.Benefactor?.OrganizationName ?? "Unknown Provider")
                                                </p>
                                            </div>
                                        </div>

                                        <div class="mb-3">
                                            @if (scholarship.IsInternal)
                                            {
                                                <span class="badge bg-success me-1 mb-1">
                                                    <i class="bi bi-building me-1"></i>Internal
                                                </span>
                                            }
                                            else if (scholarship.BenefactorProfileId != null)
                                            {
                                                <span class="badge bg-info me-1 mb-1">
                                                    <i class="bi bi-handshake me-1"></i>Partnership
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-primary me-1 mb-1">
                                                    <i class="bi bi-globe me-1"></i>Open
                                                </span>
                                            }
                                            <span class="badge bg-light text-dark me-1 mb-1">
                                                <i class="bi bi-calendar me-1"></i>@scholarship.ApplicationDeadline.ToString("MMM dd, yyyy")
                                            </span>
                                        </div>

                                        <div class="mt-auto d-flex gap-2 align-items-center">
                                            <span class="badge @(scholarship.IsActive ? "bg-success" : "bg-secondary") flex-grow-1 text-center">
                                                @(scholarship.IsActive ? "Active" : "Inactive")
                                            </span>
                                            <button class="btn @(GetBookmarkButtonClass(scholarship.ScholarshipId)) btn-sm bookmark-btn" 
                                                    @onclick:stopPropagation="true"
                                                    @onclick="(e) => ToggleBookmark(e, scholarship.ScholarshipId)" 
                                                    title="@(GetBookmarkTooltip(scholarship.ScholarshipId))">
                                                @GetBookmarkIcon(scholarship.ScholarshipId)
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<Scholarship>? scholarships;
    private int selectedTab = 0; // 0 = Internal, 1 = Open, 2 = Bookmarked
    private string? currentUserId;
    private HashSet<int> bookmarkedScholarshipIds = new HashSet<int>();
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        // Get current user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        if (user.Identity?.IsAuthenticated == true)
        {
            currentUserId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        }

        // Load scholarships
        using var context = await DbContextFactory.CreateDbContextAsync();
        scholarships = await context.Scholarships
            .Include(s => s.Institution)
            .Include(s => s.Benefactor)
            .Where(s => s.IsActive) // Only show active scholarships to students
            .OrderByDescending(s => s.CreatedAt)
            .ToListAsync();

        // Load user's bookmarks
        if (!string.IsNullOrEmpty(currentUserId))
        {
            await LoadUserBookmarks();
        }
    }

    private async Task LoadUserBookmarks()
    {
        try
        {
            var bookmarkOrganization = await BookmarkService.GetOrganizedBookmarksAsync(currentUserId!);
            bookmarkedScholarshipIds = bookmarkOrganization.AllBookmarks.Select(b => b.ScholarshipId).ToHashSet();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading bookmarks: {Message}", ex.Message);
        }
    }

    private List<Scholarship> GetFilteredScholarships()
    {
        if (scholarships == null) return new List<Scholarship>();
        
        var filtered = scholarships.AsEnumerable();
        
        // Filter by tab
        filtered = selectedTab switch
        {
            0 => filtered.Where(s => s.IsInternal), // Internal scholarships
            1 => filtered.Where(s => !s.IsInternal), // Open/External scholarships
            2 => filtered.Where(s => bookmarkedScholarshipIds.Contains(s.ScholarshipId)), // Bookmarked scholarships
            _ => filtered
        };
        
        // Filter by search term
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(s => 
                s.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (s.Institution?.InstitutionName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (s.Benefactor?.OrganizationName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
            );
        }
        
        return filtered.ToList();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        StateHasChanged();
    }

    private void ClearFilters()
    {
        searchTerm = "";
        StateHasChanged();
    }

    private string GetEmptyStateTitle()
    {
        return selectedTab switch
        {
            0 => "No Internal Scholarships",
            1 => "No Open Scholarships",
            2 => "No Bookmarked Scholarships",
            _ => "No Scholarships Found"
        };
    }

    private string GetEmptyStateMessage()
    {
        if (!string.IsNullOrEmpty(searchTerm))
        {
            return "Try adjusting your search terms or filters.";
        }
        
        return selectedTab switch
        {
            0 => "Internal scholarships from your institution will appear here.",
            1 => "Open scholarships available for all students will appear here.",
            2 => "Your bookmarked scholarships will appear here. Start bookmarking to save scholarships for later!",
            _ => "No scholarships available at this time."
        };
    }

    private void SelectTab(int tab)
    {
        selectedTab = tab;
        StateHasChanged();
    }

    private void ViewScholarship(int id)
    {
        Navigation.NavigateTo($"/dashboard/student/scholarships-info/{id}");
    }

    private void ViewApplicationSummary()
    {
        Navigation.NavigateTo("/dashboard/student/applications");
    }

    private async Task ToggleBookmark(MouseEventArgs e, int scholarshipId)
    {
        if (string.IsNullOrEmpty(currentUserId)) 
        {
            Logger.LogWarning("CurrentUserId is null or empty - cannot proceed with bookmark");
            return;
        }

        try
        {
            if (bookmarkedScholarshipIds.Contains(scholarshipId))
            {
                await BookmarkService.RemoveBookmarkAsync(currentUserId, scholarshipId);
                bookmarkedScholarshipIds.Remove(scholarshipId);
            }
            else
            {
                await BookmarkService.AddBookmarkAsync(currentUserId, scholarshipId, "Interested", 2);
                bookmarkedScholarshipIds.Add(scholarshipId);
            }
            
            StateHasChanged(); // Force UI update after bookmark change
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error toggling bookmark: {Message}", ex.Message);
        }
    }

    private string GetBookmarkButtonClass(int scholarshipId)
    {
        return bookmarkedScholarshipIds.Contains(scholarshipId) 
            ? "btn-success border-0 shadow-sm" // Strong green for bookmarked
            : "btn-outline-secondary border-2"; // Clear outline for unbookmarked
    }

    private string GetBookmarkIcon(int scholarshipId)
    {
        return bookmarkedScholarshipIds.Contains(scholarshipId) 
            ? "♥" // Filled heart symbol
            : "♡"; // Empty heart symbol
    }

    private string GetBookmarkTooltip(int scholarshipId)
    {
        return bookmarkedScholarshipIds.Contains(scholarshipId) 
            ? "Remove from bookmarks ✓" 
            : "Add to bookmarks";
    }
}

<style>
    /* Enhanced Bookmark Button Styling */
    .bookmark-btn {
        position: relative;
        transition: all 0.3s ease-in-out;
        min-width: 40px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 8px !important;
    }

    .bookmark-btn:hover {
        transform: scale(1.1);
        box-shadow: 0 4px 12px rgba(0,0,0,0.15) !important;
    }

    /* Bookmarked state - Green success button */
    .bookmark-btn.btn-success {
        background: linear-gradient(135deg, #10b981, #059669) !important;
        border: none !important;
        color: white !important;
    }

    .bookmark-btn.btn-success:hover {
        background: linear-gradient(135deg, #059669, #047857) !important;
        transform: scale(1.15);
    }

    /* Unbookmarked state - Outline button */
    .bookmark-btn.btn-outline-secondary {
        background: transparent !important;
        border: 2px solid #6b7280 !important;
        color: #6b7280 !important;
    }

    .bookmark-btn.btn-outline-secondary:hover {
        background: #f3f4f6 !important;
        border-color: #374151 !important;
        color: #374151 !important;
        transform: scale(1.15);
    }
</style>
