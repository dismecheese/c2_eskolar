
@page "/dashboard/student/profile"
@attribute [Authorize(Roles = "Student")]
@layout Layout.StudentDashLayout
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> UserManager
@inject Services.StudentProfileService StudentProfileService
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity

@code {
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        if (user != null)
        {
            await LoadExtendedProfileData(user.Id);
        }
        isLoading = false;
    }
    private bool IsEditMode = false;
    private bool isLoading = true;
    private string FullName = "";
    private string Username = "";
    private string Email = "";
    private string Phone = "";
    private string Location = "";
    private string University = "";
    private string StudentNumber = "";
    private string Program = "";
    private string YearLevel = "1st Year";
    private string Status = "Active";
    private string Role = "Student";
    private string Bio = "";
    private DateTime CreatedDate = DateTime.Now;
    private string ProfilePicture = "https://via.placeholder.com/120";
    private bool EmailVerified = false;
    private bool PhoneVerified = false;
    private bool StudentIdVerified = false;
    private bool AcademicRecordsVerified = false;
    private bool IsTwoFactorEnabled = false;
    private DateTime LastLogin = DateTime.Now;
    private int ScholarshipsReceived = 0;
    private int Applications = 0;
    private string GPA = "0.00";
    private string FirstName = "";
    private string MiddleName = "";
    private string LastName = "";
    private string Sex = "Male";
    private DateTime BirthDate = DateTime.Now;
    private string PermanentAddress = "";
    private string Nationality = "";
    private IBrowserFile? UploadedProfileImage;
    private string PreviewProfilePicture => _previewProfilePicture ?? ProfilePicture;
    private string? _previewProfilePicture;
    private string ProfileErrorMessage = "";

    private async Task OnProfileImageChange(InputFileChangeEventArgs e)
    {
        UploadedProfileImage = e.File;
        if (UploadedProfileImage != null)
        {
            using var ms = new MemoryStream();
            await UploadedProfileImage.OpenReadStream(5 * 1024 * 1024).CopyToAsync(ms);
            var base64 = Convert.ToBase64String(ms.ToArray());
            var ext = Path.GetExtension(UploadedProfileImage.Name).ToLower();
            var mime = ext == ".png" ? "image/png" : "image/jpeg";
            _previewProfilePicture = $"data:{mime};base64,{base64}";
        }
    }

    private async Task ToggleEditModeAsync()
    {
        if (!IsEditMode)
        {
            isLoading = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);
            if (user != null)
            {
                await LoadExtendedProfileData(user.Id);
            }
            isLoading = false;
        }
        IsEditMode = !IsEditMode;
    }

    private async Task SaveProfile()
    {
        if (isLoading) return;
        isLoading = true;
        ProfileErrorMessage = "";
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);
            if (user != null)
            {
                var studentProfile = await StudentProfileService.GetProfileByUserIdAsync(user.Id);
                if (studentProfile == null)
                {
                    studentProfile = new Models.StudentProfile {
                        UserId = user.Id,
                        FirstName = FirstName,
                        LastName = LastName
                    };
                }
                studentProfile.FirstName = FirstName;
                studentProfile.MiddleName = MiddleName;
                studentProfile.LastName = LastName;
                studentProfile.Sex = Sex;
                studentProfile.Nationality = Nationality;
                studentProfile.PermanentAddress = PermanentAddress;
                studentProfile.BirthDate = BirthDate;
                studentProfile.MobileNumber = Phone;
                studentProfile.Email = user.Email ?? Email;
                studentProfile.UniversityName = University;
                studentProfile.StudentNumber = StudentNumber;
                studentProfile.Course = Program;
                var yearLevelInt = ParseYearLevel(YearLevel);
                studentProfile.YearLevel = yearLevelInt;
                studentProfile.VerificationStatus = Status;
                if (UploadedProfileImage != null)
                {
                    if (UploadedProfileImage.Size > 5 * 1024 * 1024)
                    {
                        ProfileErrorMessage = "Profile image exceeds the 5MB size limit. Please choose a smaller file.";
                        StateHasChanged();
                        isLoading = false;
                        return;
                    }
                    var fileName = $"profile_{Guid.NewGuid()}{Path.GetExtension(UploadedProfileImage.Name)}";
                    var dirPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/images/profiles");
                    if (!Directory.Exists(dirPath))
                    {
                        Directory.CreateDirectory(dirPath);
                    }
                    var savePath = Path.Combine(dirPath, fileName);
                    await using var stream = File.Create(savePath);
                    await UploadedProfileImage.OpenReadStream(5 * 1024 * 1024).CopyToAsync(stream);
                    studentProfile.ProfilePicture = $"/images/profiles/{fileName}";
                    ProfilePicture = studentProfile.ProfilePicture;
                }
                else if (!string.IsNullOrWhiteSpace(ProfilePicture))
                {
                    studentProfile.ProfilePicture = ProfilePicture;
                }
                await StudentProfileService.SaveProfileAsync(studentProfile, user.Email);
                IsEditMode = false;
                _previewProfilePicture = null;
                UploadedProfileImage = null;
                Console.WriteLine("Student profile updated successfully!");
            }
        }
        catch (Exception ex)
        {
            ProfileErrorMessage = $"Error saving profile: {ex.Message}";
            StateHasChanged();
            Console.WriteLine($"Error saving profile: {ex.Message}");
        }
        isLoading = false;
    }

    private async Task LoadExtendedProfileData(string userId)
    {
        try
        {
            var studentProfile = await StudentProfileService.GetProfileByUserIdAsync(userId);
            var identityUser = await UserManager.FindByIdAsync(userId);
            var identityEmail = identityUser?.Email ?? Email;
            if (studentProfile != null)
            {
                FirstName = studentProfile.FirstName ?? "";
                MiddleName = studentProfile.MiddleName ?? "";
                LastName = studentProfile.LastName ?? "";
                Sex = studentProfile.Sex ?? "";
                Nationality = studentProfile.Nationality ?? "";
                PermanentAddress = studentProfile.PermanentAddress ?? "";
                BirthDate = studentProfile.BirthDate ?? DateTime.Now;
                Phone = studentProfile.MobileNumber ?? "";
                Email = identityEmail;
                FullName = $"{FirstName} {LastName}".Trim();
                University = studentProfile.UniversityName ?? "";
                StudentNumber = studentProfile.StudentNumber ?? "";
                Program = studentProfile.Course ?? "";
                YearLevel = studentProfile.YearLevel.HasValue ? $"{studentProfile.YearLevel} year" : "";
                Status = studentProfile.VerificationStatus ?? "Pending";
                ProfilePicture = !string.IsNullOrWhiteSpace(studentProfile.ProfilePicture) ? studentProfile.ProfilePicture : "https://via.placeholder.com/120";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading extended profile data: {ex.Message}");
        }
    }

    private int? ParseYearLevel(string yearLevelStr)
    {
        if (string.IsNullOrWhiteSpace(yearLevelStr)) return null;
        var digits = new string(yearLevelStr.TakeWhile(char.IsDigit).ToArray());
        if (int.TryParse(digits, out var yl)) return yl;
        if (yearLevelStr.Contains("1")) return 1;
        if (yearLevelStr.Contains("2")) return 2;
        if (yearLevelStr.Contains("3")) return 3;
        if (yearLevelStr.Contains("4")) return 4;
        return null;
    }
}


<div class="container-fluid p-5" style="padding-left: 80px; padding-right: 120px;">
    @if (!string.IsNullOrWhiteSpace(ProfileErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @ProfileErrorMessage
        </div>
    }
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h2 class="mb-0">My Profile</h2>
                <div class="d-flex gap-2">
                    <button class="btn btn-primary" @onclick="ToggleEditModeAsync" disabled="@(isLoading)">
                        <i class="fas fa-edit me-2"></i>@(IsEditMode ? "Cancel" : "Edit Profile")
                    </button>
                    @if (IsEditMode)
                    {
                        <button class="btn btn-success" @onclick="SaveProfile" disabled="@(isLoading)">
                            <i class="fas fa-save me-2"></i>Save Changes
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <!-- Profile Summary (Left Column) -->
        <div class="col-lg-4 mb-4">
            <div class="card shadow-sm mb-4">
                <div class="card-body text-center">
                    <div class="position-relative d-inline-block mb-3">
                        <img src="@PreviewProfilePicture" class="rounded-circle profile-image" alt="Profile Picture" width="120" height="120" />
                        @if (IsEditMode)
                        {
                            <label class="btn btn-sm btn-primary position-absolute bottom-0 end-0 rounded-circle" style="width: 30px; height: 30px;">
                                <i class="fas fa-camera"></i>
                                <InputFile OnChange="OnProfileImageChange" accept="image/*" style="display:none;" />
                            </label>
                        }
                    </div>
                    <h4 class="card-title mb-1">@FullName</h4>
                    <div class="text-muted mb-2">@Email</div>
                    <div class="d-flex flex-column align-items-center gap-2">
                        <span class="badge bg-success">@Status</span>
                        <span class="badge bg-secondary">@YearLevel</span>
                    </div>
                </div>
            </div>
            <div class="card shadow-sm">
                <div class="card-header bg-white">
                    <h6 class="mb-0"><i class="fas fa-check-circle me-2"></i>Verification</h6>
                </div>
                <div class="card-body">
                    <div class="verification-item d-flex justify-content-between align-items-center">
                        <span>Email</span>
                        <i class="fas fa-@(EmailVerified ? "check-circle text-success" : "clock text-warning")"></i>
                    </div>
                    <div class="verification-item d-flex justify-content-between align-items-center">
                        <span>Phone</span>
                        <i class="fas fa-@(PhoneVerified ? "check-circle text-success" : "clock text-warning")"></i>
                    </div>
                    <div class="verification-item d-flex justify-content-between align-items-center">
                        <span>Student ID</span>
                        <i class="fas fa-@(StudentIdVerified ? "check-circle text-success" : "clock text-warning")"></i>
                    </div>
                    <div class="verification-item d-flex justify-content-between align-items-center">
                        <span>Academic Records</span>
                        <i class="fas fa-@(AcademicRecordsVerified ? "check-circle text-success" : "clock text-warning")"></i>
                    </div>
                </div>
            </div>
        </div>
        <!-- Profile Details (Right Column) -->
        <div class="col-lg-8">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-white">
                    <h5 class="mb-0"><i class="fas fa-user me-2"></i>Personal Information</h5>
                </div>
                <div class="card-body">
                    @if (IsEditMode)
                    {
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label class="form-label">First Name</label>
                                <input type="text" class="form-control" @bind="FirstName" />
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Middle Name</label>
                                <input type="text" class="form-control" @bind="MiddleName" />
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Last Name</label>
                                <input type="text" class="form-control" @bind="LastName" />
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Sex</label>
                                <select class="form-control" @bind="Sex">
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Birthdate</label>
                                <input type="date" class="form-control" @bind="BirthDate" />
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Nationality</label>
                                <input type="text" class="form-control" @bind="Nationality" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Permanent Address</label>
                                <input type="text" class="form-control" @bind="PermanentAddress" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Phone</label>
                                <input type="text" class="form-control" @bind="Phone" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Email</label>
                                <input type="email" class="form-control" @bind="Email" disabled />
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label class="form-label">First Name</label>
                                <div class="form-control-plaintext">@FirstName</div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Middle Name</label>
                                <div class="form-control-plaintext">@MiddleName</div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Last Name</label>
                                <div class="form-control-plaintext">@LastName</div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Sex</label>
                                <div class="form-control-plaintext">@Sex</div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Birthdate</label>
                                <div class="form-control-plaintext">@BirthDate.ToShortDateString()</div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Nationality</label>
                                <div class="form-control-plaintext">@Nationality</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Permanent Address</label>
                                <div class="form-control-plaintext">@PermanentAddress</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Phone</label>
                                <div class="form-control-plaintext">@Phone</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Email</label>
                                <div class="form-control-plaintext">@Email</div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="card shadow-sm">
                <div class="card-header bg-white">
                    <h5 class="mb-0"><i class="fas fa-graduation-cap me-2"></i>Educational Information</h5>
                </div>
                <div class="card-body">
                    @if (IsEditMode)
                    {
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">University</label>
                                <input type="text" class="form-control" @bind="University" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Student Number</label>
                                <input type="text" class="form-control" @bind="StudentNumber" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Program</label>
                                <input type="text" class="form-control" @bind="Program" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Year Level</label>
                                <select class="form-control" @bind="YearLevel">
                                    <option>1st Year</option>
                                    <option>2nd Year</option>
                                    <option>3rd Year</option>
                                    <option>4th Year</option>
                                    <option>5th Year</option>
                                    <option>6th Year</option>
                                    <option>7th Year</option>
                                    <option>8th Year</option>
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Status</label>
                                <select class="form-control" @bind="Status">
                                    <option>Active</option>
                                    <option>Pending</option>
                                    <option>Graduated</option>
                                    <option>On Leave</option>
                                </select>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">University</label>
                                <div class="form-control-plaintext">@University</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Student Number</label>
                                <div class="form-control-plaintext">@StudentNumber</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Program</label>
                                <div class="form-control-plaintext">@Program</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Year Level</label>
                                <div class="form-control-plaintext">@YearLevel</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Status</label>
                                <div class="form-control-plaintext">@Status</div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .form-check-input:checked {
        background-color: #198754;
        border-color: #198754;
    }
</style>
        }
