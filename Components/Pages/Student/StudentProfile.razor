

@page "/dashboard/student/profile"
@attribute [Authorize(Roles = "Student,SuperAdmin")]
@layout Layout.StudentDashLayout
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> UserManager
@inject Services.StudentProfileService StudentProfileService
@inject Services.BlobStorageService BlobStorageService
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity

@implements IDisposable
@code {
    // Notification variables
    private string _errorMessage = "";
    private string _successMessage = "";
    private System.Threading.Timer? _errorTimer;
    private System.Threading.Timer? _successTimer;
    private void SetErrorMessageWithTimer(string message)
    {
        _errorMessage = message;
        _errorTimer?.Dispose();
        _errorTimer = new System.Threading.Timer(_ =>
        {
            _errorMessage = "";
            InvokeAsync(StateHasChanged);
        }, null, TimeSpan.FromSeconds(5), Timeout.InfiniteTimeSpan);
    }

    private void SetSuccessMessageWithTimer(string message)
    {
        _successMessage = message;
        _successTimer?.Dispose();
        _successTimer = new System.Threading.Timer(_ =>
        {
            _successMessage = "";
            InvokeAsync(StateHasChanged);
        }, null, TimeSpan.FromSeconds(5), Timeout.InfiniteTimeSpan);
    }

    public void Dispose()
    {
        _errorTimer?.Dispose();
        _successTimer?.Dispose();
    }

    private async Task RemoveProfileImageAsync()
    {
        try
        {
            // Try to delete old profile picture from Azure Blob Storage if it exists
            if (!string.IsNullOrWhiteSpace(ProfilePicture) && 
                ProfilePicture != "https://via.placeholder.com/120" && 
                ProfilePicture.Contains("blob.core.windows.net"))
            {
                var oldBlobFileName = BlobStorageService.ExtractBlobFileName(ProfilePicture);
                if (!string.IsNullOrWhiteSpace(oldBlobFileName))
                {
                    try
                    {
                        var deleted = await BlobStorageService.DeletePhotoAsync(oldBlobFileName);
                        Console.WriteLine($"Profile picture deletion result: {deleted}");
                    }
                    catch (Exception deleteEx)
                    {
                        Console.WriteLine($"Warning: Could not delete profile picture '{oldBlobFileName}': {deleteEx.Message}");
                        // Continue with removal even if deletion fails
                    }
                }
            }

            // Set to blank avatar
            ProfilePicture = "https://via.placeholder.com/120";
            _previewProfilePicture = null;
            UploadedProfileImage = null;

            // Update in DB
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User?.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrWhiteSpace(userId))
            {
                var studentProfile = await StudentProfileService.GetProfileByUserIdAsync(userId);
                if (studentProfile != null)
                {
                    studentProfile.ProfilePicture = ProfilePicture;
                    await StudentProfileService.SaveProfileAsync(studentProfile, studentProfile.Email);
                }
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            SetErrorMessageWithTimer($"Error removing profile picture: {ex.Message}");
            StateHasChanged();
        }
    }
    private bool _isInitRunning = false;
    protected override async Task OnInitializedAsync()
    {
        if (_isInitRunning) return;
        _isInitRunning = true;
        isLoading = true;
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User?.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrWhiteSpace(userId))
            {
                // Load user email from Identity first
                if (authState.User != null)
                {
                    var user = await UserManager.GetUserAsync(authState.User);
                    if (user != null)
                    {
                        Email = user.Email ?? "";
                        Username = user.UserName ?? "";
                        EmailVerified = await UserManager.IsEmailConfirmedAsync(user);
                    }
                }
                
                await LoadExtendedProfileData(userId);
            }
            else
            {
                ProfileErrorMessage = "Unable to determine user ID from authentication state.";
            }
        }
        catch (Exception ex)
        {
            ProfileErrorMessage = $"Error loading profile: {ex.Message}";
            Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
        }
        isLoading = false;
        _isInitRunning = false;
    }
    private bool IsEditMode = false;
    private bool isLoading = true;
    private string FullName = "";
    private string Username = "";
    private string Email = "";
    private string Phone = "";
    private string Location = "";
    private string University = "";
    private string StudentNumber = "";
    private string Program = "";
    private string YearLevel = "1st Year";

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Active" => "profile-badge-active",
            "Pending" => "profile-badge-pending",
            "On Leave" => "profile-badge-onleave",
            "Graduated" => "profile-badge-graduated",
            _ => ""
        };
    }

    private string GetYearLevelText(string yearLevel)
    {
        if (string.IsNullOrWhiteSpace(yearLevel)) return "1st Year";
        
        // Handle numeric values
        if (int.TryParse(yearLevel, out var level))
        {
            return level switch
            {
                1 => "1st Year",
                2 => "2nd Year",
                3 => "3rd Year",
                4 => "4th Year",
                5 => "5th Year",
                6 => "6th Year",
                7 => "7th Year",
                8 => "8th Year",
                _ => $"{level}th Year"
            };
        }
        
        // Handle text values
        var lower = yearLevel.ToLower();
        if (lower.Contains("1")) return "1st Year";
        if (lower.Contains("2")) return "2nd Year";
        if (lower.Contains("3")) return "3rd Year";
        if (lower.Contains("4")) return "4th Year";
        if (lower.Contains("5")) return "5th Year";
        if (lower.Contains("6")) return "6th Year";
        if (lower.Contains("7")) return "7th Year";
        if (lower.Contains("8")) return "8th Year";
        return yearLevel;
    }
    private string Status = "Pending";
    private string Role = "Student";
    private string Bio = "";
    private DateTime CreatedDate = DateTime.Now;
    private string ProfilePicture = "https://via.placeholder.com/120";
    private bool EmailVerified = false;
    private bool PhoneVerified = false;
    private bool StudentIdVerified = false;
    private bool AcademicRecordsVerified = false;
    private bool IsTwoFactorEnabled = false;
    private DateTime LastLogin = DateTime.Now;
    private int ScholarshipsReceived = 0;
    private int Applications = 0;
    private string GPA = "0.00";
    private string FirstName = "";
    private string MiddleName = "";
    private string LastName = "";
    private string Sex = "Male";
    private DateTime BirthDate = DateTime.Now;
    private string PermanentAddress = "";
    private string Nationality = "";
    private IBrowserFile? UploadedProfileImage;
    private string PreviewProfilePicture 
    {
        get
        {
            var pictureUrl = _previewProfilePicture ?? ProfilePicture;
            
            // If this is a blob storage URL, generate a SAS URL for access
            if (!string.IsNullOrWhiteSpace(pictureUrl) && 
                pictureUrl.Contains("blob.core.windows.net") && 
                pictureUrl != "https://via.placeholder.com/120")
            {
                try
                {
                    return BlobStorageService.GetPhotoSasUrlFromBlobUrl(pictureUrl);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"[StudentProfile] Error generating SAS URL for profile picture: {ex.Message}");
                    return pictureUrl; // Return original URL as fallback
                }
            }
            
            return pictureUrl;
        }
    }
    private string? _previewProfilePicture;
    private string ProfileErrorMessage = "";
    
    // Validation error properties
    private Dictionary<string, string> ValidationErrors = new();
    private bool IsValidating = false;

    // Validation methods
    private bool ValidateField(string fieldName, string value, string fieldDisplayName)
    {
        ValidationErrors.Remove(fieldName);
        
        switch (fieldName)
        {
            case "FirstName":
            case "LastName":
                if (string.IsNullOrWhiteSpace(value))
                {
                    ValidationErrors[fieldName] = $"{fieldDisplayName} is required.";
                    return false;
                }
                if (!IsValidName(value))
                {
                    ValidationErrors[fieldName] = $"{fieldDisplayName} should only contain letters, spaces, hyphens, and apostrophes.";
                    return false;
                }
                break;
                
            case "MiddleName":
                if (!string.IsNullOrWhiteSpace(value) && !IsValidName(value))
                {
                    ValidationErrors[fieldName] = $"{fieldDisplayName} should only contain letters, spaces, hyphens, and apostrophes.";
                    return false;
                }
                break;
                
            case "Phone":
                if (!string.IsNullOrWhiteSpace(value) && !IsValidPhoneNumber(value))
                {
                    ValidationErrors[fieldName] = "Phone number should only contain numbers, spaces, hyphens, plus signs, and parentheses.";
                    return false;
                }
                break;
                
            case "StudentNumber":
                if (!string.IsNullOrWhiteSpace(value) && !IsValidStudentNumber(value))
                {
                    ValidationErrors[fieldName] = "Student number should only contain letters, numbers, and hyphens.";
                    return false;
                }
                break;
                
            case "Nationality":
                if (!string.IsNullOrWhiteSpace(value) && !IsValidName(value))
                {
                    ValidationErrors[fieldName] = "Nationality should only contain letters and spaces.";
                    return false;
                }
                break;
                
            case "University":
                if (!string.IsNullOrWhiteSpace(value) && !IsValidUniversityName(value))
                {
                    ValidationErrors[fieldName] = "University name contains invalid characters.";
                    return false;
                }
                break;
                
            case "Program":
                if (!string.IsNullOrWhiteSpace(value) && !IsValidProgramName(value))
                {
                    ValidationErrors[fieldName] = "Program name contains invalid characters.";
                    return false;
                }
                break;
        }
        
        return true;
    }
    
    private bool IsValidName(string name)
    {
        if (string.IsNullOrWhiteSpace(name)) return false;
        // Allow letters, spaces, hyphens, apostrophes, and common name characters
        return System.Text.RegularExpressions.Regex.IsMatch(name.Trim(), @"^[a-zA-Z\s\-'\.]+$");
    }
    
    private bool IsValidPhoneNumber(string phone)
    {
        if (string.IsNullOrWhiteSpace(phone)) return true; // Optional field
        // Allow digits, spaces, hyphens, plus, parentheses
        var cleanPhone = System.Text.RegularExpressions.Regex.Replace(phone, @"[\s\-\+\(\)]", "");
        return System.Text.RegularExpressions.Regex.IsMatch(cleanPhone, @"^\d{7,15}$"); // 7-15 digits
    }
    
    private bool IsValidStudentNumber(string studentNum)
    {
        if (string.IsNullOrWhiteSpace(studentNum)) return true;
        // Allow letters, numbers, hyphens
        return System.Text.RegularExpressions.Regex.IsMatch(studentNum.Trim(), @"^[a-zA-Z0-9\-]+$");
    }
    
    private bool IsValidUniversityName(string university)
    {
        if (string.IsNullOrWhiteSpace(university)) return true;
        // Allow letters, numbers, spaces, common punctuation for institution names
        return System.Text.RegularExpressions.Regex.IsMatch(university.Trim(), @"^[a-zA-Z0-9\s\-'\.&,()]+$");
    }
    
    private bool IsValidProgramName(string program)
    {
        if (string.IsNullOrWhiteSpace(program)) return true;
        // Allow letters, numbers, spaces, common punctuation for program names
        return System.Text.RegularExpressions.Regex.IsMatch(program.Trim(), @"^[a-zA-Z0-9\s\-'\.&,()]+$");
    }
    
    private bool ValidateAllFields()
    {
        IsValidating = true;
        ValidationErrors.Clear();
        
        var isValid = true;
        
        // Validate required fields
        isValid &= ValidateField("FirstName", FirstName, "First Name");
        isValid &= ValidateField("LastName", LastName, "Last Name");
        
        // Validate optional fields
        ValidateField("MiddleName", MiddleName, "Middle Name");
        ValidateField("Phone", Phone, "Phone Number");
        ValidateField("StudentNumber", StudentNumber, "Student Number");
        ValidateField("Nationality", Nationality, "Nationality");
        ValidateField("University", University, "University");
        ValidateField("Program", Program, "Program");
        
        // Additional business logic validations
        if (!string.IsNullOrWhiteSpace(Phone) && Phone.Length < 7)
        {
            ValidationErrors["Phone"] = "Phone number must be at least 7 digits.";
            isValid = false;
        }
        
        if (!string.IsNullOrWhiteSpace(StudentNumber) && StudentNumber.Length < 3)
        {
            ValidationErrors["StudentNumber"] = "Student number must be at least 3 characters.";
            isValid = false;
        }
        
        return isValid;
    }
    
    private string GetValidationErrorClass(string fieldName)
    {
        return ValidationErrors.ContainsKey(fieldName) ? "is-invalid" : "";
    }
    
    private string GetValidationMessage(string fieldName)
    {
        return ValidationErrors.TryGetValue(fieldName, out var error) ? error : "";
    }

    private async Task OnProfileImageChange(InputFileChangeEventArgs e)
    {
        UploadedProfileImage = e.File;
        if (UploadedProfileImage != null)
        {
            using var ms = new MemoryStream();
            await UploadedProfileImage.OpenReadStream(10 * 1024 * 1024).CopyToAsync(ms);
            var base64 = Convert.ToBase64String(ms.ToArray());
            var ext = Path.GetExtension(UploadedProfileImage.Name).ToLower();
            var mime = ext == ".png" ? "image/png" : "image/jpeg";
            _previewProfilePicture = $"data:{mime};base64,{base64}";
        }
    }

    private async Task ToggleEditModeAsync()
    {
        if (!IsEditMode)
        {
            isLoading = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User?.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrWhiteSpace(userId))
            {
                // Reload fresh data from database when entering edit mode
                if (authState.User != null)
                {
                    var user = await UserManager.GetUserAsync(authState.User);
                    if (user != null)
                    {
                        Email = user.Email ?? "";
                        EmailVerified = await UserManager.IsEmailConfirmedAsync(user);
                    }
                }
                await LoadExtendedProfileData(userId);
            }
            isLoading = false;
        }
        else
        {
            // If canceling edit mode, reload original data
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User?.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrWhiteSpace(userId))
            {
                await LoadExtendedProfileData(userId);
            }
            // Clear any pending uploads
            _previewProfilePicture = null;
            UploadedProfileImage = null;
        }
        IsEditMode = !IsEditMode;
    }

    private async Task SaveProfile()
    {
        try
        {
            // Step 1: Validate all fields before proceeding
            if (!ValidateAllFields())
            {
                SetErrorMessageWithTimer("Please correct the validation errors before saving.");
                StateHasChanged();
                isLoading = false;
                return;
            }
            // Step 2: Get userId from claims
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User?.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrWhiteSpace(userId))
            {
                SetErrorMessageWithTimer("User not found.");
                isLoading = false;
                return;
            }
            // Step 3: Get or create student profile
            var studentProfile = await StudentProfileService.GetProfileByUserIdAsync(userId);
            if (studentProfile == null)
            {
                studentProfile = new Models.StudentProfile {
                    UserId = userId,
                    FirstName = FirstName.Trim(),
                    LastName = LastName.Trim()
                };
            }
            // Step 4: Update fields with trimmed and sanitized values
            studentProfile.FirstName = FirstName?.Trim() ?? "";
            studentProfile.MiddleName = string.IsNullOrWhiteSpace(MiddleName) ? null : MiddleName.Trim();
            studentProfile.LastName = LastName?.Trim() ?? "";
            studentProfile.Sex = Sex;
            studentProfile.Nationality = string.IsNullOrWhiteSpace(Nationality) ? null : Nationality.Trim();
            studentProfile.PermanentAddress = string.IsNullOrWhiteSpace(PermanentAddress) ? null : PermanentAddress.Trim();
            studentProfile.BirthDate = BirthDate;
            studentProfile.MobileNumber = string.IsNullOrWhiteSpace(Phone) ? null : System.Text.RegularExpressions.Regex.Replace(Phone.Trim(), @"[\s\-\(\)]", "");
            studentProfile.Email = Email?.Trim();
            studentProfile.UniversityName = string.IsNullOrWhiteSpace(University) ? null : University.Trim();
            studentProfile.StudentNumber = string.IsNullOrWhiteSpace(StudentNumber) ? null : StudentNumber.Trim();
            studentProfile.Course = string.IsNullOrWhiteSpace(Program) ? null : Program.Trim();
            var yearLevelInt = ParseYearLevel(YearLevel);
            studentProfile.YearLevel = yearLevelInt;
            // Status is managed by the service - students cannot change verification status
            // Step 5: Handle file upload with additional validation
            if (UploadedProfileImage != null)
            {
                // Validate file type
                var allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif" };
                var fileExtension = Path.GetExtension(UploadedProfileImage.Name).ToLower();
                if (!allowedExtensions.Contains(fileExtension))
                {
                    SetErrorMessageWithTimer("Profile image must be a JPG, PNG, or GIF file.");
                    StateHasChanged();
                    isLoading = false;
                    return;
                }
                if (UploadedProfileImage.Size > 10 * 1024 * 1024)
                {
                    SetErrorMessageWithTimer("Profile image exceeds the 10MB size limit. Please choose a smaller file.");
                    StateHasChanged();
                    isLoading = false;
                    return;
                }

                try
                {
                    // Try to delete old profile picture from Azure Blob Storage if it exists
                    if (!string.IsNullOrWhiteSpace(ProfilePicture) && 
                        ProfilePicture != "https://via.placeholder.com/120" && 
                        ProfilePicture.Contains("blob.core.windows.net"))
                    {
                        var oldBlobFileName = BlobStorageService.ExtractBlobFileName(ProfilePicture);
                        if (!string.IsNullOrWhiteSpace(oldBlobFileName))
                        {
                            try
                            {
                                var deleted = await BlobStorageService.DeletePhotoAsync(oldBlobFileName);
                                Console.WriteLine($"Old profile picture deletion result: {deleted}");
                            }
                            catch (Exception deleteEx)
                            {
                                Console.WriteLine($"Warning: Could not delete old profile picture '{oldBlobFileName}': {deleteEx.Message}");
                                // Continue with upload even if deletion fails
                            }
                        }
                    }

                    // Upload new profile picture to Azure Blob Storage
                    var contentType = fileExtension switch
                    {
                        ".png" => "image/png",
                        ".gif" => "image/gif",
                        _ => "image/jpeg"
                    };

                    using var stream = UploadedProfileImage.OpenReadStream(10 * 1024 * 1024);
                    var blobUrl = await BlobStorageService.UploadProfilePictureAsync(stream, userId, "student", fileExtension, contentType);
                    
                    studentProfile.ProfilePicture = blobUrl;
                    ProfilePicture = studentProfile.ProfilePicture;
                }
                catch (Exception ex)
                {
                    SetErrorMessageWithTimer($"Error uploading profile picture: {ex.Message}");
                    StateHasChanged();
                    isLoading = false;
                    return;
                }
            }
            else if (!string.IsNullOrWhiteSpace(ProfilePicture) && ProfilePicture != "https://via.placeholder.com/120")
            {
                studentProfile.ProfilePicture = ProfilePicture;
            }
            // Step 6: Save profile with error handling
            await StudentProfileService.SaveProfileAsync(studentProfile, Email);
            // Clear upload state and validation errors
            _previewProfilePicture = null;
            UploadedProfileImage = null;
            ValidationErrors.Clear();
            // Reload the profile data to reflect database changes
            await LoadExtendedProfileData(userId);
            IsEditMode = false;
            SetSuccessMessageWithTimer("Student profile updated successfully!");
            Console.WriteLine("Student profile updated successfully!");
            StateHasChanged();
        }
        catch (ArgumentException ex)
        {
            SetErrorMessageWithTimer(ex.Message);
            StateHasChanged();
            Console.WriteLine($"Validation error: {ex.Message}");
        }
        catch (Exception ex)
        {
            SetErrorMessageWithTimer($"Error saving profile: {ex.Message}");
            StateHasChanged();
            Console.WriteLine($"Error saving profile: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
        // ...existing code...
    }

    private async Task LoadExtendedProfileData(string userId)
    {
        try
        {
            var studentProfile = await StudentProfileService.GetProfileByUserIdAsync(userId);
            if (studentProfile != null)
            {
                FirstName = studentProfile.FirstName ?? "";
                MiddleName = studentProfile.MiddleName ?? "";
                LastName = studentProfile.LastName ?? "";
                Sex = studentProfile.Sex ?? "Male";
                Nationality = studentProfile.Nationality ?? "";
                PermanentAddress = studentProfile.PermanentAddress ?? "";
                BirthDate = studentProfile.BirthDate ?? DateTime.Now;
                Phone = studentProfile.MobileNumber ?? "";
                
                // Only override email if profile has a valid email, otherwise keep Identity email
                if (!string.IsNullOrWhiteSpace(studentProfile.Email))
                    Email = studentProfile.Email;
                
                FullName = $"{FirstName} {LastName}".Trim();
                if (string.IsNullOrWhiteSpace(FullName))
                    FullName = Username;
                
                University = studentProfile.UniversityName ?? "";
                StudentNumber = studentProfile.StudentNumber ?? "";
                Program = studentProfile.Course ?? "";
                YearLevel = studentProfile.YearLevel.HasValue ? GetYearLevelText(studentProfile.YearLevel.Value.ToString()) : "1st Year";
                
                // Status should always reflect the actual verification status from DB
                Status = studentProfile.VerificationStatus ?? "Pending";
                
                ProfilePicture = !string.IsNullOrWhiteSpace(studentProfile.ProfilePicture) ? studentProfile.ProfilePicture : "https://via.placeholder.com/120";
                
                // Set timestamps
                CreatedDate = studentProfile.CreatedAt;
                LastLogin = DateTime.Now;
            }
            else
            {
                // Set defaults for new profile
                Status = "Pending";
                Sex = "Male";
                YearLevel = "1st Year";
                BirthDate = DateTime.Now;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading extended profile data: {ex.Message}");
        }
    }

    private int? ParseYearLevel(string yearLevelStr)
    {
        if (string.IsNullOrWhiteSpace(yearLevelStr)) return null;
        
        // Handle direct numeric strings first
        var digits = new string(yearLevelStr.TakeWhile(char.IsDigit).ToArray());
        if (int.TryParse(digits, out var yl)) return yl;
        
        // Handle text values like "1st Year", "2nd Year", etc.
        if (yearLevelStr.Contains("1")) return 1;
        if (yearLevelStr.Contains("2")) return 2;
        if (yearLevelStr.Contains("3")) return 3;
        if (yearLevelStr.Contains("4")) return 4;
        if (yearLevelStr.Contains("5")) return 5;
        if (yearLevelStr.Contains("6")) return 6;
        if (yearLevelStr.Contains("7")) return 7;
        if (yearLevelStr.Contains("8")) return 8;
        
        return 1; // Default to 1st year if parsing fails
    }
}



<div class="container-fluid p-5 student-profile-bg">
    @if (!string.IsNullOrWhiteSpace(_errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>@_errorMessage
            <button type="button" class="btn-close" @onclick="() => _errorMessage = string.Empty"></button>
        </div>
    }
    @if (!string.IsNullOrWhiteSpace(_successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i>@_successMessage
            <button type="button" class="btn-close" @onclick="() => _successMessage = string.Empty"></button>
        </div>
    }
    @if (!string.IsNullOrWhiteSpace(ProfileErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @ProfileErrorMessage
        </div>
    }
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h2 class="mb-0 profile-title">My Profile</h2>
                <div class="d-flex gap-2">
                    @if (IsEditMode)
                    {
                        <button class="btn btn-cancel profile-btn" @onclick="ToggleEditModeAsync" disabled="@(isLoading)">
                            <i class="fas fa-edit me-2"></i>Cancel
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-primary profile-btn" @onclick="ToggleEditModeAsync" disabled="@(isLoading)">
                            <i class="fas fa-edit me-2"></i>Edit Profile
                        </button>
                    }
                    @if (IsEditMode)
                    {
                        <button class="btn btn-success profile-btn" @onclick="SaveProfile" disabled="@(isLoading)">
                            <i class="fas fa-save me-2"></i>Save
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <!-- Profile Summary (Left Column) -->
        <div class="col-lg-4 mb-4">
            <div class="card profile-card mb-4">
                <div class="card-body text-center">
                    <div class="position-relative d-inline-block mb-3">
                        @if (string.IsNullOrWhiteSpace(_previewProfilePicture) && ProfilePicture == "https://via.placeholder.com/120")
                        {
                            <!-- Facebook-style blank avatar SVG -->
                            <svg class="rounded-circle profile-image shadow" width="120" height="120" viewBox="0 0 120 120" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <circle cx="60" cy="60" r="60" fill="#eaf1fb"/>
                                <ellipse cx="60" cy="54" rx="28" ry="26" fill="#b3c6e6"/>
                                <ellipse cx="60" cy="92" rx="36" ry="18" fill="#b3c6e6"/>
                            </svg>
                        }
                        else
                        {
                            <img src="@PreviewProfilePicture" class="rounded-circle profile-image shadow" alt="Profile Picture" width="120" height="120" />
                        }
                        @if (IsEditMode)
                        {
                            <div class="d-flex flex-row justify-content-center gap-2 mt-2">
                                <label class="btn btn-sm btn-primary rounded-circle profile-img-btn">
                                    <i class="fas fa-camera"></i>
                                    <InputFile OnChange="OnProfileImageChange" accept="image/*" style="display:none;" />
                                </label>
                                <button class="btn btn-sm btn-danger rounded-circle profile-img-btn" type="button" title="Remove Profile Picture" @onclick="RemoveProfileImageAsync">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        }
                    </div>
                    <h4 class="card-title mb-1 profile-name">@FullName</h4>
                    <div class="text-muted mb-2">@Email</div>
                    <div class="d-flex flex-column align-items-center gap-2">
                        <span class="badge profile-badge-status @(GetStatusBadgeClass(Status))">@Status</span>
                        <span class="badge profile-badge-year">@GetYearLevelText(YearLevel)</span>
                    </div>
                </div>
            </div>
            <div class="card profile-card">
                <div class="card-header bg-white">
                    <h6 class="mb-0 profile-verification-title"><i class="fas fa-check-circle profile-header-icon"></i>Verification</h6>
                </div>
                <div class="card-body">
                    <div class="verification-item d-flex justify-content-between align-items-center">
                        <span class="profile-label-bold">Email</span>
                        <i class="fas fa-@(EmailVerified ? "check-circle" : "clock") @(EmailVerified ? "profile-icon-verified" : "profile-icon-pending")"></i>
                    </div>
                    <div class="verification-item d-flex justify-content-between align-items-center">
                        <span class="profile-label-bold">Phone</span>
                        <i class="fas fa-@(PhoneVerified ? "check-circle" : "clock") @(PhoneVerified ? "profile-icon-verified" : "profile-icon-pending")"></i>
                    </div>
                    <div class="verification-item d-flex justify-content-between align-items-center">
                        <span class="profile-label-bold">Student ID</span>
                        <i class="fas fa-@(StudentIdVerified ? "check-circle" : "clock") @(StudentIdVerified ? "profile-icon-verified" : "profile-icon-pending")"></i>
                    </div>
                    <div class="verification-item d-flex justify-content-between align-items-center">
                        <span class="profile-label-bold">Academic Records</span>
                        <i class="fas fa-@(AcademicRecordsVerified ? "check-circle" : "clock") @(AcademicRecordsVerified ? "profile-icon-verified" : "profile-icon-pending")"></i>
                    </div>
                </div>
            </div>
        </div>
        <!-- Profile Details (Right Column) -->
        <div class="col-lg-8">
            <div class="card profile-card mb-4">
                <div class="card-header bg-white">
                    <h5 class="mb-0 profile-section-title"><i class="fas fa-user profile-header-icon"></i>Personal Information</h5>
                </div>
                <div class="card-body">
                    @if (IsEditMode)
                    {
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label class="form-label profile-label-bold">First Name <span class="text-danger">*</span></label>
                                <input type="text" class="form-control @GetValidationErrorClass("FirstName")" @bind="FirstName" 
                                       @onblur="@(() => ValidateField("FirstName", FirstName, "First Name"))" maxlength="50" />
                                @if (!string.IsNullOrEmpty(GetValidationMessage("FirstName")))
                                {
                                    <div class="invalid-feedback d-block">@GetValidationMessage("FirstName")</div>
                                }
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label profile-label-bold">Middle Name</label>
                                <input type="text" class="form-control @GetValidationErrorClass("MiddleName")" @bind="MiddleName" 
                                       @onblur="@(() => ValidateField("MiddleName", MiddleName, "Middle Name"))" maxlength="50" />
                                @if (!string.IsNullOrEmpty(GetValidationMessage("MiddleName")))
                                {
                                    <div class="invalid-feedback d-block">@GetValidationMessage("MiddleName")</div>
                                }
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label profile-label-bold">Last Name <span class="text-danger">*</span></label>
                                <input type="text" class="form-control @GetValidationErrorClass("LastName")" @bind="LastName" 
                                       @onblur="@(() => ValidateField("LastName", LastName, "Last Name"))" maxlength="50" />
                                @if (!string.IsNullOrEmpty(GetValidationMessage("LastName")))
                                {
                                    <div class="invalid-feedback d-block">@GetValidationMessage("LastName")</div>
                                }
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label profile-label-bold">Sex</label>
                                <select class="form-control" @bind="Sex">
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label profile-label-bold">Birthdate</label>
                                <input type="date" class="form-control" @bind="BirthDate" />
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label profile-label-bold">Nationality</label>
                                <input type="text" class="form-control @GetValidationErrorClass("Nationality")" @bind="Nationality" 
                                       @onblur="@(() => ValidateField("Nationality", Nationality, "Nationality"))" maxlength="50" />
                                @if (!string.IsNullOrEmpty(GetValidationMessage("Nationality")))
                                {
                                    <div class="invalid-feedback d-block">@GetValidationMessage("Nationality")</div>
                                }
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label profile-label-bold">Permanent Address</label>
                                <input type="text" class="form-control" @bind="PermanentAddress" maxlength="200" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label profile-label-bold">Phone</label>
                                <input type="tel" class="form-control @GetValidationErrorClass("Phone")" @bind="Phone" 
                                       @onblur="@(() => ValidateField("Phone", Phone, "Phone Number"))" 
                                       placeholder="e.g., +63 912 345 6789" maxlength="20" />
                                @if (!string.IsNullOrEmpty(GetValidationMessage("Phone")))
                                {
                                    <div class="invalid-feedback d-block">@GetValidationMessage("Phone")</div>
                                }
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label profile-label-bold">Email</label>
                                <input type="email" class="form-control" value="@Email" readonly />
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label class="form-label profile-label-bold">First Name</label>
                                <div class="form-control-plaintext">@FirstName</div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label profile-label-bold">Middle Name</label>
                                <div class="form-control-plaintext">@MiddleName</div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label profile-label-bold">Last Name</label>
                                <div class="form-control-plaintext">@LastName</div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label profile-label-bold">Sex</label>
                                <div class="form-control-plaintext">@Sex</div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label profile-label-bold">Birthdate</label>
                                <div class="form-control-plaintext">@BirthDate.ToShortDateString()</div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label profile-label-bold">Nationality</label>
                                <div class="form-control-plaintext">@Nationality</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label profile-label-bold">Permanent Address</label>
                                <div class="form-control-plaintext">@PermanentAddress</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label profile-label-bold">Phone</label>
                                <div class="form-control-plaintext">@Phone</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label profile-label-bold">Email</label>
                                <div class="form-control-plaintext">@Email</div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="card profile-card">
                <div class="card-header bg-white">
                    <h5 class="mb-0 profile-section-title"><i class="fas fa-graduation-cap profile-header-icon"></i>Educational Information</h5>
                </div>
                <div class="card-body">
                    @if (IsEditMode)
                    {
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">University</label>
                                <input type="text" class="form-control @GetValidationErrorClass("University")" @bind="University" 
                                       @onblur="@(() => ValidateField("University", University, "University"))" maxlength="100" />
                                @if (!string.IsNullOrEmpty(GetValidationMessage("University")))
                                {
                                    <div class="invalid-feedback d-block">@GetValidationMessage("University")</div>
                                }
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Student Number</label>
                                <input type="text" class="form-control @GetValidationErrorClass("StudentNumber")" @bind="StudentNumber" 
                                       @onblur="@(() => ValidateField("StudentNumber", StudentNumber, "Student Number"))" 
                                       placeholder="e.g., 2022-1234" maxlength="20" />
                                @if (!string.IsNullOrEmpty(GetValidationMessage("StudentNumber")))
                                {
                                    <div class="invalid-feedback d-block">@GetValidationMessage("StudentNumber")</div>
                                }
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Program</label>
                                <input type="text" class="form-control @GetValidationErrorClass("Program")" @bind="Program" 
                                       @onblur="@(() => ValidateField("Program", Program, "Program"))" maxlength="100" />
                                @if (!string.IsNullOrEmpty(GetValidationMessage("Program")))
                                {
                                    <div class="invalid-feedback d-block">@GetValidationMessage("Program")</div>
                                }
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Year Level</label>
                                <select class="form-control" @bind="YearLevel">
                                    <option>1st Year</option>
                                    <option>2nd Year</option>
                                    <option>3rd Year</option>
                                    <option>4th Year</option>
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Status</label>
                                <div class="form-control-plaintext"><span class="profile-status-text @GetStatusBadgeClass(Status)">@Status</span></div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label profile-label-bold">University</label>
                                <div class="form-control-plaintext">@University</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label profile-label-bold">Student Number</label>
                                <div class="form-control-plaintext">@StudentNumber</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label profile-label-bold">Program</label>
                                <div class="form-control-plaintext">@Program</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label profile-label-bold">Year Level</label>
                                <div class="form-control-plaintext">@YearLevel</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label profile-label-bold">Status</label>
                                <div class="form-control-plaintext"><span class="profile-status-text @GetStatusBadgeClass(Status)">@Status</span></div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>




        