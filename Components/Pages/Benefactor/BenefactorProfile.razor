@* @page "/dashboard/benefactor/profile"
@attribute [Authorize(Roles = "Benefactor,SuperAdmin")]
@layout Layout.BenefactorDashLayout
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> UserManager
@inject BenefactorProfileService BenefactorProfileService
@inject Services.BlobStorageService BlobStorageService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@using Microsoft.JSInterop
@implements IDisposable
@implements IAsyncDisposable

<div class="container-fluid p-5 benefactor-profile-bg">
    <!-- Error/Success Messages -->
    @if (!string.IsNullOrWhiteSpace(_errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>@_errorMessage
            <button type="button" class="btn-close" @onclick="() => _errorMessage = string.Empty"></button>
        </div>
    }
    @if (!string.IsNullOrWhiteSpace(_successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i>@_successMessage
            <button type="button" class="btn-close" @onclick="() => _successMessage = string.Empty"></button>
        </div>
    }
    @if (!string.IsNullOrWhiteSpace(_benefactorErrorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>@_benefactorErrorMessage
            <button type="button" class="btn-close" @onclick="() => _benefactorErrorMessage = string.Empty"></button>
        </div>
    }
    @if (!string.IsNullOrWhiteSpace(_benefactorSuccessMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i>@_benefactorSuccessMessage
            <button type="button" class="btn-close" @onclick="() => _benefactorSuccessMessage = string.Empty"></button>
        </div>
    }
    <div class="row mb-4">
        <div class="col-12">
            <h2 class="mb-0 profile-title">My Profile</h2>
        </div>
    </div>
    <div class="d-flex justify-content-end mb-2 gap-2">
        @if (IsEditMode)
        {
            <button class="btn btn-danger btn-md profile-btn" @onclick="ToggleEditMode">
                <i class="fas fa-times me-2"></i>Cancel
            </button>
            <button class="btn btn-success btn-md profile-btn" @onclick="SaveProfile">
                <i class="fas fa-save me-2"></i>Save
            </button>
        }
        else
        {
            <button class="btn btn-primary btn-md profile-btn" @onclick="ToggleEditMode">
                <i class="fas fa-edit me-2"></i>Edit Profile
            </button>
        }
    </div>
    <div class="row">
        <div class="col-lg-4 mb-4">
            <div class="card shadow-sm mb-4">
                <div class="card-body text-center">
                    <div class="position-relative d-inline-block mb-3">
                        @if (IsEditMode && !string.IsNullOrWhiteSpace(_previewProfilePicture))
                        {
                            <img src="@_previewProfilePicture" class="profile-image shadow" alt="Profile Preview" width="120" height="120" />
                        }
                        else if (string.IsNullOrWhiteSpace(_previewProfilePicture) && (string.IsNullOrWhiteSpace(ProfilePicture) || ProfilePicture == "https://via.placeholder.com/120"))
                        {
                            <!-- Blank person silhouette SVG -->
                            <svg class="rounded-circle profile-image shadow" width="120" height="120" viewBox="0 0 120 120" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <circle cx="60" cy="60" r="60" fill="#eaf1fb"/>
                                <ellipse cx="60" cy="54" rx="28" ry="26" fill="#b3c6e6"/>
                                <ellipse cx="60" cy="92" rx="36" ry="18" fill="#b3c6e6"/>
                            </svg>
                        }
                        else
                        {
                            <img src="@PreviewProfilePicture" class="rounded-circle profile-image shadow" alt="Profile Picture" width="120" height="120" />
                        }
                        @if (IsEditMode)
                        {
                            <div class="d-flex flex-row justify-content-center gap-2 mt-2">
                                <label class="btn btn-sm btn-primary rounded-circle profile-img-btn profile-upload-label">
                                    <i class="fas fa-camera profile-upload-icon"></i>
                                    <InputFile OnChange="OnProfileImageChange" accept="image/*" style="display:none;" />
                                </label>
                                <button class="btn btn-sm btn-danger rounded-circle profile-img-btn" type="button" title="Remove Profile Picture" @onclick="RemoveProfileImageAsync">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        }
                    </div>
                    <h4 class="card-title mb-1 profile-name">@FullName</h4>
                    <div class="text-muted mb-2">@ContactEmail</div>
                    <div class="d-flex flex-column align-items-center gap-2">
                        <span class="badge profile-badge-status @(Status == "Active" ? "profile-badge-active" : Status == "Pending" ? "profile-badge-pending" : Status == "On Leave" ? "profile-badge-onleave" : Status == "Graduated" ? "profile-badge-graduated" : "")">@Status</span>
                    </div>
                    <div class="text-start mt-3">
                        <div class="mb-2"><span class="profile-label-bold">Role:</span> <span>@Role</span></div>
                        <div class="mb-2"><span class="profile-label-bold">Phone:</span> <span>@ContactNumber</span></div>
                        <div class="mb-2"><span class="profile-label-bold">Organization:</span> <span>@BenefactorOrganizationName</span></div>
                        <div class="mb-2"><span class="profile-label-bold">Location:</span> <span>@Address</span></div>
                        <div class="mb-0"><span class="profile-label-bold">Member since:</span> <span>@CreatedDate.ToString("MMM yyyy")</span></div>
                    </div>
                </div>
            </div>
            <div class="card shadow-sm">
                <div class="card-header bg-white d-flex align-items-center">
                    <span class="profile-verification-title">
                        <span class="profile-verification-icon">
                            <i class="fas fa-check-circle"></i>
                        </span>
                        Verification
                    </span>
                </div>
                <div class="card-body d-flex flex-column">
                    <div>
                        <div class="verification-item d-flex justify-content-between align-items-center mb-2">
                            <span class="profile-label-bold">Email</span>
                            @if (EmailVerified)
                            {
                                <span><i class="fas fa-check-circle profile-icon-verified"></i></span>
                            }
                            else

                            {
                                <span><i class="fas fa-clock profile-icon-pending"></i></span>
                            }
                        </div>
                        <div class="verification-item d-flex justify-content-between align-items-center mb-2">
                            <span class="profile-label-bold">Phone</span>
                            @if (PhoneVerified)
                            {
                                <span><i class="fas fa-check-circle profile-icon-verified"></i></span>
                            }
                            else
                            {
                                <span><i class="fas fa-clock profile-icon-pending"></i></span>
                            }
                        </div>
                        <div class="verification-item d-flex justify-content-between align-items-center mb-2">
                            <span class="profile-label-bold">Benefactor ID</span>
                            @if (StudentIdVerified)
                            {
                                <span><i class="fas fa-check-circle profile-icon-verified"></i></span>
                            }
                            else
                            {
                                <span><i class="fas fa-clock profile-icon-pending"></i></span>
                            }
                        </div>
                        <div class="verification-item d-flex justify-content-between align-items-center">
                            <span class="profile-label-bold">Accreditation</span>
                            @if (AcademicRecordsVerified)
                            {
                                <span><i class="fas fa-check-circle profile-icon-verified"></i></span>
                            }
                            else
                            {
                                <span><i class="fas fa-clock profile-icon-pending"></i></span>
                            }
                        </div>
                    </div>
                    <div class="flex-grow-1"></div>
                </div>
            </div>
        </div>
        <div class="col-lg-8">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-white">
                    <h5 class="mb-0"><i class="fas fa-user profile-header-icon me-2"></i>Personal Information</h5>
                </div>
                <div class="card-body">
                    @if (IsEditMode)
                    {
                        <div class="row mb-2">
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">First Name</label>
                                <input class="form-control @GetPersonalValidationErrorClass("AdminFirstName")" @bind="AdminFirstName" required />
                                @if (!string.IsNullOrWhiteSpace(GetPersonalValidationMessage("AdminFirstName")))
                                {
                                    <div class="invalid-feedback d-block">@GetPersonalValidationMessage("AdminFirstName")</div>
                                }
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Middle Name</label>
                                <input class="form-control @GetPersonalValidationErrorClass("AdminMiddleName")" @bind="AdminMiddleName" />
                                @if (!string.IsNullOrWhiteSpace(GetPersonalValidationMessage("AdminMiddleName")))
                                {
                                    <div class="invalid-feedback d-block">@GetPersonalValidationMessage("AdminMiddleName")</div>
                                }
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Last Name</label>
                                <input class="form-control @GetPersonalValidationErrorClass("AdminLastName")" @bind="AdminLastName" required />
                                @if (!string.IsNullOrWhiteSpace(GetPersonalValidationMessage("AdminLastName")))
                                {
                                    <div class="invalid-feedback d-block">@GetPersonalValidationMessage("AdminLastName")</div>
                                }
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Sex</label>
                                <select class="form-control" @bind="Sex">
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Nationality</label>
                                <input class="form-control @GetPersonalValidationErrorClass("Nationality")" @bind="Nationality" />
                                @if (!string.IsNullOrWhiteSpace(GetPersonalValidationMessage("Nationality")))
                                {
                                    <div class="invalid-feedback d-block">@GetPersonalValidationMessage("Nationality")</div>
                                }
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Birth Date</label>
                                <input type="date" class="form-control @GetPersonalValidationErrorClass("BirthDate")" @bind="BirthDate" />
                                @if (!string.IsNullOrWhiteSpace(GetPersonalValidationMessage("BirthDate")))
                                {
                                    <div class="invalid-feedback d-block">@GetPersonalValidationMessage("BirthDate")</div>
                                }
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Contact Number</label>
                                <input class="form-control @GetPersonalValidationErrorClass("ContactNumber")" @bind="ContactNumber" required />
                                @if (!string.IsNullOrWhiteSpace(GetPersonalValidationMessage("ContactNumber")))
                                {
                                    <div class="invalid-feedback d-block">@GetPersonalValidationMessage("ContactNumber")</div>
                                }
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Email</label>
                                <input class="profile-email-readonly" value="@ContactEmail" readonly />
                            </div>
                            <div class="col-md-12 mb-3">
                                <label class="profile-label-bold">Address</label>
                                <input class="form-control @GetPersonalValidationErrorClass("Address")" @bind="Address" />
                                @if (!string.IsNullOrWhiteSpace(GetPersonalValidationMessage("Address")))
                                {
                                    <div class="invalid-feedback d-block">@GetPersonalValidationMessage("Address")</div>
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row mb-2">
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">First Name</label>
                                <div>@AdminFirstName</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Middle Name</label>
                                <div>@AdminMiddleName</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Last Name</label>
                                <div>@AdminLastName</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Sex</label>
                                <div>@Sex</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Nationality</label>
                                <div>@Nationality</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Birth Date</label>
                                <div>@BirthDate.ToShortDateString()</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Contact Number</label>
                                <div>@ContactNumber</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Email</label>
                                <div>@ContactEmail</div>
                            </div>
                            <div class="col-md-12 mb-3">
                                <label class="profile-label-bold">Address</label>
                                <div>@Address</div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="d-flex justify-content-end mb-2 gap-2">
                @if (IsBenefactorEditMode)
                {
                    <button class="btn btn-danger btn-md profile-btn" @onclick="ToggleBenefactorEditMode">
                        <i class="fas fa-times me-2"></i>Cancel
                    </button>
                    <button class="btn btn-success btn-md profile-btn" @onclick="SaveBenefactorInfo">
                        <i class="fas fa-save me-2"></i>Save
                    </button>
                }
                else
                {
                    <button class="btn btn-primary btn-md profile-btn" @onclick="ToggleBenefactorEditMode">
                        <i class="fas fa-edit me-2"></i>Edit Benefactor Profile
                    </button>
                }
            </div>
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-white d-flex align-items-center profile-card-header">
                    <span class="profile-header-icon me-2"><i class="fas fa-hand-holding-usd"></i></span>
                    <span class="profile-section-title">Benefactor Information</span>
                </div>
                <div class="card-body">
                    @if (IsBenefactorEditMode)
                    {
                        <div class="row mb-2">
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Organization Name</label>
                                <input type="text" class="form-control @GetBenefactorValidationErrorClass("BenefactorOrganizationName")" @bind="BenefactorOrganizationName" required />
                                @if (!string.IsNullOrWhiteSpace(GetBenefactorValidationMessage("BenefactorOrganizationName")))
                                {
                                    <div class="invalid-feedback d-block">@GetBenefactorValidationMessage("BenefactorOrganizationName")</div>
                                }
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Organization Address</label>
                                <input type="text" class="form-control @GetBenefactorValidationErrorClass("BenefactorOrganizationAddress")" @bind="BenefactorOrganizationAddress" required />
                                @if (!string.IsNullOrWhiteSpace(GetBenefactorValidationMessage("BenefactorOrganizationAddress")))
                                {
                                    <div class="invalid-feedback d-block">@GetBenefactorValidationMessage("BenefactorOrganizationAddress")</div>
                                }
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Contact Number</label>
                                <input type="text" class="form-control @GetBenefactorValidationErrorClass("BenefactorContactNumber")" @bind="BenefactorContactNumber" />
                                @if (!string.IsNullOrWhiteSpace(GetBenefactorValidationMessage("BenefactorContactNumber")))
                                {
                                    <div class="invalid-feedback d-block">@GetBenefactorValidationMessage("BenefactorContactNumber")</div>
                                }
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Email</label>
                                <input type="email" class="form-control @GetBenefactorValidationErrorClass("BenefactorEmail")" @bind="BenefactorEmail" />
                                @if (!string.IsNullOrWhiteSpace(GetBenefactorValidationMessage("BenefactorEmail")))
                                {
                                    <div class="invalid-feedback d-block">@GetBenefactorValidationMessage("BenefactorEmail")</div>
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row mb-2">
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Organization Name</label>
                                <div>@(string.IsNullOrWhiteSpace(BenefactorOrganizationName) ? "" : BenefactorOrganizationName)</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Organization Address</label>
                                <div>@(string.IsNullOrWhiteSpace(BenefactorOrganizationAddress) ? "" : BenefactorOrganizationAddress)</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Contact Number</label>
                                <div>@(string.IsNullOrWhiteSpace(BenefactorContactNumber) ? "" : BenefactorContactNumber)</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Email</label>
                                <div>@(string.IsNullOrWhiteSpace(BenefactorEmail) ? "" : BenefactorEmail)</div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Verification Documents Container -->
            <div class="verification-documents-container">
                <div class="verification-doc-header">
                    <i class="fas fa-file-alt"></i>
                    <h5>Verification Documents</h5>
                </div>
                
                <div class="verification-doc-item @(string.IsNullOrWhiteSpace(BenefactorIdDocumentPath) ? "verification-doc-unavailable" : "")" @onclick="ViewBenefactorIdDocument">
                    <div class="verification-doc-info">
                        <div class="verification-doc-icon">
                            <i class="fas fa-id-card"></i>
                        </div>
                        <div class="verification-doc-details">
                            <div class="verification-doc-name">Benefactor ID Document</div>
                            <div class="verification-doc-status">
                                @if (string.IsNullOrWhiteSpace(BenefactorIdDocumentPath))
                                {
                                    <span>Not uploaded</span>
                                }
                                else
                                {
                                    <span>Click to view document</span>
                                }
                            </div>
                        </div>
                    </div>
                    @if (!string.IsNullOrWhiteSpace(BenefactorIdDocumentPath))
                    {
                        <button class="verification-doc-view-btn" type="button">
                            <i class="fas fa-eye me-1"></i>View
                        </button>
                    }
                </div>

                <div class="verification-doc-item @(string.IsNullOrWhiteSpace(AccreditationDocumentPath) ? "verification-doc-unavailable" : "")" @onclick="ViewAccreditationDocument">
                    <div class="verification-doc-info">
                        <div class="verification-doc-icon">
                            <i class="fas fa-certificate"></i>
                        </div>
                        <div class="verification-doc-details">
                            <div class="verification-doc-name">Accreditation Document</div>
                            <div class="verification-doc-status">
                                @if (string.IsNullOrWhiteSpace(AccreditationDocumentPath))
                                {
                                    <span>Not uploaded</span>
                                }
                                else
                                {
                                    <span>Click to view document</span>
                                }
                            </div>
                        </div>
                    </div>
                    @if (!string.IsNullOrWhiteSpace(AccreditationDocumentPath))
                    {
                        <button class="verification-doc-view-btn" type="button">
                            <i class="fas fa-eye me-1"></i>View
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // Benefactor Information state
    private bool IsBenefactorEditMode = false;
    private string BenefactorOrganizationName = "";
    private string BenefactorOrganizationAddress = "";
    private string BenefactorContactNumber = "";
    private string BenefactorEmail = "";

    // Timer variables for auto-dismiss notifications
    private System.Threading.Timer? _errorTimer;
    private System.Threading.Timer? _successTimer;
    private System.Threading.Timer? _benefactorErrorTimer;
    private System.Threading.Timer? _benefactorSuccessTimer;
    
    // Thread safety variables
    private readonly SemaphoreSlim _savingSemaphore = new(1, 1);
    private readonly SemaphoreSlim _benefactorSavingSemaphore = new(1, 1);
    
    // Static semaphore to prevent concurrent profile loading across all instances
    private static readonly SemaphoreSlim _globalProfileLoadingSemaphore = new(1, 1);
    private static readonly Dictionary<string, Models.BenefactorProfile?> _profileCache = new();
    private static readonly Dictionary<string, DateTime> _cacheTimestamps = new();

    private void ToggleBenefactorEditMode()
    {
        IsBenefactorEditMode = !IsBenefactorEditMode;
        if (!IsBenefactorEditMode)
        {
            // Clear validation errors when canceling edit mode
            BenefactorValidationErrors.Clear();
            _benefactorErrorMessage = string.Empty;
            _benefactorSuccessMessage = string.Empty;
        }
    }

    private async Task SaveBenefactorInfo()
    {
        var ct = _cts.Token;
        // Prevent concurrent saves using semaphore with timeout
        if (!await _benefactorSavingSemaphore.WaitAsync(TimeSpan.FromSeconds(10), ct))
        {
            SetBenefactorErrorMessageWithTimer("Another save operation is in progress. Please wait and try again.");
            return;
        }
        
        try
        {
            // Clear previous messages
            _benefactorErrorMessage = string.Empty;
            _benefactorSuccessMessage = string.Empty;
            
            // Step 1: Validate all benefactor fields before proceeding
            if (!ValidateAllBenefactorFields())
            {
                SetBenefactorErrorMessageWithTimer("Please correct the validation errors before saving.");
                return;
            }
            
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);
            if (user == null)
            {
                SetBenefactorErrorMessageWithTimer("User session expired. Please login again.");
                return;
            }

            Models.BenefactorProfile? profile;
            try
            {
                profile = await BenefactorProfileService.GetProfileByUserIdAsync(user.Id);
                ct.ThrowIfCancellationRequested();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error getting profile: {ex.Message}");
                SetBenefactorErrorMessageWithTimer("Error accessing profile data. Please try again.");
                return;
            }

            if (profile == null)
            {
                SetBenefactorErrorMessageWithTimer("Profile not found. Please refresh the page and try again.");
                return;
            }

            // Update organization information with trimmed and sanitized values
            profile.OrganizationName = BenefactorOrganizationName?.Trim() ?? "";
            profile.Address = string.IsNullOrWhiteSpace(BenefactorOrganizationAddress) ? null : BenefactorOrganizationAddress.Trim();
            profile.ContactNumber = string.IsNullOrWhiteSpace(BenefactorContactNumber) ? null : System.Text.RegularExpressions.Regex.Replace(BenefactorContactNumber.Trim(), @"[\s\-\(\)]", "");
            profile.ContactEmail = string.IsNullOrWhiteSpace(BenefactorEmail) ? null : BenefactorEmail.Trim();
            
            Console.WriteLine("Saving benefactor information...");
            try
            {
                await BenefactorProfileService.SaveProfileAsync(profile);
                ct.ThrowIfCancellationRequested();
                Console.WriteLine("Benefactor profile saved successfully!");
                
                // Clear cache to force refresh
                _profileCache.Remove(user.Id);
                _cacheTimestamps.Remove(user.Id);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error saving benefactor profile to database: {ex.Message}");
                SetBenefactorErrorMessageWithTimer("Error saving benefactor information. Please try again.");
                return;
            }
            
            // Clear validation errors
            BenefactorValidationErrors.Clear();
            
            // Update UI properties directly to avoid concurrent DB calls
            BenefactorOrganizationName = profile.OrganizationName ?? "";
            BenefactorOrganizationAddress = profile.Address ?? "";
            BenefactorContactNumber = profile.ContactNumber ?? "";
            BenefactorEmail = profile.ContactEmail ?? "";
            
            IsBenefactorEditMode = false;
            
            // Show success message
            SetBenefactorSuccessMessageWithTimer("Benefactor information updated successfully!");
            
            Console.WriteLine("Benefactor information updated successfully!");
        }
        catch (ArgumentException argEx)
        {
            Console.WriteLine($"Validation error: {argEx.Message}");
            SetBenefactorErrorMessageWithTimer(argEx.Message);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving benefactor info: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            SetBenefactorErrorMessageWithTimer("An unexpected error occurred while saving benefactor information. Please try again.");
        }
        finally
        {
            try
            {
                _benefactorSavingSemaphore.Release();
            }
            catch (ObjectDisposedException)
            {
                // Semaphore was disposed while operation was in-flight; ignore to avoid crash
            }
        }
    }

    // Error handling variables
    private string _errorMessage = "";
    private string _successMessage = "";
    private string _benefactorErrorMessage = "";
    private string _benefactorSuccessMessage = "";
    
    // Validation error properties (similar to Institution profile)
    private Dictionary<string, string> ValidationErrors = new();
    private Dictionary<string, string> BenefactorValidationErrors = new();
    private bool IsValidating = false;
    
    // Edit mode state
    private bool IsEditMode = false;
    
    // Benefactor Profile Info
    private string AdminFirstName = "";
    private string AdminMiddleName = "";
    private string AdminLastName = "";
    private string Sex = "Male";
    private string Nationality = "";
    private DateTime BirthDate = DateTime.Now;
    private string ContactNumber = "";
    private string ContactEmail = "";
    private string Address = "";
    private string FullName = "";
    private string Role = "Benefactor";
    private string Status = "Active";
    private DateTime CreatedDate = DateTime.Now;
    private string ProfilePicture = "https://via.placeholder.com/120";

    private IBrowserFile? UploadedProfileImage;
    private string? _previewProfilePicture;
    private string PreviewProfilePicture 
    {
        get
        {
            var pictureUrl = _previewProfilePicture ?? ProfilePicture;
            
            // If this is a blob storage URL, generate a SAS URL for access
            if (!string.IsNullOrWhiteSpace(pictureUrl) && 
                pictureUrl.Contains("blob.core.windows.net") && 
                pictureUrl != "https://via.placeholder.com/120")
            {
                try
                {
                    return BlobStorageService.GetPhotoSasUrlFromBlobUrl(pictureUrl);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"[BenefactorProfile] Error generating SAS URL for profile picture: {ex.Message}");
                    return pictureUrl; // Return original URL as fallback
                }
            }
            
            return pictureUrl;
        }
    }

    // Verification Status
    private bool EmailVerified = false;
    private bool PhoneVerified = false;
    private bool StudentIdVerified = false;
    private bool AcademicRecordsVerified = false;
    private bool IsTwoFactorEnabled = false;
    private DateTime LastLogin = DateTime.Now;
    private int ScholarshipsReceived = 0;
    private int Applications = 0;
    private string GPA = "0.00";

    // Document paths for verification
    private string BenefactorIdDocumentPath = "";
    private string AccreditationDocumentPath = "";


    private bool _profileLoaded = false;
    private bool _isInitialized = false;
    private IJSRuntime? _jsRuntime;
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    // Cancellation & in-flight task tracking for graceful teardown
    private readonly CancellationTokenSource _cts = new();
    private Task? _loadTask;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Minimal initialization without any DB access
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                // Get basic info from claims without DB access
                ContactEmail = authState.User.Identity.Name ?? "";
                FullName = authState.User.FindFirst("Name")?.Value ?? "Benefactor User";
                
                // Set default values first
                SetDefaultProfileValues();
            }
            else
            {
                SetDefaultProfileValues();
                _errorMessage = "User is not authenticated. Please login again.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during initialization: {ex.Message}");
            SetDefaultProfileValues();
            _errorMessage = $"Error loading profile data: {ex.Message}";
        }
        
        _jsRuntime = JSRuntime;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_profileLoaded)
        {
            // Start background load and track the task so DisposeAsync can await it
            _loadTask = LoadProfileDataAsync(_cts.Token);
        }
        return Task.CompletedTask;
    }

    private async Task LoadProfileDataAsync(CancellationToken ct = default)
    {
        // Small startup delay to mimic previous behavior
        try { await Task.Delay(500, ct); } catch (OperationCanceledException) { return; }

        bool entered = false;
        try
        {
            ct.ThrowIfCancellationRequested();
            await _loadingSemaphore.WaitAsync(ct);
            entered = true;

            if (_profileLoaded) return; // Already loaded

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                var user = await UserManager.GetUserAsync(authState.User);
                if (user != null)
                {
                    // Load user-specific info from Identity
                    ContactEmail = user.Email ?? "";
                    EmailVerified = await UserManager.IsEmailConfirmedAsync(user);
                    CreatedDate = user.LockoutEnd?.DateTime ?? DateTime.Now;
                    LastLogin = DateTime.Now.AddHours(-1);

                    // Load extended profile data
                    await LoadExtendedProfileDataInternal(user.Id, ct);
                    _profileLoaded = true;
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
        catch (OperationCanceledException)
        {
            return;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading profile data: {ex.Message}");
            _errorMessage = "Error loading profile data. Please try again.";
            await InvokeAsync(StateHasChanged);
        }
        finally
        {
            if (entered)
            {
                try { _loadingSemaphore.Release(); } catch (ObjectDisposedException) { }
            }
        }
    }

    // Removed redundant profile loading methods to prevent concurrent access



    private readonly SemaphoreSlim _loadingSemaphore = new(1, 1);

    private async Task LoadExtendedProfileDataInternal(string userId, CancellationToken ct = default)
    {
        bool entered = false;
        try
        {
            ct.ThrowIfCancellationRequested();
            await _globalProfileLoadingSemaphore.WaitAsync(ct);
            entered = true;

            if (_profileLoaded) return; // Already loaded, skip

            // Check cache first (valid for 30 seconds)
            if (_profileCache.ContainsKey(userId) && 
                _cacheTimestamps.ContainsKey(userId) && 
                DateTime.Now - _cacheTimestamps[userId] < TimeSpan.FromSeconds(30))
            {
                var cachedProfile = _profileCache[userId];
                Console.WriteLine($"[BenefactorProfile] Using cached profile for userId {userId}");
                LoadProfileFromData(cachedProfile);
                return;
            }

            // Load from database
            Console.WriteLine($"[BenefactorProfile] Loading profile from database for userId {userId}");
            var profile = await BenefactorProfileService.GetProfileByUserIdAsync(userId);
            ct.ThrowIfCancellationRequested();
            
            // Update cache
            _profileCache[userId] = profile;
            _cacheTimestamps[userId] = DateTime.Now;
            
            Console.WriteLine($"[BenefactorProfile] Profile loaded for userId {userId}: {(profile != null ? "found" : "null")}");
            LoadProfileFromData(profile);
        }
        catch (OperationCanceledException)
        {
            return;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading extended profile data: {ex.Message}");
            SetDefaultProfileValues();
            throw new InvalidOperationException($"Error loading profile data: {ex.Message}", ex);
        }
        finally
        {
            if (entered)
            {
                try { _globalProfileLoadingSemaphore.Release(); } catch (ObjectDisposedException) { }
            }
        }
    }

    private void LoadProfileFromData(Models.BenefactorProfile? profile)
    {
        if (profile != null)
        {
            // Personal Info
            AdminFirstName = profile.AdminFirstName ?? "";
            AdminMiddleName = profile.AdminMiddleName ?? "";
            AdminLastName = profile.AdminLastName ?? "";
            FullName = !string.IsNullOrWhiteSpace(profile.AdminFullName) ? profile.AdminFullName : $"{profile.AdminFirstName} {profile.AdminMiddleName} {profile.AdminLastName}".Trim();
            Sex = profile.Sex ?? "Male";
            Nationality = profile.Nationality ?? "";
            BirthDate = profile.BirthDate ?? DateTime.Now;
            ContactNumber = profile.ContactNumber ?? "";
            Address = profile.Address ?? "";
            ProfilePicture = !string.IsNullOrWhiteSpace(profile.Logo) ? profile.Logo : "https://via.placeholder.com/120";

            // Benefactor Info
            BenefactorOrganizationName = profile.OrganizationName ?? "";
            BenefactorOrganizationAddress = profile.Address ?? "";
            BenefactorContactNumber = profile.ContactNumber ?? "";
            BenefactorEmail = profile.ContactEmail ?? "";

            // Document paths
            BenefactorIdDocumentPath = profile.BenefactorIdDocumentPath ?? "";
            AccreditationDocumentPath = profile.AccreditationDocumentPath ?? "";

            Console.WriteLine($"[BenefactorProfile] Profile data loaded successfully for {AdminFirstName} {AdminLastName}");
        }
        else
        {
            // If profile is null, log and set fields to blank/default
            Console.WriteLine($"[BenefactorProfile] No profile found, using defaults");
            SetDefaultProfileValues();
        }
    }

    private void SetDefaultProfileValues()
    {
        AdminFirstName = "";
        AdminMiddleName = "";
        AdminLastName = "";
        FullName = "Benefactor User";
        Sex = "Male";
        Nationality = "";
        BirthDate = DateTime.Now;
        ContactNumber = "";
        Address = "";
        ProfilePicture = "https://via.placeholder.com/120";
        BenefactorOrganizationName = "";
        BenefactorOrganizationAddress = "";
        BenefactorContactNumber = "";
        BenefactorEmail = "";
        BenefactorIdDocumentPath = "";
        AccreditationDocumentPath = "";
    }

    // Validation methods (similar to Institution profile)
    private bool ValidatePersonalField(string fieldName, string value, string fieldDisplayName)
    {
        ValidationErrors.Remove(fieldName);
        
        switch (fieldName)
        {
            case "AdminFirstName":
            case "AdminLastName":
                if (string.IsNullOrWhiteSpace(value))
                {
                    ValidationErrors[fieldName] = $"{fieldDisplayName} is required.";
                    return false;
                }
                if (!IsValidName(value))
                {
                    ValidationErrors[fieldName] = $"{fieldDisplayName} should only contain letters, spaces, hyphens, and apostrophes.";
                    return false;
                }
                if (value.Length > 50)
                {
                    ValidationErrors[fieldName] = $"{fieldDisplayName} cannot exceed 50 characters.";
                    return false;
                }
                break;
                
            case "AdminMiddleName":
                if (!string.IsNullOrWhiteSpace(value) && !IsValidName(value))
                {
                    ValidationErrors[fieldName] = $"{fieldDisplayName} should only contain letters, spaces, hyphens, and apostrophes.";
                    return false;
                }
                if (!string.IsNullOrWhiteSpace(value) && value.Length > 50)
                {
                    ValidationErrors[fieldName] = $"{fieldDisplayName} cannot exceed 50 characters.";
                    return false;
                }
                break;
                
            case "ContactNumber":
                if (string.IsNullOrWhiteSpace(value))
                {
                    ValidationErrors[fieldName] = "Contact Number is required.";
                    return false;
                }
                if (!IsValidPhoneNumber(value))
                {
                    ValidationErrors[fieldName] = "Phone number should only contain numbers, spaces, hyphens, plus signs, and parentheses.";
                    return false;
                }
                break;
                
            case "Nationality":
                if (!string.IsNullOrWhiteSpace(value) && !IsValidName(value))
                {
                    ValidationErrors[fieldName] = "Nationality should only contain letters and spaces.";
                    return false;
                }
                if (!string.IsNullOrWhiteSpace(value) && value.Length > 50)
                {
                    ValidationErrors[fieldName] = "Nationality cannot exceed 50 characters.";
                    return false;
                }
                break;
                
            case "Address":
                if (!string.IsNullOrWhiteSpace(value) && value.Length > 200)
                {
                    ValidationErrors[fieldName] = "Address cannot exceed 200 characters.";
                    return false;
                }
                break;
        }
        
        return true;
    }
    
    private bool ValidateBenefactorField(string fieldName, string value, string fieldDisplayName)
    {
        BenefactorValidationErrors.Remove(fieldName);
        
        switch (fieldName)
        {
            case "BenefactorOrganizationName":
                if (string.IsNullOrWhiteSpace(value))
                {
                    BenefactorValidationErrors[fieldName] = "Organization Name is required.";
                    return false;
                }
                if (!IsValidOrganizationName(value))
                {
                    BenefactorValidationErrors[fieldName] = "Organization name contains invalid characters.";
                    return false;
                }
                if (value.Length > 150)
                {
                    BenefactorValidationErrors[fieldName] = "Organization name cannot exceed 150 characters.";
                    return false;
                }
                break;
                
            case "BenefactorOrganizationAddress":
                if (string.IsNullOrWhiteSpace(value))
                {
                    BenefactorValidationErrors[fieldName] = "Organization Address is required.";
                    return false;
                }
                if (value.Length > 255)
                {
                    BenefactorValidationErrors[fieldName] = "Organization address cannot exceed 255 characters.";
                    return false;
                }
                break;
                
            case "BenefactorContactNumber":
                if (!string.IsNullOrWhiteSpace(value) && !IsValidPhoneNumber(value))
                {
                    BenefactorValidationErrors[fieldName] = "Organization contact number format is invalid.";
                    return false;
                }
                break;
                
            case "BenefactorEmail":
                if (!string.IsNullOrWhiteSpace(value) && !IsValidEmail(value))
                {
                    BenefactorValidationErrors[fieldName] = "Organization email format is invalid.";
                    return false;
                }
                if (!string.IsNullOrWhiteSpace(value) && value.Length > 100)
                {
                    BenefactorValidationErrors[fieldName] = "Organization email cannot exceed 100 characters.";
                    return false;
                }
                break;
        }
        
        return true;
    }
    
    private bool IsValidName(string name)
    {
        if (string.IsNullOrWhiteSpace(name)) return false;
        // Allow letters, spaces, hyphens, apostrophes, and periods
        return System.Text.RegularExpressions.Regex.IsMatch(name.Trim(), @"^[a-zA-Z\s\-'\.]+$");
    }
    
    private bool IsValidPhoneNumber(string phone)
    {
        if (string.IsNullOrWhiteSpace(phone)) return true; // Optional field
        // Allow digits, spaces, hyphens, plus, parentheses
        var cleanPhone = System.Text.RegularExpressions.Regex.Replace(phone, @"[\s\-\+\(\)]", "");
        return System.Text.RegularExpressions.Regex.IsMatch(cleanPhone, @"^\d{7,15}$"); // 7-15 digits
    }
    
    private bool IsValidEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email)) return true;
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }
    
    private bool IsValidOrganizationName(string name)
    {
        if (string.IsNullOrWhiteSpace(name)) return true;
        // Allow letters, numbers, spaces, common punctuation for organization names
        return System.Text.RegularExpressions.Regex.IsMatch(name.Trim(), @"^[a-zA-Z0-9\s\-'\.&,()]+$");
    }
    
    private bool ValidateAllPersonalFields()
    {
        IsValidating = true;
        ValidationErrors.Clear();
        
        var isValid = true;
        
        // Validate required fields
        isValid &= ValidatePersonalField("AdminFirstName", AdminFirstName, "First Name");
        isValid &= ValidatePersonalField("AdminLastName", AdminLastName, "Last Name");
        isValid &= ValidatePersonalField("ContactNumber", ContactNumber, "Contact Number");
        
        // Validate optional fields
        ValidatePersonalField("AdminMiddleName", AdminMiddleName, "Middle Name");
        ValidatePersonalField("Nationality", Nationality, "Nationality");
        ValidatePersonalField("Address", Address, "Address");
        
        // Additional business logic validations
        if (!string.IsNullOrWhiteSpace(ContactNumber) && ContactNumber.Length < 7)
        {
            ValidationErrors["ContactNumber"] = "Contact number must be at least 7 digits.";
            isValid = false;
        }
        
        // Age validation for birth date
        if (BirthDate != DateTime.MinValue)
        {
            var age = DateTime.Now.Year - BirthDate.Year;
            if (DateTime.Now.DayOfYear < BirthDate.DayOfYear) age--;
            
            if (age < 18 || age > 100)
            {
                ValidationErrors["BirthDate"] = "Age must be between 18 and 100 years for benefactor administrators.";
                isValid = false;
            }
        }
        
        return isValid;
    }
    
    private bool ValidateAllBenefactorFields()
    {
        BenefactorValidationErrors.Clear();
        
        var isValid = true;
        
        // Validate required fields
        isValid &= ValidateBenefactorField("BenefactorOrganizationName", BenefactorOrganizationName, "Organization Name");
        isValid &= ValidateBenefactorField("BenefactorOrganizationAddress", BenefactorOrganizationAddress, "Organization Address");
        
        // Validate optional fields
        ValidateBenefactorField("BenefactorContactNumber", BenefactorContactNumber, "Organization Contact Number");
        ValidateBenefactorField("BenefactorEmail", BenefactorEmail, "Organization Email");
        
        return isValid;
    }
    
    private string GetPersonalValidationErrorClass(string fieldName)
    {
        return ValidationErrors.ContainsKey(fieldName) ? "is-invalid" : "";
    }
    
    private string GetBenefactorValidationErrorClass(string fieldName)
    {
        return BenefactorValidationErrors.ContainsKey(fieldName) ? "is-invalid" : "";
    }
    
    private string GetPersonalValidationMessage(string fieldName)
    {
        return ValidationErrors.TryGetValue(fieldName, out var error) ? error : "";
    }
    
    private string GetBenefactorValidationMessage(string fieldName)
    {
        return BenefactorValidationErrors.TryGetValue(fieldName, out var error) ? error : "";
    }

    // Auto-dismiss notification helper methods
    private void SetErrorMessageWithTimer(string message)
    {
        _errorMessage = message;
        _errorTimer?.Dispose();
        _errorTimer = new System.Threading.Timer(_ => 
        {
            _errorMessage = "";
            InvokeAsync(StateHasChanged);
        }, null, TimeSpan.FromSeconds(5), Timeout.InfiniteTimeSpan);
    }

    private void SetSuccessMessageWithTimer(string message)
    {
        _successMessage = message;
        _successTimer?.Dispose();
        _successTimer = new System.Threading.Timer(_ => 
        {
            _successMessage = "";
            InvokeAsync(StateHasChanged);
        }, null, TimeSpan.FromSeconds(5), Timeout.InfiniteTimeSpan);
    }

    private void SetBenefactorErrorMessageWithTimer(string message)
    {
        _benefactorErrorMessage = message;
        _benefactorErrorTimer?.Dispose();
        _benefactorErrorTimer = new System.Threading.Timer(_ => 
        {
            _benefactorErrorMessage = "";
            InvokeAsync(StateHasChanged);
        }, null, TimeSpan.FromSeconds(5), Timeout.InfiniteTimeSpan);
    }

    private void SetBenefactorSuccessMessageWithTimer(string message)
    {
        _benefactorSuccessMessage = message;
        _benefactorSuccessTimer?.Dispose();
        _benefactorSuccessTimer = new System.Threading.Timer(_ => 
        {
            _benefactorSuccessMessage = "";
            InvokeAsync(StateHasChanged);
        }, null, TimeSpan.FromSeconds(5), Timeout.InfiniteTimeSpan);
    }

    // Document viewing methods
    private async Task ViewBenefactorIdDocument()
    {
        await ViewDocument(BenefactorIdDocumentPath, "Benefactor ID Document");
    }

    private async Task ViewAccreditationDocument()
    {
        await ViewDocument(AccreditationDocumentPath, "Accreditation Document");
    }

    private async Task ViewDocument(string documentPath, string documentName)
    {
        if (string.IsNullOrWhiteSpace(documentPath))
        {
            SetErrorMessageWithTimer($"{documentName} is not available.");
            return;
        }

        try
        {
            // Generate SAS URL for the document
            var sasUrl = BlobStorageService.GetDocumentSasUrlFromBlobUrl(documentPath);
            
            // Open document in new tab
            await JSRuntime.InvokeVoidAsync("open", sasUrl, "_blank");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error viewing {documentName}: {ex.Message}");
            SetErrorMessageWithTimer($"Error opening {documentName}. Please try again.");
        }
    }

    public void Dispose()
    {
        _errorTimer?.Dispose();
        _successTimer?.Dispose();
        _benefactorErrorTimer?.Dispose();
        _benefactorSuccessTimer?.Dispose();
        // Do not dispose semaphores here. Disposing a SemaphoreSlim while there are
        // in-flight async operations that will call Release() can cause
        // ObjectDisposedException. SemaphoreSlim is a managed resource and can
        // safely be left for the GC to clean up.
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            _cts.Cancel();
            if (_loadTask != null)
            {
                try { await _loadTask; } catch (OperationCanceledException) { }
                catch (Exception ex) { Console.WriteLine($"Exception while awaiting load task during DisposeAsync: {ex.Message}"); }
            }
        }
        finally
        {
            _cts.Dispose();
        }
    }

    // Methods
    private void ToggleEditMode()
    {
        IsEditMode = !IsEditMode;
        if (!IsEditMode)
        {
            // Clear validation errors when canceling edit mode
            ValidationErrors.Clear();
            _errorMessage = string.Empty;
            _successMessage = string.Empty;
        }
    }

    private async Task SaveProfile()
    {
        var ct = _cts.Token;
        // Prevent concurrent saves using semaphore with timeout
        if (!await _savingSemaphore.WaitAsync(TimeSpan.FromSeconds(10), ct))
        {
            SetErrorMessageWithTimer("Another save operation is in progress. Please wait and try again.");
            return;
        }
        
        try
        {
            // Clear previous messages
            _errorMessage = string.Empty;
            _successMessage = string.Empty;
            
            // Step 1: Validate all fields before proceeding
            if (!ValidateAllPersonalFields())
            {
                SetErrorMessageWithTimer("Please correct the validation errors before saving.");
                StateHasChanged();
                return;
            }
            
            Console.WriteLine("Starting SaveProfile...");
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);
            if (user == null)
            {
                SetErrorMessageWithTimer("User session expired. Please login again.");
                return;
            }

            Console.WriteLine($"User found: {user.Id}");
            
            // Create a separate context for this operation
            Models.BenefactorProfile? profile;
            try
            {
                profile = await BenefactorProfileService.GetProfileByUserIdAsync(user.Id);
                ct.ThrowIfCancellationRequested();
            }
            catch (OperationCanceledException)
            {
                return;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error getting profile: {ex.Message}");
                SetErrorMessageWithTimer("Error accessing profile data. Please try again.");
                return;
            }

            if (profile == null)
            {
                Console.WriteLine("Creating new profile...");
                profile = new Models.BenefactorProfile
                {
                    UserId = user.Id,
                    AdminFirstName = AdminFirstName.Trim(),
                    AdminMiddleName = string.IsNullOrWhiteSpace(AdminMiddleName) ? null : AdminMiddleName.Trim(),
                    AdminLastName = AdminLastName.Trim(),
                    OrganizationName = BenefactorOrganizationName ?? "Default Organization"
                };
            }
            else
            {
                Console.WriteLine("Updating existing profile...");
            }

            // Update profile fields with trimmed and sanitized values
            profile.AdminFirstName = AdminFirstName?.Trim() ?? "";
            profile.AdminMiddleName = string.IsNullOrWhiteSpace(AdminMiddleName) ? null : AdminMiddleName.Trim();
            profile.AdminLastName = AdminLastName?.Trim() ?? "";
            profile.Sex = Sex;
            profile.Nationality = string.IsNullOrWhiteSpace(Nationality) ? null : Nationality.Trim();
            profile.BirthDate = BirthDate;
            profile.ContactNumber = string.IsNullOrWhiteSpace(ContactNumber) ? null : System.Text.RegularExpressions.Regex.Replace(ContactNumber.Trim(), @"[\s\-\(\)]", "");
            profile.Address = string.IsNullOrWhiteSpace(Address) ? null : Address.Trim();
            profile.OrganizationName = BenefactorOrganizationName ?? "Default Organization";

            // Handle file upload with additional validation
            if (UploadedProfileImage != null)
            {
                // Validate file type
                var allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif" };
                var fileExtension = Path.GetExtension(UploadedProfileImage.Name).ToLower();
                
                if (!allowedExtensions.Contains(fileExtension))
                {
                    SetErrorMessageWithTimer("Profile image must be a JPG, PNG, or GIF file.");
                    return;
                }
                
                if (UploadedProfileImage.Size > 10 * 1024 * 1024)
                {
                    SetErrorMessageWithTimer("Profile image exceeds the 10MB size limit. Please choose a smaller file.");
                    return;
                }

                try
                {
                    // Try to delete old profile picture from Azure Blob Storage if it exists
                    if (!string.IsNullOrWhiteSpace(ProfilePicture) && 
                        ProfilePicture != "https://via.placeholder.com/120" && 
                        ProfilePicture.Contains("blob.core.windows.net"))
                    {
                        var oldBlobFileName = BlobStorageService.ExtractBlobFileName(ProfilePicture);
                        if (!string.IsNullOrWhiteSpace(oldBlobFileName))
                        {
                            try
                            {
                                var deleted = await BlobStorageService.DeletePhotoAsync(oldBlobFileName);
                                Console.WriteLine($"Old profile picture deletion result: {deleted}");
                            }
                            catch (Exception deleteEx)
                            {
                                Console.WriteLine($"Warning: Could not delete old profile picture '{oldBlobFileName}': {deleteEx.Message}");
                                // Continue with upload even if deletion fails
                            }
                        }
                    }

                    // Upload new profile picture to Azure Blob Storage
                    var contentType = fileExtension switch
                    {
                        ".png" => "image/png",
                        ".gif" => "image/gif",
                        _ => "image/jpeg"
                    };

                    using var stream = UploadedProfileImage.OpenReadStream(10 * 1024 * 1024);
                    var blobUrl = await BlobStorageService.UploadProfilePictureAsync(stream, user.Id, "benefactor", fileExtension, contentType);
                    
                    profile.Logo = blobUrl;
                    ProfilePicture = profile.Logo;
                }
                catch (OperationCanceledException)
                {
                    return;
                }
                catch (Exception ex)
                {
                    SetErrorMessageWithTimer($"Error uploading profile picture: {ex.Message}");
                    return;
                }
            }
            else if (!string.IsNullOrWhiteSpace(ProfilePicture) && ProfilePicture != "https://via.placeholder.com/120")
            {
                profile.Logo = ProfilePicture;
            }

            Console.WriteLine("Calling SaveProfileAsync...");
            try
            {
                await BenefactorProfileService.SaveProfileAsync(profile);
                ct.ThrowIfCancellationRequested();
                Console.WriteLine("Profile saved successfully!");
                
                // Clear cache to force refresh
                _profileCache.Remove(user.Id);
                _cacheTimestamps.Remove(user.Id);
            }
            catch (OperationCanceledException)
            {
                return;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error saving profile to database: {ex.Message}");
                SetErrorMessageWithTimer("Error saving profile. Please try again.");
                return;
            }
            
            // Clear upload state and validation errors
            _previewProfilePicture = null;
            UploadedProfileImage = null;
            ValidationErrors.Clear();
            
            // Update UI properties directly to avoid concurrent DB calls
            AdminFirstName = profile.AdminFirstName ?? "";
            AdminMiddleName = profile.AdminMiddleName ?? "";
            AdminLastName = profile.AdminLastName ?? "";
            FullName = !string.IsNullOrWhiteSpace(profile.AdminFullName) ? profile.AdminFullName : $"{profile.AdminFirstName} {profile.AdminMiddleName} {profile.AdminLastName}".Trim();
            Sex = profile.Sex ?? "Male";
            Nationality = profile.Nationality ?? "";
            BirthDate = profile.BirthDate ?? DateTime.Now;
            ContactNumber = profile.ContactNumber ?? "";
            Address = profile.Address ?? "";
            if (!string.IsNullOrWhiteSpace(profile.Logo))
                ProfilePicture = profile.Logo;
            
            IsEditMode = false;
            
            // Show success message
            SetSuccessMessageWithTimer("Personal profile updated successfully!");
            
            Console.WriteLine("Benefactor profile updated successfully!");
        }
        catch (ArgumentException argEx)
        {
            Console.WriteLine($"Validation error: {argEx.Message}");
            SetErrorMessageWithTimer(argEx.Message);
        }
        catch (OperationCanceledException)
        {
            // Operation was cancelled due to component disposal; nothing to do
            return;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving profile: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            SetErrorMessageWithTimer("An unexpected error occurred while saving your profile. Please try again.");
        }
        finally
        {
            try { _savingSemaphore.Release(); } catch (ObjectDisposedException) { }
        }
    }

    private async Task OnProfileImageChange(InputFileChangeEventArgs e)
    {
        UploadedProfileImage = e.File;
        if (UploadedProfileImage != null)
        {
            if (UploadedProfileImage.Size > 10 * 1024 * 1024)
            {
                SetErrorMessageWithTimer("Profile image exceeds the 10MB size limit. Please choose a smaller file.");
                _previewProfilePicture = null;
                UploadedProfileImage = null;
                return;
            }
            
            // Validate file type
            var allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif" };
            var fileExtension = Path.GetExtension(UploadedProfileImage.Name).ToLower();
            if (!allowedExtensions.Contains(fileExtension))
            {
                SetErrorMessageWithTimer("Profile image must be a JPG, PNG, or GIF file.");
                _previewProfilePicture = null;
                UploadedProfileImage = null;
                return;
            }
            
            using var ms = new MemoryStream();
            await UploadedProfileImage.OpenReadStream(10 * 1024 * 1024).CopyToAsync(ms);
            var base64 = Convert.ToBase64String(ms.ToArray());
            var mime = fileExtension == ".png" ? "image/png" : "image/jpeg";
            _previewProfilePicture = $"data:{mime};base64,{base64}";
        }
    }

    private async Task RemoveProfileImageAsync()
    {
        try
        {
            // Try to delete old profile picture from Azure Blob Storage if it exists
            if (!string.IsNullOrWhiteSpace(ProfilePicture) && 
                ProfilePicture != "https://via.placeholder.com/120" && 
                ProfilePicture.Contains("blob.core.windows.net"))
            {
                var oldBlobFileName = BlobStorageService.ExtractBlobFileName(ProfilePicture);
                if (!string.IsNullOrWhiteSpace(oldBlobFileName))
                {
                    try
                    {
                        var deleted = await BlobStorageService.DeletePhotoAsync(oldBlobFileName);
                        Console.WriteLine($"Profile picture deletion result: {deleted}");
                    }
                    catch (Exception deleteEx)
                    {
                        Console.WriteLine($"Warning: Could not delete profile picture '{oldBlobFileName}': {deleteEx.Message}");
                        // Continue with removal even if deletion fails
                    }
                }
            }

            // Set to blank avatar
            ProfilePicture = "https://via.placeholder.com/120";
            _previewProfilePicture = null;
            UploadedProfileImage = null;

            // Update in DB
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);
            if (user != null)
            {
                try
                {
                    var profile = await BenefactorProfileService.GetProfileByUserIdAsync(user.Id);
                    if (profile != null)
                    {
                        profile.Logo = ProfilePicture;
                        await BenefactorProfileService.SaveProfileAsync(profile);
                        
                        // Clear cache to force refresh
                        _profileCache.Remove(user.Id);
                        _cacheTimestamps.Remove(user.Id);
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error updating profile in database: {ex.Message}");
                    SetErrorMessageWithTimer("Error updating profile. Please try again.");
                    return;
                }
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing profile picture: {ex.Message}");
            SetErrorMessageWithTimer($"Error removing profile picture: {ex.Message}");
        }
    }
} *@
