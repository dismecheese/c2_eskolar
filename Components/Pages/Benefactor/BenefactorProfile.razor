@page "/dashboard/benefactor/profile"
@attribute [Authorize(Roles = "Benefactor")]
@layout Layout.BenefactorDashLayout
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> UserManager
@inject BenefactorProfileService BenefactorProfileService
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Forms

<div class="container-fluid p-5 benefactor-profile-bg">
    <div class="row mb-4">
        <div class="col-12">
            <h2 class="mb-0 profile-title">My Profile</h2>
        </div>
    </div>
    <div class="d-flex justify-content-end mb-2 gap-2">
        @if (IsEditMode)
        {
            <button class="btn btn-danger btn-md profile-btn" @onclick="ToggleEditMode">
                <i class="fas fa-times me-2"></i>Cancel
            </button>
            <button class="btn btn-success btn-md profile-btn" @onclick="SaveProfile">
                <i class="fas fa-save me-2"></i>Save
            </button>
        }
        else
        {
            <button class="btn btn-primary btn-md profile-btn" @onclick="ToggleEditMode">
                <i class="fas fa-edit me-2"></i>Edit Profile
            </button>
        }
    </div>
    <div class="row">
        <div class="col-lg-4 mb-4">
            <div class="card shadow-sm mb-4">
                <div class="card-body text-center">
                    <div class="position-relative d-inline-block mb-3">
                        @if (IsEditMode && !string.IsNullOrWhiteSpace(_previewProfilePicture))
                        {
                            <img src="@_previewProfilePicture" class="profile-image shadow" alt="Profile Preview" width="120" height="120" />
                        }
                        else if (string.IsNullOrWhiteSpace(ProfilePicture) || ProfilePicture == "https://via.placeholder.com/120")
                        {
                            <!-- Blank SVG avatar (same as student profile) -->
                            <svg width="120" height="120" viewBox="0 0 120 120" fill="none" xmlns="http://www.w3.org/2000/svg" class="profile-image">
                                <circle cx="60" cy="60" r="60" fill="#eaf1fb"/>
                                <circle cx="60" cy="54" r="28" fill="#cfd8dc"/>
                                <ellipse cx="60" cy="94" rx="36" ry="18" fill="#cfd8dc"/>
                            </svg>
                        }
                        else
                        {
                            <img src="@ProfilePicture" class="profile-image shadow" alt="Profile Picture" width="120" height="120" />
                        }
                        @if (IsEditMode)
                        {
                            <div class="d-flex flex-row justify-content-center gap-2 mt-2">
                                <label class="btn btn-sm btn-primary rounded-circle profile-img-btn profile-upload-label">
                                    <i class="fas fa-camera profile-upload-icon"></i>
                                    <InputFile OnChange="OnProfileImageChange" accept="image/*" style="display:none;" />
                                </label>
                                <button class="btn btn-sm btn-danger rounded-circle profile-img-btn" type="button" title="Remove Profile Picture" @onclick="RemoveProfileImageAsync">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        }
                    </div>
                    <h4 class="card-title mb-1 profile-name">@FullName</h4>
                    <div class="text-muted mb-2">@ContactEmail</div>
                    <div class="d-flex flex-column align-items-center gap-2">
                        <span class="badge profile-badge-status @(Status == "Active" ? "profile-badge-active" : Status == "Pending" ? "profile-badge-pending" : Status == "On Leave" ? "profile-badge-onleave" : Status == "Graduated" ? "profile-badge-graduated" : "")">@Status</span>
                    </div>
                    <div class="text-start mt-3">
                        <div class="mb-2"><span class="profile-label-bold">Role:</span> <span>@Role</span></div>
                        <div class="mb-2"><span class="profile-label-bold">Phone:</span> <span>@ContactNumber</span></div>
                        <div class="mb-2"><span class="profile-label-bold">Location:</span> <span>@Address</span></div>
                        <div class="mb-0"><span class="profile-label-bold">Member since:</span> <span>@CreatedDate.ToString("MMM yyyy")</span></div>
                    </div>
                </div>
            </div>
            <div class="card shadow-sm">
                <div class="card-header bg-white d-flex align-items-center">
                    <span class="profile-verification-title">
                        <span class="profile-verification-icon">
                            <i class="fas fa-check-circle"></i>
                        </span>
                        Verification
                    </span>
                </div>
                <div class="card-body d-flex flex-column">
                    <div>
                        <div class="verification-item d-flex justify-content-between align-items-center mb-2">
                            <span class="profile-label-bold">Email</span>
                            @if (EmailVerified)
                            {
                                <span><i class="fas fa-check-circle profile-icon-verified"></i></span>
                            }
                            else

                            {
                                <span><i class="fas fa-clock profile-icon-pending"></i></span>
                            }
                        </div>
                        <div class="verification-item d-flex justify-content-between align-items-center mb-2">
                            <span class="profile-label-bold">Phone</span>
                            @if (PhoneVerified)
                            {
                                <span><i class="fas fa-check-circle profile-icon-verified"></i></span>
                            }
                            else
                            {
                                <span><i class="fas fa-clock profile-icon-pending"></i></span>
                            }
                        </div>
                        <div class="verification-item d-flex justify-content-between align-items-center mb-2">
                            <span class="profile-label-bold">Benefactor ID</span>
                            @if (StudentIdVerified)
                            {
                                <span><i class="fas fa-check-circle profile-icon-verified"></i></span>
                            }
                            else
                            {
                                <span><i class="fas fa-clock profile-icon-pending"></i></span>
                            }
                        </div>
                        <div class="verification-item d-flex justify-content-between align-items-center">
                            <span class="profile-label-bold">Accreditation</span>
                            @if (AcademicRecordsVerified)
                            {
                                <span><i class="fas fa-check-circle profile-icon-verified"></i></span>
                            }
                            else
                            {
                                <span><i class="fas fa-clock profile-icon-pending"></i></span>
                            }
                        </div>
                    </div>
                    <div class="flex-grow-1"></div>
                </div>
            </div>
        </div>
        <div class="col-lg-8">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-white">
                    <h5 class="mb-0"><i class="fas fa-user profile-header-icon me-2"></i>Personal Information</h5>
                </div>
                <div class="card-body">
                    @if (IsEditMode)
                    {
                        <div class="row mb-2">
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">First Name</label>
                                <input class="form-control" @bind="AdminFirstName" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Middle Name</label>
                                <input class="form-control" @bind="AdminMiddleName" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Last Name</label>
                                <input class="form-control" @bind="AdminLastName" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Sex</label>
                                <select class="form-control" @bind="Sex">
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Nationality</label>
                                <input class="form-control" @bind="Nationality" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Birth Date</label>
                                <input type="date" class="form-control" @bind="BirthDate" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Contact Number</label>
                                <input class="form-control" @bind="ContactNumber" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Email</label>
                                <input class="profile-email-readonly" value="@ContactEmail" readonly />
                            </div>
                            <div class="col-md-12 mb-3">
                                <label class="profile-label-bold">Address</label>
                                <input class="form-control" @bind="Address" />
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row mb-2">
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">First Name</label>
                                <div>@AdminFirstName</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Middle Name</label>
                                <div>@AdminMiddleName</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Last Name</label>
                                <div>@AdminLastName</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Sex</label>
                                <div>@Sex</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Nationality</label>
                                <div>@Nationality</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Birth Date</label>
                                <div>@BirthDate.ToShortDateString()</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Contact Number</label>
                                <div>@ContactNumber</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Email</label>
                                <div>@ContactEmail</div>
                            </div>
                            <div class="col-md-12 mb-3">
                                <label class="profile-label-bold">Address</label>
                                <div>@Address</div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="d-flex justify-content-end mb-2 gap-2">
                @if (IsBenefactorEditMode)
                {
                    <button class="btn btn-danger btn-md profile-btn" @onclick="ToggleBenefactorEditMode">
                        <i class="fas fa-times me-2"></i>Cancel
                    </button>
                    <button class="btn btn-success btn-md profile-btn" @onclick="SaveBenefactorInfo">
                        <i class="fas fa-save me-2"></i>Save
                    </button>
                }
                else
                {
                    <button class="btn btn-primary btn-md profile-btn" @onclick="ToggleBenefactorEditMode">
                        <i class="fas fa-edit me-2"></i>Edit Benefactor Profile
                    </button>
                }
            </div>
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-white d-flex align-items-center profile-card-header">
                    <span class="profile-header-icon me-2"><i class="fas fa-hand-holding-usd"></i></span>
                    <span class="profile-section-title">Benefactor Information</span>
                </div>
                <div class="card-body">
                    @if (IsBenefactorEditMode)
                    {
                        <div class="row mb-2">
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Organization Name</label>
                                <input type="text" class="form-control" @bind="BenefactorOrganizationName" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Organization Address</label>
                                <input type="text" class="form-control" @bind="BenefactorOrganizationAddress" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Contact Number</label>
                                <input type="text" class="form-control" @bind="BenefactorContactNumber" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Email</label>
                                <input type="email" class="form-control" @bind="BenefactorEmail" />
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row mb-2">
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Organization Name</label>
                                <div>@(string.IsNullOrWhiteSpace(BenefactorOrganizationName) ? "" : BenefactorOrganizationName)</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Organization Address</label>
                                <div>@(string.IsNullOrWhiteSpace(BenefactorOrganizationAddress) ? "" : BenefactorOrganizationAddress)</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Contact Number</label>
                                <div>@(string.IsNullOrWhiteSpace(BenefactorContactNumber) ? "" : BenefactorContactNumber)</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Email</label>
                                <div>@(string.IsNullOrWhiteSpace(BenefactorEmail) ? "" : BenefactorEmail)</div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool IsEditMode = false;
    private bool IsBenefactorEditMode = false;
    private string BenefactorOrganizationName = "";
    private string BenefactorOrganizationAddress = "";
    private string BenefactorContactNumber = "";
    private string BenefactorEmail = "";
    private string AdminFirstName = "";
    private string AdminMiddleName = "";
    private string AdminLastName = "";
    private string Sex = "Male";
    private string Nationality = "";
    private DateTime BirthDate = DateTime.Now;
    private string ContactNumber = "";
    private string ContactEmail = "";
    private string Address = "";
    private string FullName = "";
    private string Role = "Benefactor";
    private string Status = "Active";
    private DateTime CreatedDate = DateTime.Now;
    private string ProfilePicture = "https://via.placeholder.com/120";
    private bool EmailVerified = false;
    private bool PhoneVerified = false;
    private bool StudentIdVerified = false;
    private bool AcademicRecordsVerified = false;
    private bool IsTwoFactorEnabled = false;
    private DateTime LastLogin = DateTime.Now;
    private int ScholarshipsReceived = 0;
    private int Applications = 0;
    private string GPA = "0.00";
    private IBrowserFile? UploadedProfileImage;
    private string? _previewProfilePicture;
    private string PreviewProfilePicture => _previewProfilePicture ?? ProfilePicture;

    private void ToggleEditMode() => IsEditMode = !IsEditMode;
    private void ToggleBenefactorEditMode() => IsBenefactorEditMode = !IsBenefactorEditMode;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
        StateHasChanged();
    }

    private async Task LoadUserData()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                var user = await UserManager.GetUserAsync(authState.User);
                if (user != null)
                {
                    // Load basic Identity data
                    ContactEmail = user.Email ?? "";
                    FullName = user.UserName ?? "Benefactor User";
                    
                    // Check email confirmation status
                    EmailVerified = await UserManager.IsEmailConfirmedAsync(user);
                    
                    // Set creation date from user registration
                    CreatedDate = user.LockoutEnd?.DateTime ?? DateTime.Now;
                    
                    // Set last login (placeholder)
                    LastLogin = DateTime.Now.AddHours(-1);
                    
                    // Load extended profile data from custom tables
                    await LoadExtendedProfileData(user.Id);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user data: {ex.Message}");
            // Only set default values if we don't already have data
            if (string.IsNullOrWhiteSpace(FullName))
                FullName = "Benefactor User";
        }
    }

    private async Task LoadExtendedProfileData(string userId)
    {
        try
        {
            var profile = await BenefactorProfileService.GetProfileByUserIdAsync(userId);
            if (profile != null)
            {
                AdminFirstName = profile.AdminFirstName ?? "";
                AdminMiddleName = profile.AdminMiddleName ?? "";
                AdminLastName = profile.AdminLastName ?? "";
                FullName = profile.AdminFullName ?? FullName;
                Sex = profile.Sex ?? "Male";
                Nationality = profile.Nationality ?? "";
                BirthDate = profile.BirthDate ?? DateTime.Now;
                ContactNumber = profile.ContactNumber ?? "";
                Address = profile.Address ?? "";
                ProfilePicture = !string.IsNullOrWhiteSpace(profile.Logo) ? profile.Logo : "https://via.placeholder.com/120";
                
                // Load benefactor-specific organization data (separate from personal email)
                BenefactorOrganizationName = profile.OrganizationName ?? "";
                BenefactorOrganizationAddress = profile.Address ?? "";
                BenefactorContactNumber = profile.ContactNumber ?? "";
                BenefactorEmail = profile.ContactEmail ?? "";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading extended profile data: {ex.Message}");
        }
    }

    private async Task SaveProfile()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);
            
            if (user != null)
            {
                // Get or create benefactor profile
                var profile = await BenefactorProfileService.GetProfileByUserIdAsync(user.Id);
                if (profile == null)
                {
                    profile = new Models.BenefactorProfile
                    {
                        UserId = user.Id,
                        AdminFirstName = AdminFirstName,
                        AdminLastName = AdminLastName,
                        OrganizationName = BenefactorOrganizationName ?? "Default Organization"
                        // Don't set ContactEmail here - that's for organization contact, not user's personal email
                    };
                }

                // Update profile fields
                profile.AdminFirstName = AdminFirstName;
                profile.AdminMiddleName = AdminMiddleName;
                profile.AdminLastName = AdminLastName;
                profile.Sex = Sex;
                profile.Nationality = Nationality;
                profile.BirthDate = BirthDate;
                profile.ContactNumber = ContactNumber;
                // Don't save the user's identity email to ContactEmail - that's for organization contact
                profile.Address = Address;
                profile.OrganizationName = BenefactorOrganizationName ?? "Default Organization";

                // Handle file upload
                if (UploadedProfileImage != null)
                {
                    if (UploadedProfileImage.Size <= 5 * 1024 * 1024)
                    {
                        var fileName = $"benefactor_profile_{Guid.NewGuid()}{Path.GetExtension(UploadedProfileImage.Name)}";
                        var dirPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/images/profiles");
                        if (!Directory.Exists(dirPath))
                        {
                            Directory.CreateDirectory(dirPath);
                        }
                        var savePath = Path.Combine(dirPath, fileName);
                        await using (var stream = File.Create(savePath))
                        {
                            await UploadedProfileImage.OpenReadStream(5 * 1024 * 1024).CopyToAsync(stream);
                        }
                        var webPath = $"/images/profiles/{fileName}";
                        profile.Logo = webPath;
                        ProfilePicture = webPath;
                    }
                }
                else if (!string.IsNullOrWhiteSpace(ProfilePicture) && ProfilePicture != "https://via.placeholder.com/120")
                {
                    // Keep existing profile picture if no new one uploaded
                    profile.Logo = ProfilePicture;
                }

                await BenefactorProfileService.SaveProfileAsync(profile);
                
                // Clear preview and uploaded image before reloading
                _previewProfilePicture = null;
                UploadedProfileImage = null;
                
                // Reload profile data to get the saved profile picture
                await LoadExtendedProfileData(user.Id);
                
                IsEditMode = false;
                
                // Force UI update
                StateHasChanged();
                
                Console.WriteLine("Benefactor profile updated successfully!");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving profile: {ex.Message}");
        }
    }

    private async Task SaveBenefactorInfo() 
    { 
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);
            
            if (user != null)
            {
                var profile = await BenefactorProfileService.GetProfileByUserIdAsync(user.Id);
                if (profile != null)
                {
                    // Update organization-specific fields only
                    profile.OrganizationName = BenefactorOrganizationName ?? "Default Organization";
                    profile.Address = BenefactorOrganizationAddress;
                    profile.ContactNumber = BenefactorContactNumber;
                    profile.ContactEmail = BenefactorEmail; // This is organization email, not personal
                    
                    await BenefactorProfileService.SaveProfileAsync(profile);
                    
                    // Reload data to reflect changes
                    await LoadExtendedProfileData(user.Id);
                    
                    Console.WriteLine("Benefactor organization info updated successfully!");
                }
            }
            IsBenefactorEditMode = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving benefactor info: {ex.Message}");
            IsBenefactorEditMode = false;
        }
    }

    private async Task OnProfileImageChange(InputFileChangeEventArgs e)
    {
        UploadedProfileImage = e.File;
        if (UploadedProfileImage != null)
        {
            if (UploadedProfileImage.Size > 5 * 1024 * 1024)
            {
                // Optionally show error message (not implemented here)
                _previewProfilePicture = null;
                UploadedProfileImage = null;
                return;
            }
            using var ms = new MemoryStream();
            await UploadedProfileImage.OpenReadStream(5 * 1024 * 1024).CopyToAsync(ms);
            var base64 = Convert.ToBase64String(ms.ToArray());
            var ext = Path.GetExtension(UploadedProfileImage.Name).ToLower();
            var mime = ext == ".png" ? "image/png" : "image/jpeg";
            _previewProfilePicture = $"data:{mime};base64,{base64}";
        }
    }

    private async Task RemoveProfileImageAsync()
    {
        ProfilePicture = "https://via.placeholder.com/120";
        _previewProfilePicture = null;
        UploadedProfileImage = null;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        if (user != null)
        {
            var profile = await BenefactorProfileService.GetProfileByUserIdAsync(user.Id);
            if (profile != null)
            {
                profile.Logo = ProfilePicture;
                await BenefactorProfileService.SaveProfileAsync(profile);
            }
        }
        StateHasChanged();
    }
}
