@page "/dashboard/benefactor/scholarships/post"
@attribute [Authorize(Roles = "Benefactor")]
@layout Layout.BenefactorDashLayout

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using c2_eskolar.Data
@using c2_eskolar.Models
@using c2_eskolar.Services
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject InstitutionProfileService InstitutionProfileService

<PageTitle>Post Scholarship</PageTitle>

<div class="container my-5" style="max-width: 700px;">
    
    <h2 class="fw-bold mb-4" style="font-size:2.2rem;">Post a New Scholarship</h2>

    <!-- External Scholarship Information -->
    <div class="alert alert-info mb-4" role="alert">
        <div class="d-flex align-items-center">
            <span aria-hidden="true" class="me-2" style="font-size: 1.2rem;">üåê</span>
            <div>
                <strong>External Scholarship:</strong> As a benefactor, your scholarship will be posted as an <strong>external scholarship</strong>, making it open and accessible to all students across all institutions.
                <br/><small class="mt-1 d-block"><strong>Partnership Option:</strong> You can optionally partner with an institution, allowing them to also manage your scholarship.</small>
            </div>
        </div>
    </div>

    @if (isSubmitted)
    {
        <div class="alert alert-success mb-4" role="alert" aria-live="polite">
            <span aria-hidden="true">‚úÖ</span> Scholarship posted successfully! Redirecting...
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mb-4" role="alert" aria-live="assertive">
            <span aria-hidden="true">‚ùå</span> <span class="visually-hidden">Error:</span> @errorMessage
        </div>
    }

    <EditForm Model="@scholarship" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />

        <!-- Categorized Form Fields in Card Boxes -->
        <div class="row g-4">
            <!-- Basic Info -->
            <div class="col-12">
                <div class="card shadow-sm border-0 mb-3">
                    <div class="card-header-custom bg-primary text-white fw-bold">Basic Information</div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-12">
                                <label for="title" class="form-label fw-semibold" style="font-size:1.1rem;">Title</label>
                                <InputText id="title" class="form-control" @bind-Value="scholarship.Title" aria-required="true" aria-label="Scholarship Title" placeholder="e.g. Academic Excellence Scholarship" />
                                <ValidationMessage For="@(() => scholarship.Title)" class="text-danger small ms-1" />
                            </div>
                            <div class="col-12 col-md-6">
                                <label for="benefits" class="form-label fw-semibold">Benefits</label>
                                <InputText id="benefits" class="form-control" @bind-Value="scholarship.Benefits" aria-label="Benefits" placeholder="e.g. Full tuition, stipend, books" />
                                <ValidationMessage For="@(() => scholarship.Benefits)" class="text-danger small ms-1" />
                            </div>
                            <div class="col-12 col-md-6">
                                <label for="deadline" class="form-label fw-semibold">Application Deadline</label>
                                <InputDate id="deadline" class="form-control" @bind-Value="scholarship.ApplicationDeadline" aria-required="true" aria-label="Application Deadline" placeholder="Select deadline" />
                                <ValidationMessage For="@(() => scholarship.ApplicationDeadline)" class="text-danger small ms-1" />
                            </div>
                            <div class="col-12">
                                <label for="description" class="form-label fw-semibold">Description</label>
                                <InputTextArea id="description" class="form-control" rows="3" @bind-Value="scholarship.Description" aria-label="Description" placeholder="Describe the scholarship, its purpose, and any special notes..." />
                                <ValidationMessage For="@(() => scholarship.Description)" class="text-danger small ms-1" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Requirements -->
            <div class="col-12">
                <div class="card shadow-sm border-0 mb-3">
                    <div class="card-header-custom bg-success text-white fw-bold">Requirements</div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-12">
                                <label for="requirements" class="form-label fw-semibold">Requirements</label>
                                <InputTextArea id="requirements" class="form-control" rows="2" @bind-Value="scholarship.Requirements" aria-label="Requirements" placeholder="e.g. Must be a full-time student, leadership experience, etc." />
                                <ValidationMessage For="@(() => scholarship.Requirements)" class="text-danger small ms-1" />
                            </div>
                            <div class="col-12 col-md-4">
                                <label for="slots" class="form-label fw-semibold">Slots Available</label>
                                <InputNumber id="slots" class="form-control" @bind-Value="scholarship.SlotsAvailable" aria-label="Slots Available" placeholder="e.g. 10" />
                                <ValidationMessage For="@(() => scholarship.SlotsAvailable)" class="text-danger small ms-1" />
                            </div>
                            <div class="col-12 col-md-4">
                                <label for="gpa" class="form-label fw-semibold">Minimum GPA</label>
                                <InputNumber id="gpa" class="form-control" @bind-Value="scholarship.MinimumGPA" step="0.01" aria-label="Minimum GPA" placeholder="e.g. 3.50" />
                                <ValidationMessage For="@(() => scholarship.MinimumGPA)" class="text-danger small ms-1" />
                            </div>
                            <div class="col-12 col-md-4">
                                <label for="yearlevel" class="form-label fw-semibold">Required Year Level</label>
                                <InputNumber id="yearlevel" class="form-control" @bind-Value="scholarship.RequiredYearLevel" aria-label="Required Year Level" placeholder="e.g. 2 (for 2nd year)" />
                                <ValidationMessage For="@(() => scholarship.RequiredYearLevel)" class="text-danger small ms-1" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Eligibility -->
            <div class="col-12">
                <div class="card shadow-sm border-0 mb-3">
                    <div class="card-header-custom bg-info text-white fw-bold">Eligibility</div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-12 col-md-6">
                                <label for="course" class="form-label fw-semibold">Required Course</label>
                                <InputText id="course" class="form-control" @bind-Value="scholarship.RequiredCourse" aria-label="Required Course" placeholder="e.g. BS Computer Science" />
                                <ValidationMessage For="@(() => scholarship.RequiredCourse)" class="text-danger small ms-1" />
                            </div>
                            <div class="col-12 col-md-6">
                                <label for="university" class="form-label fw-semibold">Required University</label>
                                <InputText id="university" class="form-control" @bind-Value="scholarship.RequiredUniversity" aria-label="Required University" placeholder="e.g. University of the Philippines" />
                                <ValidationMessage For="@(() => scholarship.RequiredUniversity)" class="text-danger small ms-1" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Partnership (Optional) -->
            <div class="col-12">
                <div class="card shadow-sm border-0 mb-3">
                    <div class="card-header-custom bg-purple text-white fw-bold" style="background-color: #6f42c1 !important;">Partnership (Optional)</div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-12">
                                <div class="form-check mb-3">
                                    <input class="form-check-input" type="checkbox" id="enablePartnership" @bind="enablePartnership" />
                                    <label class="form-check-label fw-semibold" for="enablePartnership">
                                        Partner with an Institution
                                    </label>
                                    <div class="form-text text-muted">
                                        When you partner with an institution, they will also be able to manage this scholarship.
                                    </div>
                                </div>
                            </div>
                            @if (enablePartnership)
                            {
                                <div class="col-12">
                                    <label for="institution" class="form-label fw-semibold">Select Institution Partner</label>
                                    @if (availableInstitutions == null)
                                    {
                                        <div class="d-flex align-items-center">
                                            <div class="spinner-border spinner-border-sm me-2" role="status">
                                                <span class="visually-hidden">Loading...</span>
                                            </div>
                                            <span class="text-muted">Loading institutions...</span>
                                        </div>
                                    }
                                    else if (!availableInstitutions.Any())
                                    {
                                        <div class="alert alert-warning mb-0">
                                            <i class="bi bi-exclamation-triangle me-2"></i>
                                            No institutions are currently registered in the system. Institutions need to register first before partnerships can be formed.
                                        </div>
                                    }
                                    else
                                    {
                                        <InputSelect id="institution" class="form-select" @bind-Value="selectedInstitutionId" aria-label="Select Institution Partner">
                                            <option value="">-- Select an Institution --</option>
                                            @foreach (var institution in availableInstitutions)
                                            {
                                                <option value="@institution.InstitutionProfileId">
                                                    @(string.IsNullOrEmpty(institution.InstitutionName) ? "Unnamed Institution" : institution.InstitutionName) @(!string.IsNullOrEmpty(institution.InstitutionType) ? $"({institution.InstitutionType})" : "") @(institution.IsVerified ? "‚úì" : "")
                                                </option>
                                            }
                                        </InputSelect>
                                        <small class="text-muted mt-1">Found @availableInstitutions.Count institutions available for partnership</small>
                                        @if (!string.IsNullOrEmpty(selectedInstitutionId) && availableInstitutions.Any())
                                        {
                                            var selectedInst = availableInstitutions.FirstOrDefault(i => i.InstitutionProfileId.ToString() == selectedInstitutionId);
                                            if (selectedInst != null)
                                            {
                                                <div class="mt-2 p-2 bg-light rounded">
                                                    <small class="text-muted">
                                                        <strong>Selected:</strong> @(string.IsNullOrEmpty(selectedInst.InstitutionName) ? "Unnamed Institution" : selectedInst.InstitutionName)<br/>
                                                        <strong>Type:</strong> @(selectedInst.InstitutionType ?? "Not specified")<br/>
                                                        <strong>Status:</strong> <span class="@(selectedInst.IsVerified ? "text-success" : "text-warning")">
                                                            @(selectedInst.IsVerified ? "Verified ‚úì" : "Unverified")
                                                        </span>
                                                    </small>
                                                </div>
                                            }
                                        }
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Settings -->
            <div class="col-12">
                <div class="card shadow-sm border-0 mb-3">
                    <div class="card-header-custom bg-warning text-dark fw-bold">Settings</div>
                    <div class="card-body">
                        <div class="row g-3 align-items-center">
                            <div class="col-12">
                                <label for="externalurl" class="form-label fw-semibold">External Application URL <span class="text-muted">(optional)</span></label>
                                <InputText id="externalurl" class="form-control" @bind-Value="scholarship.ExternalApplicationUrl" aria-label="External Application URL" placeholder="e.g. https://apply.example.com" />
                                <ValidationMessage For="@(() => scholarship.ExternalApplicationUrl)" class="text-danger small ms-1" />
                            </div>
                            <!-- Removed Active and Internal Scholarship checkboxes as requested -->
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <button type="submit" class="btn btn-primary btn-lg mt-4" style="min-width:180px;outline:2px solid transparent;outline-offset:2px;">
            <span class="visually-hidden">Submit scholarship form</span>
            Post Scholarship
        </button>
    </EditForm>
</div>

@code {
    private Scholarship scholarship = new()
    {
        Title = "",
        Benefits = "",
        ApplicationDeadline = DateTime.Today.AddMonths(1),
        IsActive = true,
        IsInternal = false // Benefactor scholarships are ALWAYS external/open - accessible to all students
    };
    private bool isSubmitted = false;
    private string? errorMessage;
    
    // Partnership-related variables
    private bool enablePartnership = false;
    private string selectedInstitutionId = string.Empty;
    private List<InstitutionProfile>? availableInstitutions;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Check if there are any institutions, if not, create some sample ones
            var institutionCount = await DbContext.InstitutionProfiles.CountAsync();
            if (institutionCount == 0)
            {
                // Create sample institutions for demonstration
                var sampleInstitutions = new List<InstitutionProfile>
                {
                    new InstitutionProfile
                    {
                        UserId = "sample-user-1", // This would normally be a real user ID
                        AdminFirstName = "John",
                        AdminLastName = "Doe",
                        InstitutionName = "University of the Philippines",
                        InstitutionType = "University",
                        IsVerified = true,
                        VerificationStatus = "Verified",
                        CreatedAt = DateTime.Now
                    },
                    new InstitutionProfile
                    {
                        UserId = "sample-user-2",
                        AdminFirstName = "Jane",
                        AdminLastName = "Smith", 
                        InstitutionName = "Ateneo de Manila University",
                        InstitutionType = "University",
                        IsVerified = true,
                        VerificationStatus = "Verified",
                        CreatedAt = DateTime.Now
                    },
                    new InstitutionProfile
                    {
                        UserId = "sample-user-3",
                        AdminFirstName = "Bob",
                        AdminLastName = "Johnson",
                        InstitutionName = "Polytechnic University of the Philippines",
                        InstitutionType = "University",
                        IsVerified = false,
                        VerificationStatus = "Pending",
                        CreatedAt = DateTime.Now
                    }
                };

                DbContext.InstitutionProfiles.AddRange(sampleInstitutions);
                await DbContext.SaveChangesAsync();
            }

            // Load all institutional users for partnership (regardless of verification status)
            availableInstitutions = await DbContext.InstitutionProfiles
                .OrderBy(ip => ip.InstitutionName)
                .ToListAsync();
                
            // Debug: Log the count of institutions found
            Console.WriteLine($"Found {availableInstitutions?.Count ?? 0} institutions for partnership");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading institutions: {ex.Message}");
            availableInstitutions = new List<InstitutionProfile>();
        }
    }


    private async Task HandleSubmit()
    {
        try
        {
            // ‚úÖ Get the user's ID from Claims (NameIdentifier)
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userId = user?.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (string.IsNullOrEmpty(userId))
            {
                errorMessage = "Unable to identify logged-in user.";
                return;
            }

            // ‚úÖ Look up the BenefactorProfile of the current user
            var benefactor = await DbContext.BenefactorProfiles
                .FirstOrDefaultAsync(p => p.UserId == userId);

            if (benefactor is null)
            {
                errorMessage = "No benefactor profile found for this user.";
                return;
            }

            // ‚úÖ Handle partnership validation
            Guid? partnerInstitutionId = null;
            if (enablePartnership)
            {
                if (string.IsNullOrEmpty(selectedInstitutionId))
                {
                    errorMessage = "Please select an institution partner or disable partnership.";
                    return;
                }
                
                if (!Guid.TryParse(selectedInstitutionId, out var parsedId))
                {
                    errorMessage = "Invalid institution selection.";
                    return;
                }
                
                partnerInstitutionId = parsedId;
                
                // Verify the institution exists
                var partnerInstitution = await DbContext.InstitutionProfiles
                    .FirstOrDefaultAsync(ip => ip.InstitutionProfileId == partnerInstitutionId);
                    
                if (partnerInstitution == null)
                {
                    errorMessage = "Selected institution is not available for partnership.";
                    return;
                }
            }

            // ‚úÖ Assign foreign keys and timestamps
            scholarship.BenefactorProfileId = benefactor.BenefactorProfileId;
            scholarship.InstitutionProfileId = partnerInstitutionId; // Set partner institution if selected
            scholarship.CreatedAt = DateTime.Now;
            // ‚úÖ ENFORCE: Benefactor scholarships are ALWAYS external/open (accessible to all students)
            // This ensures benefactor scholarships are never internal/institutional, even in partnerships
            scholarship.IsInternal = false;

            // ‚úÖ Save to database
            DbContext.Scholarships.Add(scholarship);
            await DbContext.SaveChangesAsync();

            isSubmitted = true;

            await Task.Delay(1500);
            Navigation.NavigateTo("/dashboard/benefactor/scholarships");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            errorMessage = "An error occurred while posting the scholarship.";
        }
    }
}
