@page "/dashboard/benefactor/scholarships/post"
@attribute [Authorize(Roles = "Benefactor,SuperAdmin")]
@layout Layout.BenefactorDashLayout

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using c2_eskolar.Data
@using c2_eskolar.Models
@using c2_eskolar.Services
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject InstitutionProfileService InstitutionProfileService
@inject BlobStorageService BlobStorageService

<PageTitle>Post Scholarship</PageTitle>

<div class="container my-5" style="max-width: 700px;">
    
    <h2 class="fw-bold mb-4" style="font-size:2.2rem;">Post a New Scholarship</h2>

    <!-- External Scholarship Information -->
    <div class="alert alert-info mb-4" role="alert">
        <div class="d-flex align-items-center">
            <span aria-hidden="true" class="me-2" style="font-size: 1.2rem;">üåê</span>
            <div>
                <strong>External Scholarship:</strong> As a benefactor, your scholarship will be posted as an <strong>external scholarship</strong>, making it open and accessible to all students across all institutions.
                <br/><small class="mt-1 d-block"><strong>Partnership Option:</strong> You can optionally partner with an institution, allowing them to also manage your scholarship.</small>
            </div>
        </div>
    </div>

    @if (isSubmitted)
    {
        <div class="alert alert-success mb-4" role="alert" aria-live="polite">
            <span aria-hidden="true">‚úÖ</span> Scholarship posted successfully! Redirecting...
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mb-4" role="alert" aria-live="assertive">
            <span aria-hidden="true">‚ùå</span> <span class="visually-hidden">Error:</span> @errorMessage
        </div>
    }

    <EditForm Model="@scholarship" OnValidSubmit="HandleSubmit" OnInvalidSubmit="HandleInvalidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" />

        <!-- Categorized Form Fields in Card Boxes -->
        <div class="row g-4">
                <!-- Scholarship Icon Upload -->
                <div class="col-12">
                    <div class="card shadow-sm border-0 mb-3">
                        <div class="card-header-custom bg-secondary text-white fw-bold">Scholarship Icon</div>
                        <div class="card-body">
                            <div class="row g-3 align-items-center">
                                <div class="col-12">
                                    <label for="iconUpload" class="form-label fw-semibold">Upload Icon <span class="text-muted">(PNG, JPG, SVG, max 5MB)</span></label>
                                    <InputFile id="iconUpload" OnChange="HandleIconUpload" accept="image/png,image/jpeg,image/svg+xml" class="form-control" aria-label="Upload Scholarship Icon" disabled="@(isUploadingIcon || isSubmitted)" />
                                    
                                    @if (isUploadingIcon)
                                    {
                                        <div class="mt-2 d-flex align-items-center">
                                            <div class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></div>
                                            <small class="text-muted">Processing image...</small>
                                        </div>
                                    }
                                    else if (!string.IsNullOrEmpty(iconPreviewUrl))
                                    {
                                        <div class="mt-2">
                                            <img src="@iconPreviewUrl" alt="Icon Preview" style="max-width:80px;max-height:80px;border-radius:8px;border:1px solid #ccc;" />
                                            <small class="d-block text-muted">Preview - Icon will be uploaded to secure cloud storage when you submit</small>
                                        </div>
                                    }
                                    
                                    <ValidationMessage For="@(() => scholarship.IconUrl)" class="text-danger small ms-1" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            <!-- Basic Info -->
            <div class="col-12">
                <div class="card shadow-sm border-0 mb-3">
                    <div class="card-header-custom bg-primary text-white fw-bold">Basic Information</div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-12">
                                <label for="title" class="form-label fw-semibold" style="font-size:1.1rem;">Title</label>
                                <InputText id="title" class="form-control" @bind-Value="scholarship.Title" aria-required="true" required aria-label="Scholarship Title" placeholder="e.g. Academic Excellence Scholarship" />
                                <ValidationMessage For="@(() => scholarship.Title)" class="text-danger small ms-1" />
                            </div>
                            <div class="col-12 col-md-6">
                                <label for="benefits" class="form-label fw-semibold">Benefits</label>
                                <InputText id="benefits" class="form-control" @bind-Value="scholarship.Benefits" aria-required="true" required aria-label="Benefits" placeholder="e.g. Full tuition, stipend, books" />
                                <ValidationMessage For="@(() => scholarship.Benefits)" class="text-danger small ms-1" />
                            </div>
                            <div class="col-12 col-md-6">
                                <label for="deadline" class="form-label fw-semibold">Application Deadline</label>
                                <InputDate id="deadline" class="form-control" @bind-Value="scholarship.ApplicationDeadline" aria-required="true" required aria-label="Application Deadline" placeholder="Select deadline" />
                                <ValidationMessage For="@(() => scholarship.ApplicationDeadline)" class="text-danger small ms-1" />
                            </div>
                            <div class="col-12">
                                <label for="description" class="form-label fw-semibold">Description <span class="text-muted">(optional)</span></label>
                                <InputTextArea id="description" class="form-control" rows="3" @bind-Value="scholarship.Description" aria-label="Description" placeholder="Describe the scholarship, its purpose, and any special notes..." />
                                <ValidationMessage For="@(() => scholarship.Description)" class="text-danger small ms-1" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Requirements -->
            <div class="col-12">
                <div class="card shadow-sm border-0 mb-3">
                    <div class="card-header-custom bg-success text-white fw-bold">Requirements</div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-12">
                                <label for="requirements" class="form-label fw-semibold">Requirements</label>
                                <InputTextArea id="requirements" class="form-control" rows="2" @bind-Value="scholarship.Requirements" aria-label="Requirements" placeholder="e.g. Must be a full-time student, leadership experience, etc." />
                                <ValidationMessage For="@(() => scholarship.Requirements)" class="text-danger small ms-1" />
                            </div>
                            <div class="col-12 col-md-4">
                                <label for="slots" class="form-label fw-semibold">Slots Available</label>
                                <InputNumber id="slots" class="form-control" @bind-Value="scholarship.SlotsAvailable" aria-label="Slots Available" placeholder="e.g. 10" />
                                <ValidationMessage For="@(() => scholarship.SlotsAvailable)" class="text-danger small ms-1" />
                            </div>
                            <div class="col-12 col-md-4">
                                <label for="gpa" class="form-label fw-semibold">Minimum GPA</label>
                                <InputNumber id="gpa" class="form-control" @bind-Value="scholarship.MinimumGPA" step="0.01" aria-label="Minimum GPA" placeholder="e.g. 3.50" />
                                <ValidationMessage For="@(() => scholarship.MinimumGPA)" class="text-danger small ms-1" />
                            </div>
                            <div class="col-12 col-md-4">
                                <label for="yearlevel" class="form-label fw-semibold">Required Year Level</label>
                                <InputNumber id="yearlevel" class="form-control" @bind-Value="scholarship.RequiredYearLevel" aria-label="Required Year Level" placeholder="e.g. 2 (for 2nd year)" />
                                <ValidationMessage For="@(() => scholarship.RequiredYearLevel)" class="text-danger small ms-1" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Eligibility -->
            <div class="col-12">
                <div class="card shadow-sm border-0 mb-3">
                    <div class="card-header-custom bg-info text-white fw-bold">Eligibility</div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-12 col-md-6">
                                <label for="course" class="form-label fw-semibold">Required Course</label>
                                <InputText id="course" class="form-control" @bind-Value="scholarship.RequiredCourse" aria-label="Required Course" placeholder="e.g. BS Computer Science" />
                                <ValidationMessage For="@(() => scholarship.RequiredCourse)" class="text-danger small ms-1" />
                            </div>
                            <div class="col-12 col-md-6">
                                <label for="university" class="form-label fw-semibold">Required University</label>
                                <InputText id="university" class="form-control" @bind-Value="scholarship.RequiredUniversity" aria-label="Required University" placeholder="e.g. University of the Philippines" />
                                <ValidationMessage For="@(() => scholarship.RequiredUniversity)" class="text-danger small ms-1" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Partnership (Optional) -->
            <div class="col-12">
                <div class="card shadow-sm border-0 mb-3">
                    <div class="card-header-custom bg-purple text-white fw-bold" style="background-color: #6f42c1 !important;">Partnership (Optional)</div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-12">
                                <div class="form-check mb-3">
                                    <input class="form-check-input" type="checkbox" id="enablePartnership" @bind="enablePartnership" />
                                    <label class="form-check-label fw-semibold" for="enablePartnership">
                                        Partner with an Institution
                                    </label>
                                    <div class="form-text text-muted">
                                        When you partner with an institution, they will also be able to manage this scholarship.
                                    </div>
                                </div>
                            </div>
                            @if (enablePartnership)
                            {
                                <div class="col-12">
                                    <label for="institution" class="form-label fw-semibold">Select Institution Partner</label>
                                    @if (availableInstitutions == null)
                                    {
                                        <div class="d-flex align-items-center">
                                            <div class="spinner-border spinner-border-sm me-2" role="status">
                                                <span class="visually-hidden">Loading...</span>
                                            </div>
                                            <span class="text-muted">Loading institutions...</span>
                                        </div>
                                    }
                                    else if (!availableInstitutions.Any())
                                    {
                                        <div class="alert alert-warning mb-0">
                                            <i class="bi bi-exclamation-triangle me-2"></i>
                                            No institutions are currently registered in the system. Institutions need to register first before partnerships can be formed.
                                        </div>
                                    }
                                    else
                                    {
                                        <InputSelect id="institution" class="form-select" @bind-Value="selectedInstitutionId" aria-label="Select Institution Partner">
                                            <option value="">-- Select an Institution --</option>
                                            @foreach (var institution in availableInstitutions)
                                            {
                                                <option value="@institution.InstitutionProfileId">
                                                    @(string.IsNullOrEmpty(institution.InstitutionName) ? "Unnamed Institution" : institution.InstitutionName) @(!string.IsNullOrEmpty(institution.InstitutionType) ? $"({institution.InstitutionType})" : "") @(institution.IsVerified ? "‚úì" : "")
                                                </option>
                                            }
                                        </InputSelect>
                                        <small class="text-muted mt-1">Found @availableInstitutions.Count institutions available for partnership</small>
                                        @if (!string.IsNullOrEmpty(selectedInstitutionId) && availableInstitutions.Any())
                                        {
                                            var selectedInst = availableInstitutions.FirstOrDefault(i => i.InstitutionProfileId.ToString() == selectedInstitutionId);
                                            if (selectedInst != null)
                                            {
                                                <div class="mt-2 p-2 bg-light rounded">
                                                    <small class="text-muted">
                                                        <strong>Selected:</strong> @(string.IsNullOrEmpty(selectedInst.InstitutionName) ? "Unnamed Institution" : selectedInst.InstitutionName)<br/>
                                                        <strong>Type:</strong> @(selectedInst.InstitutionType ?? "Not specified")<br/>
                                                        <strong>Status:</strong> <span class="@(selectedInst.IsVerified ? "text-success" : "text-warning")">
                                                            @(selectedInst.IsVerified ? "Verified ‚úì" : "Unverified")
                                                        </span>
                                                    </small>
                                                </div>
                                            }
                                        }
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Settings -->
            <div class="col-12">
                <div class="card shadow-sm border-0 mb-3">
                    <div class="card-header-custom bg-warning text-dark fw-bold">Settings</div>
                    <div class="card-body">
                        <div class="row g-3 align-items-center">
                            <div class="col-12">
                                <label for="externalurl" class="form-label fw-semibold">External Application URL <span class="text-muted">(optional)</span></label>
                                <InputText id="externalurl" class="form-control" @bind-Value="scholarship.ExternalApplicationUrl" aria-label="External Application URL" placeholder="e.g. https://apply.example.com" />
                                <ValidationMessage For="@(() => scholarship.ExternalApplicationUrl)" class="text-danger small ms-1" />
                            </div>
                            <!-- Removed Active and Internal Scholarship checkboxes as requested -->
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <button type="submit" class="btn btn-primary btn-lg mt-4" style="min-width:180px;outline:2px solid transparent;outline-offset:2px;" disabled="@isSubmitted">
            @if (isSubmitted)
            {
                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                <span>Posting...</span>
            }
            else
            {
                <span class="visually-hidden">Submit scholarship form</span>
                <span>Post Scholarship</span>
            }
        </button>
    </EditForm>
</div>

@code {
    private Scholarship scholarship = new()
    {
        Title = "",
        Benefits = "",
        ApplicationDeadline = DateTime.Today.AddMonths(1),
        IsActive = true,
        IsInternal = false // Benefactor scholarships are ALWAYS external/open - accessible to all students
    };
    private bool isSubmitted = false;
    private string? errorMessage;

        // Icon upload variables
        private IBrowserFile? uploadedIconFile;
        private string? iconPreviewUrl;
        private bool isUploadingIcon = false;
    
    // Partnership-related variables
    private bool enablePartnership = false;
    private string selectedInstitutionId = string.Empty;
    private List<InstitutionProfile>? availableInstitutions;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            // Load all institutional users for partnership (regardless of verification status)
            availableInstitutions = await context.InstitutionProfiles
                .OrderBy(ip => ip.InstitutionName)
                .ToListAsync();
                
            // Debug: Log the count of institutions found
            Console.WriteLine($"Found {availableInstitutions?.Count ?? 0} institutions for partnership");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading institutions: {ex.Message}");
            availableInstitutions = new List<InstitutionProfile>();
        }
    }


    private async Task HandleSubmit()
    {
        try
        {
            // Clear any previous error messages
            errorMessage = null;
            Console.WriteLine("üöÄ HandleSubmit called - starting scholarship submission process");
            Console.WriteLine($"üîç Form data - Title: '{scholarship.Title}', Benefits: '{scholarship.Benefits}', Deadline: {scholarship.ApplicationDeadline}");
            // ‚úÖ Get the user's ID from Claims (NameIdentifier)
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userId = user?.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (string.IsNullOrEmpty(userId))
            {
                errorMessage = "Unable to identify logged-in user.";
                return;
            }

            using var context = await DbContextFactory.CreateDbContextAsync();
            
            // ‚úÖ Look up the BenefactorProfile of the current user
            var benefactor = await context.BenefactorProfiles
                .FirstOrDefaultAsync(p => p.UserId == userId);

            if (benefactor is null)
            {
                errorMessage = "No benefactor profile found for this user.";
                return;
            }

            // ‚úÖ Handle partnership validation
            Guid? partnerInstitutionId = null;
            if (enablePartnership)
            {
                if (string.IsNullOrEmpty(selectedInstitutionId))
                {
                    errorMessage = "Please select an institution partner or disable partnership.";
                    return;
                }
                
                if (!Guid.TryParse(selectedInstitutionId, out var parsedId))
                {
                    errorMessage = "Invalid institution selection.";
                    return;
                }
                
                partnerInstitutionId = parsedId;
                
                // Verify the institution exists
                var partnerInstitution = await context.InstitutionProfiles
                    .FirstOrDefaultAsync(ip => ip.InstitutionProfileId == partnerInstitutionId);
                    
                if (partnerInstitution == null)
                {
                    errorMessage = "Selected institution is not available for partnership.";
                    return;
                }
            }

            // ‚úÖ Handle icon upload - Upload to Azure Blob Storage
            if (uploadedIconFile != null)
            {
                try
                {
                    Console.WriteLine($"Uploading scholarship icon: {uploadedIconFile.Name}, Size: {uploadedIconFile.Size} bytes");
                    
                    var fileExt = Path.GetExtension(uploadedIconFile.Name);
                    var fileName = $"scholarship_icon_{Guid.NewGuid()}{fileExt}";
                    
                    using var fileStream = uploadedIconFile.OpenReadStream(5 * 1024 * 1024); // 5MB max
                    
                    // Upload to Azure Blob Storage using the photos container
                    var blobUrl = await BlobStorageService.UploadPhotoAsync(fileStream, fileName, uploadedIconFile.ContentType);
                    
                    // Store the blob URL in the scholarship (we'll convert to SAS when displaying)
                    scholarship.IconUrl = blobUrl;
                    
                    Console.WriteLine($"Successfully uploaded scholarship icon to blob storage: {blobUrl}");
                }
                catch (Exception uploadEx)
                {
                    Console.WriteLine($"Error uploading scholarship icon to blob storage: {uploadEx.Message}");
                    Console.WriteLine($"Upload exception stack trace: {uploadEx.StackTrace}");
                    
                    // Provide user-friendly error messages based on the exception type
                    if (uploadEx.Message.Contains("authentication") || uploadEx.Message.Contains("unauthorized"))
                    {
                        errorMessage = "Failed to upload icon: Authentication error with cloud storage. Please try again later.";
                    }
                    else if (uploadEx.Message.Contains("network") || uploadEx.Message.Contains("timeout"))
                    {
                        errorMessage = "Failed to upload icon: Network connectivity issue. Please check your connection and try again.";
                    }
                    else
                    {
                        errorMessage = $"Failed to upload scholarship icon: {uploadEx.Message}";
                    }
                    return;
                }
            }

            // ‚úÖ Assign foreign keys and timestamps
            scholarship.BenefactorProfileId = benefactor.BenefactorProfileId;
            scholarship.InstitutionProfileId = partnerInstitutionId; // Set partner institution if selected
            scholarship.CreatedAt = DateTime.Now;
            // ‚úÖ ENFORCE: Benefactor scholarships are ALWAYS external/open (accessible to all students)
            // This ensures benefactor scholarships are never internal/institutional, even in partnerships
            scholarship.IsInternal = false;

            // ‚úÖ Save to database
            context.Scholarships.Add(scholarship);
            await context.SaveChangesAsync();

            isSubmitted = true;

            await Task.Delay(1500);
            Navigation.NavigateTo("/dashboard/benefactor/scholarships");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error posting scholarship: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            errorMessage = $"An error occurred while posting the scholarship: {ex.Message}";
            isSubmitted = false; // Reset submission state on error
        }
    }

    private async Task HandleIconUpload(InputFileChangeEventArgs e)
    {
        try
        {
            isUploadingIcon = true;
            errorMessage = null; // Clear any previous errors
            
            uploadedIconFile = e.File;
            
            if (uploadedIconFile == null)
            {
                iconPreviewUrl = null;
                return;
            }

            // Validate file size (5MB max)
            if (uploadedIconFile.Size > 5 * 1024 * 1024)
            {
                errorMessage = "Icon file size must be less than 5MB.";
                uploadedIconFile = null;
                iconPreviewUrl = null;
                return;
            }

            // Validate file type
            if (!uploadedIconFile.ContentType.StartsWith("image/"))
            {
                errorMessage = "Please select a valid image file (PNG, JPG, or SVG).";
                uploadedIconFile = null;
                iconPreviewUrl = null;
                return;
            }

            // Create preview for image types
            using var stream = uploadedIconFile.OpenReadStream(5 * 1024 * 1024); // 5MB max
            var buffer = new byte[uploadedIconFile.Size];
            await stream.ReadAsync(buffer, 0, (int)uploadedIconFile.Size);
            iconPreviewUrl = $"data:{uploadedIconFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
            
            Console.WriteLine($"Icon selected for upload: {uploadedIconFile.Name}, Size: {uploadedIconFile.Size} bytes, Type: {uploadedIconFile.ContentType}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling icon upload: {ex.Message}");
            errorMessage = $"Error processing icon file: {ex.Message}";
            uploadedIconFile = null;
            iconPreviewUrl = null;
        }
        finally
        {
            isUploadingIcon = false;
        }
    }

    private void HandleInvalidSubmit()
    {
        errorMessage = "‚ùå Form validation failed. Please check all required fields.";
        Console.WriteLine("üö® Form validation failed - invalid submit detected");
        Console.WriteLine($"üìù Title: '{scholarship.Title}' (Length: {scholarship.Title?.Length})");  
        Console.WriteLine($"üí∞ Benefits: '{scholarship.Benefits}' (Length: {scholarship.Benefits?.Length})");
        Console.WriteLine($"üìÖ ApplicationDeadline: {scholarship.ApplicationDeadline}");
        Console.WriteLine($"üìÑ Description: '{scholarship.Description}' (Length: {scholarship.Description?.Length})");
    }

    /// <summary>
    /// Converts a blob URL to a SAS URL for secure display
    /// </summary>
    private string GetDisplayableIconUrl(string? iconUrl)
    {
        if (string.IsNullOrEmpty(iconUrl))
            return string.Empty;
            
        try
        {
            // If it's already a data URL (for preview), return as-is
            if (iconUrl.StartsWith("data:"))
                return iconUrl;
                
            // If it's a blob URL, convert to SAS URL for secure access
            if (iconUrl.Contains("blob.core.windows.net"))
                return BlobStorageService.GetPhotoSasUrlFromBlobUrl(iconUrl, 480); // 8 hours validity
                
            // Otherwise return as-is (fallback)
            return iconUrl;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error converting icon URL to SAS URL: {ex.Message}");
            return iconUrl; // Return original URL on error
        }
    }
}
