@page "/dashboard/benefactor/profile/{StudentId:guid}"
@attribute [Authorize(Roles = "Benefactor,SuperAdmin")]
@layout Layout.BenefactorDashLayout

@using c2_eskolar.Data
@using c2_eskolar.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.JSInterop

@inject c2_eskolar.Services.StudentProfileService StudentProfileService
@inject c2_eskolar.Services.VerificationDocumentService VerificationDocumentService
@inject c2_eskolar.Services.BenefactorProfileService BenefactorProfileService
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> UserManager
@inject Microsoft.Extensions.Logging.ILogger<BenefactorStudentProfile> Logger
@inject c2_eskolar.Services.BlobStorageService BlobStorageService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@code {
    [Parameter] public Guid StudentId { get; set; }

    public class StudentDocument
    {
        public string Name { get; set; } = "";
        public string DateUploaded { get; set; } = "";
        public string Status { get; set; } = "";
        public string StatusClass { get; set; } = "";
        public string FileType { get; set; } = "";
        public string FilePath { get; set; } = "";
        public string DocumentSource { get; set; } = ""; // "Verification" or "Application"
        public string ApplicationTitle { get; set; } = ""; // For application documents
        public int DocumentId { get; set; } = 0;
    }

    private StudentProfile? student = null;
    private List<StudentDocument> allDocuments = new List<StudentDocument>();
    private List<ScholarshipApplication> scholarshipApplications = new List<ScholarshipApplication>();
    private bool isLoading = true;
    private string? loadError = null;
    private string currentBenefactorName = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentBenefactor();
        await LoadStudentProfile();
    }

    private async Task LoadCurrentBenefactor()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                var user = await UserManager.GetUserAsync(authState.User);
                if (user != null)
                {
                    var benefactorProfile = await BenefactorProfileService.GetProfileByUserIdAsync(user.Id);
                    currentBenefactorName = benefactorProfile?.OrganizationName ?? "";
                }
            }
        }
        catch (Exception ex)
        {
            Logger?.LogWarning(ex, "Error loading benefactor profile");
        }
    }

    private async Task LoadStudentProfile()
    {
        try
        {
            isLoading = true;
            loadError = null;

            using var dbContext = await DbContextFactory.CreateDbContextAsync();

            // Load student profile
            student = await dbContext.StudentProfiles
                .FirstOrDefaultAsync(sp => sp.StudentProfileId == StudentId);

            if (student == null)
            {
                loadError = "Student profile not found.";
                return;
            }

            // Load scholarship applications for this student
            scholarshipApplications = await dbContext.ScholarshipApplications
                .Include(a => a.Scholarship)
                .ThenInclude(s => s.Institution)
                .Include(a => a.Documents)
                .Where(a => a.StudentProfileId == StudentId)
                .OrderByDescending(a => a.ApplicationDate)
                .ToListAsync();

            // Load verification documents
            var verificationDocs = new List<c2_eskolar.Models.VerificationDocument>();
            if (!string.IsNullOrWhiteSpace(student.UserId))
            {
                verificationDocs = await dbContext.VerificationDocuments
                    .Where(d => d.UserId == student.UserId)
                    .ToListAsync();
            }

            // Compile all documents
            allDocuments = new List<StudentDocument>();

            // Add verification documents
            foreach (var doc in verificationDocs)
            {
                allDocuments.Add(new StudentDocument
                {
                    Name = doc.DocumentType ?? "Document",
                    DateUploaded = doc.UploadedAt?.ToString("MM/dd/yyyy") ?? "",
                    Status = doc.Status ?? "Pending",
                    StatusClass = GetStatusClass(doc.Status ?? "Pending"),
                    FileType = GetFileTypeFromPath(doc.FilePath ?? ""),
                    FilePath = doc.FilePath ?? "",
                    DocumentSource = "Verification",
                    ApplicationTitle = "",
                    DocumentId = doc.DocumentId
                });
            }

            // Add application documents
            foreach (var application in scholarshipApplications)
            {
                // Documents collection
                if (application.Documents != null)
                {
                    foreach (var doc in application.Documents)
                    {
                        allDocuments.Add(new StudentDocument
                        {
                            Name = doc.FileName,
                            DateUploaded = doc.UploadedAt.ToString("MM/dd/yyyy"),
                            Status = "Submitted",
                            StatusClass = "text-info",
                            FileType = GetFileTypeFromPath(doc.FilePath),
                            FilePath = doc.FilePath,
                            DocumentSource = "Application",
                            ApplicationTitle = application.Scholarship?.Title ?? "Unknown Scholarship",
                            DocumentId = doc.DocumentId.GetHashCode() // Convert Guid to int
                        });
                    }
                }

                // UploadedDocuments property
                if (!string.IsNullOrEmpty(application.UploadedDocuments))
                {
                    var uploadedDocPaths = application.UploadedDocuments.Split(',', StringSplitOptions.RemoveEmptyEntries);
                    for (int i = 0; i < uploadedDocPaths.Length; i++)
                    {
                        var path = uploadedDocPaths[i].Trim();
                        allDocuments.Add(new StudentDocument
                        {
                            Name = GetFileName(path),
                            DateUploaded = application.ApplicationDate.ToString("MM/dd/yyyy"),
                            Status = application.Status ?? "Pending",
                            StatusClass = GetStatusClass(application.Status ?? "Pending"),
                            FileType = GetFileTypeFromPath(path),
                            FilePath = path,
                            DocumentSource = "Application",
                            ApplicationTitle = application.Scholarship?.Title ?? "Unknown Scholarship",
                            DocumentId = application.ScholarshipApplicationId.GetHashCode() + i // Unique ID for uploaded docs
                        });
                    }
                }
            }

            // Sort documents by date uploaded (newest first)
            allDocuments = allDocuments
                .OrderByDescending(d => DateTime.TryParse(d.DateUploaded, out var dt) ? dt : DateTime.MinValue)
                .ToList();
        }
        catch (Exception ex)
        {
            Logger?.LogError(ex, "Error loading student profile for ID: {StudentId}", StudentId);
            loadError = "An error occurred while loading the student profile. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetFileName(string path)
    {
        if (string.IsNullOrWhiteSpace(path)) return "";
        try
        {
            var parts = path.Split(new[] { '/', '\\' }, StringSplitOptions.RemoveEmptyEntries);
            var fileName = parts.Length > 0 ? parts[^1] : path;
            if (fileName.Length > 50)
                return fileName.Substring(0, 25) + "..." + fileName.Substring(fileName.Length - 22);
            return fileName;
        }
        catch { return path; }
    }

    private string GetFileTypeFromPath(string path)
    {
        if (string.IsNullOrWhiteSpace(path)) return "Other";
        if (path.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase)) return "PDF";
        if (path.EndsWith(".docx", StringComparison.OrdinalIgnoreCase) || path.EndsWith(".doc", StringComparison.OrdinalIgnoreCase)) return "DOCX";
        if (path.EndsWith(".jpg", StringComparison.OrdinalIgnoreCase) || path.EndsWith(".jpeg", StringComparison.OrdinalIgnoreCase) || path.EndsWith(".png", StringComparison.OrdinalIgnoreCase)) return "Image";
        return "Other";
    }

    private string GetStatusClass(string status)
    {
        return status switch
        {
            "Approved" => "text-success",
            "Pending" => "text-warning",
            "Submitted" => "text-info",
            "Under Review" => "text-info",
            "Needs Revision" => "text-danger",
            "Rejected" => "text-danger",
            _ => "text-secondary"
        };
    }

    private void GoBackToScholars()
    {
        NavigationManager.NavigateTo("/dashboard/benefactor/scholars");
    }

    private string GetAffiliationStatus()
    {
        if (student == null) return "Unknown";
        
        // For benefactors, all students are scholars they fund
        return "Funded Scholar";
    }

    private string GetAffiliationBadgeClass()
    {
        var status = GetAffiliationStatus();
        return status == "Funded Scholar" ? "bg-success" : "bg-secondary";
    }

    private string GetBlobNameFromPath(string filePath)
    {
        if (string.IsNullOrWhiteSpace(filePath))
            return string.Empty;

        try
        {
            // Handle different path formats
            var trimmed = filePath.Trim();
            
            // Remove any URL encoding
            trimmed = Uri.UnescapeDataString(trimmed);
            
            // Extract blob name from various path formats
            string blobName;
            
            if (trimmed.Contains("/"))
            {
                // Extract from URL or path with forward slashes
                blobName = trimmed.Substring(trimmed.LastIndexOf('/') + 1);
            }
            else if (trimmed.Contains("\\"))
            {
                // Extract from Windows path with backslashes
                blobName = trimmed.Substring(trimmed.LastIndexOf('\\') + 1);
            }
            else
            {
                // Assume it's already just the blob name
                blobName = trimmed;
            }
            
            // Clean up any remaining URL encoding or special characters
            blobName = blobName.Trim();
            
            return blobName;
        }
        catch (Exception ex)
        {
            Logger?.LogWarning(ex, "Error extracting blob name from path: {FilePath}", filePath);
            return string.Empty;
        }
    }

    private bool CanViewInBrowser(string fileType)
    {
        return fileType switch
        {
            "PDF" => true,
            "Image" => true,
            "DOCX" => false, // DOCX files cannot be reliably viewed in browser modal
            "Other" => false,
            _ => false
        };
    }

    private string GetViewButtonText(string fileType)
    {
        return fileType switch
        {
            "PDF" => "View PDF Document",
            "Image" => "View Image", 
            "DOCX" => "Download Document",
            _ => "View Document"
        };
    }

    private string GetViewButtonIcon(string fileType)
    {
        return fileType switch
        {
            "PDF" => "fa-file-pdf-o",
            "Image" => "fa-image",
            "DOCX" => "fa-download",
            _ => "fa-eye"
        };
    }

    private async Task OpenDocumentModal(string filePath, string documentName, string fileType)
    {
        try
        {
            // Create streaming URL that handles both Azure Blob and local files
            string streamingUrl;
            
            if (filePath.StartsWith("https://") || filePath.StartsWith("http://"))
            {
                // Azure Blob Storage URL - extract just the blob name
                var blobName = GetBlobNameFromPath(filePath);
                if (string.IsNullOrWhiteSpace(blobName))
                {
                    Logger?.LogWarning("Cannot extract blob name from file path: {FilePath}", filePath);
                    return;
                }
                streamingUrl = $"/api/document/stream/{Uri.EscapeDataString(blobName)}";
            }
            else
            {
                // Local file path - pass the full path
                streamingUrl = $"/api/document/stream/{Uri.EscapeDataString(filePath)}";
            }
            
            Logger?.LogInformation("Opening document modal with streaming URL: {StreamingUrl}", streamingUrl);
            
            // First, ensure the modal is available and Bootstrap is loaded
            var isBootstrapAvailable = await JSRuntime.InvokeAsync<bool>("eval", "typeof bootstrap !== 'undefined'");
            
            if (isBootstrapAvailable)
            {
                await JSRuntime.InvokeVoidAsync("showDocumentModal", streamingUrl, documentName, fileType);
            }
            else
            {
                // Bootstrap not available, fallback to new tab
                await JSRuntime.InvokeVoidAsync("open", streamingUrl, "_blank");
            }
        }
        catch (Exception ex)
        {
            Logger?.LogWarning(ex, "Error opening document modal for {DocumentName}", documentName);
            // Fallback to opening in new tab
            try
            {
                string fallbackUrl;
                if (filePath.StartsWith("https://") || filePath.StartsWith("http://"))
                {
                    var blobName = GetBlobNameFromPath(filePath);
                    fallbackUrl = $"/api/document/stream/{Uri.EscapeDataString(blobName)}";
                }
                else
                {
                    fallbackUrl = $"/api/document/stream/{Uri.EscapeDataString(filePath)}";
                }
                await JSRuntime.InvokeVoidAsync("open", fallbackUrl, "_blank");
            }
            catch (Exception fallbackEx)
            {
                Logger?.LogError(fallbackEx, "All document opening methods failed for {DocumentName}", documentName);
            }
        }
    }

    private async Task TestModal()
    {
        try
        {
            // Test with the first document if available
            if (allDocuments.Any())
            {
                var firstDoc = allDocuments.First();
                if (!string.IsNullOrWhiteSpace(firstDoc.FilePath))
                {
                    try
                    {
                        Logger?.LogInformation("Testing modal with real document: {DocumentName}, FilePath: {FilePath}", firstDoc.Name, firstDoc.FilePath);
                        await OpenDocumentModal(firstDoc.FilePath, firstDoc.Name, firstDoc.FileType);
                        return;
                    }
                    catch (Exception docEx)
                    {
                        Logger?.LogWarning(docEx, "Failed to open document for test, falling back to sample PDF");
                    }
                }
            }
            
            // Fallback to sample PDF URL for testing
            var testPdfUrl = "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf";
            await OpenDocumentModal(testPdfUrl, "Test Document.pdf", "PDF");
        }
        catch (Exception ex)
        {
            Logger?.LogError(ex, "Error testing modal");
            // Show an alert to the user
            await JSRuntime.InvokeVoidAsync("alert", $"Modal test failed: {ex.Message}");
        }
    }
}

<div class="container-fluid py-4" style="background: linear-gradient(135deg, #f8fbff 0%, #e3f2fd 100%); min-height: 100vh;">
    @if (isLoading)
    {
        <div class="row justify-content-center">
            <div class="col-12 text-center py-5">
                <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;"></div>
                <p class="mt-3 text-muted fs-5">Loading student profile...</p>
            </div>
        </div>
    }
    else if (loadError != null)
    {
        <div class="row justify-content-center">
            <div class="col-12 col-md-8">
                <div class="alert alert-danger text-center shadow-sm">
                    <i class="fa fa-exclamation-triangle fa-2x mb-3"></i>
                    <h4>Error Loading Profile</h4>
                    <p class="mb-3">@loadError</p>
                    <div class="d-flex justify-content-center gap-2">
                        <button class="btn btn-outline-secondary" @onclick="GoBackToScholars">
                            <i class="fa fa-arrow-left me-1"></i>Back to Scholars
                        </button>
                        <button class="btn btn-primary" @onclick="LoadStudentProfile">
                            <i class="fa fa-refresh me-1"></i>Try Again
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (student != null)
    {
        <div class="row justify-content-center">
            <div class="col-12 col-xl-10">
                
                <!-- Navigation Breadcrumb -->
                <nav aria-label="breadcrumb" class="mb-4">
                    <ol class="breadcrumb bg-white rounded shadow-sm p-3">
                        <li class="breadcrumb-item">
                            <a href="/dashboard/benefactor/scholars" class="text-decoration-none">
                                <i class="fa fa-graduation-cap me-1"></i>Scholar Management
                            </a>
                        </li>
                        <li class="breadcrumb-item active" aria-current="page">
                            <i class="fa fa-user me-1"></i>@student.FullName
                        </li>
                    </ol>
                </nav>

                <!-- Header Section with Student Basic Info -->
                <div class="card border-0 shadow-sm mb-4" style="background: linear-gradient(135deg, #059669 0%, #10b981 100%);">
                    <div class="card-body text-white">
                        <div class="row align-items-center">
                            <div class="col-md-2 text-center mb-3 mb-md-0">
                                <div class="bg-white text-primary rounded-circle d-inline-flex align-items-center justify-content-center fw-bold" style="width: 100px; height: 100px; font-size: 2.5rem;">
                                    @(string.IsNullOrWhiteSpace(student.FullName) ? "?" : student.FullName.Substring(0, 1))
                                </div>
                            </div>
                            <div class="col-md-7">
                                <h2 class="fw-bold mb-2">@student.FullName</h2>
                                <p class="mb-2 opacity-90 fs-5">@student.Email</p>
                                <div class="d-flex flex-wrap gap-2 mb-2">
                                    <span class="badge @GetAffiliationBadgeClass() px-3 py-2 fs-6">@GetAffiliationStatus()</span>
                                    <span class="badge @(student.VerificationStatus == "Verified" ? "bg-success" : student.VerificationStatus == "Pending" ? "bg-warning" : "bg-secondary") px-3 py-2 fs-6">
                                        @(student.VerificationStatus ?? "Pending Verification")
                                    </span>
                                </div>
                                <div class="row text-white-50">
                                    <div class="col-sm-6">
                                        <small>University: @(student.UniversityName ?? "Not specified")</small>
                                    </div>
                                    <div class="col-sm-6">
                                        <small>Student ID: @(student.StudentNumber ?? "Not provided")</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3 text-end">
                                <div class="d-flex flex-column gap-3">
                                    <div class="text-center">
                                        <div class="fs-3 fw-bold">@(student.GPA?.ToString("0.0") ?? "N/A")</div>
                                        <small class="opacity-90">Current GPA</small>
                                    </div>
                                    <div class="text-center">
                                        <div class="fs-4 fw-bold">@allDocuments.Count</div>
                                        <small class="opacity-90">Documents</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Main Content -->
                <div class="row">
                    
                    <!-- Left Column - Personal Information -->
                    <div class="col-lg-4 mb-4">
                        
                        <!-- Personal Details Card -->
                        <div class="card border-0 shadow-sm mb-4">
                            <div class="card-header bg-primary text-white">
                                <h5 class="mb-0 fw-bold">
                                    <i class="fa fa-user me-2"></i>Personal Information
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <small class="text-muted">Full Name</small>
                                    <div class="fw-semibold">@student.FullName</div>
                                </div>
                                <div class="mb-3">
                                    <small class="text-muted">First Name</small>
                                    <div class="fw-semibold">@(student.FirstName ?? "Not provided")</div>
                                </div>
                                <div class="mb-3">
                                    <small class="text-muted">Middle Name</small>
                                    <div class="fw-semibold">@(student.MiddleName ?? "Not provided")</div>
                                </div>
                                <div class="mb-3">
                                    <small class="text-muted">Last Name</small>
                                    <div class="fw-semibold">@(student.LastName ?? "Not provided")</div>
                                </div>
                                <div class="mb-3">
                                    <small class="text-muted">Sex</small>
                                    <div class="fw-semibold">@(student.Sex ?? "Not specified")</div>
                                </div>
                                <div class="mb-3">
                                    <small class="text-muted">Nationality</small>
                                    <div class="fw-semibold">@(student.Nationality ?? "Not specified")</div>
                                </div>
                                <div class="mb-3">
                                    <small class="text-muted">Birth Date</small>
                                    <div class="fw-semibold">@(student.BirthDate?.ToString("MMMM dd, yyyy") ?? "Not provided")</div>
                                </div>
                                <div class="mb-3">
                                    <small class="text-muted">Mobile Number</small>
                                    <div class="fw-semibold">@(student.MobileNumber ?? "Not provided")</div>
                                </div>
                                <div class="mb-0">
                                    <small class="text-muted">Permanent Address</small>
                                    <div class="fw-semibold">@(student.PermanentAddress ?? "Not provided")</div>
                                </div>
                            </div>
                        </div>

                        <!-- Academic Information Card -->
                        <div class="card border-0 shadow-sm mb-4">
                            <div class="card-header bg-success text-white">
                                <h5 class="mb-0 fw-bold">
                                    <i class="fa fa-graduation-cap me-2"></i>Academic Information
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <small class="text-muted">University</small>
                                    <div class="fw-semibold">@(student.UniversityName ?? "Not specified")</div>
                                </div>
                                <div class="mb-3">
                                    <small class="text-muted">Student Number</small>
                                    <div class="fw-semibold">@(student.StudentNumber ?? "Not provided")</div>
                                </div>
                                <div class="mb-3">
                                    <small class="text-muted">Course/Program</small>
                                    <div class="fw-semibold">@(student.Course ?? "Not specified")</div>
                                </div>
                                <div class="mb-3">
                                    <small class="text-muted">Year Level</small>
                                    <div class="fw-semibold">@(student.YearLevel.HasValue ? $"{student.YearLevel} Year" : "Not specified")</div>
                                </div>
                                <div class="mb-3">
                                    <small class="text-muted">Current GPA</small>
                                    <div class="fw-bold text-success fs-4">@(student.GPA?.ToString("0.0") ?? "N/A")</div>
                                </div>
                                <div class="mb-0">
                                    <small class="text-muted">Verification Status</small>
                                    <div>
                                        <span class="badge @(student.VerificationStatus == "Verified" ? "bg-success" : student.VerificationStatus == "Pending" ? "bg-warning" : "bg-secondary") px-3 py-2">
                                            @(student.VerificationStatus ?? "Pending")
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Account Information Card -->
                        <div class="card border-0 shadow-sm">
                            <div class="card-header bg-info text-white">
                                <h5 class="mb-0 fw-bold">
                                    <i class="fa fa-info-circle me-2"></i>Account Information
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <small class="text-muted">Profile Created</small>
                                    <div class="fw-semibold">@student.CreatedAt.ToString("MMMM dd, yyyy")</div>
                                </div>
                                <div class="mb-3">
                                    <small class="text-muted">Last Updated</small>
                                    <div class="fw-semibold">@(student.UpdatedAt?.ToString("MMMM dd, yyyy") ?? "Not updated")</div>
                                </div>
                                <div class="mb-0">
                                    <small class="text-muted">Profile ID</small>
                                    <div class="fw-semibold small text-muted">@student.StudentProfileId</div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Right Column - Documents and Applications -->
                    <div class="col-lg-8">
                        
                        <!-- Scholarship Applications Card -->
                        <div class="card border-0 shadow-sm mb-4">
                            <div class="card-header bg-warning text-dark">
                                <h5 class="mb-0 fw-bold">
                                    <i class="fa fa-file-text me-2"></i>Scholarship Applications
                                    <span class="badge bg-dark ms-2">@scholarshipApplications.Count</span>
                                </h5>
                            </div>
                            <div class="card-body">
                                @if (scholarshipApplications.Any())
                                {
                                    <div class="table-responsive">
                                        <table class="table table-hover">
                                            <thead class="table-light">
                                                <tr>
                                                    <th>Scholarship</th>
                                                    <th>Institution</th>
                                                    <th>Applied Date</th>
                                                    <th>Status</th>
                                                    <th>Documents</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var app in scholarshipApplications)
                                                {
                                                    <tr>
                                                        <td>
                                                            <div class="fw-semibold">@(app.Scholarship?.Title ?? "Unknown")</div>
                                                            <small class="text-muted">ID: @app.ScholarshipApplicationId</small>
                                                        </td>
                                                        <td>
                                                            <small>@(app.Scholarship?.Institution?.InstitutionName ?? "Unknown")</small>
                                                        </td>
                                                        <td>
                                                            <small>@app.ApplicationDate.ToString("MM/dd/yyyy")</small>
                                                        </td>
                                                        <td>
                                                            <span class="badge @(app.Status == "Approved" ? "bg-success" : app.Status == "Pending" ? "bg-warning" : app.Status == "Rejected" ? "bg-danger" : "bg-info")">
                                                                @(app.Status ?? "Pending")
                                                            </span>
                                                        </td>
                                                        <td>
                                                            <span class="badge bg-secondary">
                                                                @((app.Documents?.Count ?? 0) + (string.IsNullOrEmpty(app.UploadedDocuments) ? 0 : app.UploadedDocuments.Split(',').Length))
                                                            </span>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                }
                                else
                                {
                                    <div class="text-center py-4 text-muted">
                                        <i class="fa fa-file-o fa-3x mb-3"></i>
                                        <h6>No scholarship applications found</h6>
                                        <p class="mb-0">This student has not applied for any scholarships yet.</p>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Documents Card -->
                        <div class="card border-0 shadow-sm">
                            <div class="card-header bg-dark text-white">
                                <h5 class="mb-0 fw-bold">
                                    <i class="fa fa-folder me-2"></i>Submitted Documents
                                    <span class="badge bg-light text-dark ms-2">@allDocuments.Count</span>
                                </h5>
                            </div>
                            <div class="card-body">
                                @if (allDocuments.Any())
                                {
                                    <div class="table-responsive">
                                        <table class="table table-hover">
                                            <thead class="table-light">
                                                <tr>
                                                    <th>Document</th>
                                                    <th>Source</th>
                                                    <th>Type</th>
                                                    <th>Date Submitted</th>
                                                    <th>Status</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var doc in allDocuments)
                                                {
                                                    <tr>
                                                        <td>
                                                            <div class="d-flex align-items-center">
                                                                <i class="fa @(doc.FileType == "PDF" ? "fa-file-pdf-o text-danger" : doc.FileType == "DOCX" ? "fa-file-word-o text-primary" : doc.FileType == "Image" ? "fa-file-image-o text-success" : "fa-file-o text-secondary") me-2"></i>
                                                                <div>
                                                                    <div class="fw-semibold">@doc.Name</div>
                                                                    @if (!string.IsNullOrEmpty(doc.ApplicationTitle))
                                                                    {
                                                                        <small class="text-muted">@doc.ApplicationTitle</small>
                                                                    }
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td>
                                                            <span class="badge @(doc.DocumentSource == "Verification" ? "bg-info" : "bg-primary") text-white">
                                                                @doc.DocumentSource
                                                            </span>
                                                        </td>
                                                        <td>
                                                            <span class="badge bg-light text-dark border">@doc.FileType</span>
                                                        </td>
                                                        <td>
                                                            <small class="text-muted">@doc.DateUploaded</small>
                                                        </td>
                                                        <td>
                                                            <span class="@doc.StatusClass fw-semibold">
                                                                <i class="fa @(doc.Status == "Approved" ? "fa-check-circle" : doc.Status.Contains("Pending") || doc.Status == "Submitted" ? "fa-clock-o" : doc.Status.Contains("Review") ? "fa-eye" : "fa-times-circle") me-1"></i>
                                                                @doc.Status
                                                            </span>
                                                        </td>
                                                        <td>
                                                            <div class="btn-group btn-group-sm">
                                                                @{
                                                                    string? streamingUrl = null;
                                                                    string? errorMessage = null;
                                                                    
                                                                    if (!string.IsNullOrWhiteSpace(doc.FilePath))
                                                                    {
                                                                        try
                                                                        {
                                                                            Logger?.LogInformation("Processing document: {DocumentName}, FilePath: {FilePath}", doc.Name, doc.FilePath);
                                                                            
                                                                            // Create streaming URL for both Azure Blob and local files
                                                                            if (doc.FilePath.StartsWith("https://") || doc.FilePath.StartsWith("http://"))
                                                                            {
                                                                                // Azure Blob Storage URL - extract blob name
                                                                                var blobName = GetBlobNameFromPath(doc.FilePath);
                                                                                if (!string.IsNullOrWhiteSpace(blobName))
                                                                                {
                                                                                    streamingUrl = $"/api/document/stream/{Uri.EscapeDataString(blobName)}";
                                                                                }
                                                                                else
                                                                                {
                                                                                    errorMessage = "Invalid blob name";
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                // Local file path
                                                                                streamingUrl = $"/api/document/stream/{Uri.EscapeDataString(doc.FilePath)}";
                                                                            }
                                                                            
                                                                            if (!string.IsNullOrEmpty(streamingUrl))
                                                                            {
                                                                                Logger?.LogInformation("Generated streaming URL for document: {StreamingUrl}", streamingUrl);
                                                                            }
                                                                        }
                                                                        catch (Exception ex)
                                                                        {
                                                                            errorMessage = $"Error generating link: {ex.Message}";
                                                                            Logger?.LogWarning(ex, "Failed to generate streaming URL for document: {FilePath}", doc.FilePath);
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        errorMessage = "No file path available";
                                                                    }
                                                                }
                                                                @if (!string.IsNullOrEmpty(streamingUrl))
                                                                {
                                                                    @if (CanViewInBrowser(doc.FileType))
                                                                    {
                                                                        <button type="button" class="btn btn-primary btn-sm me-1" title="@GetViewButtonText(doc.FileType)" @onclick="() => OpenDocumentModal(doc.FilePath, doc.Name, doc.FileType)" @onclick:preventDefault="true">
                                                                            <i class="fa @GetViewButtonIcon(doc.FileType) me-1"></i>View
                                                                        </button>
                                                                        <a href="@streamingUrl" class="btn btn-outline-secondary btn-sm" title="Download @doc.Name" target="_blank">
                                                                            <i class="fa fa-download me-1"></i>Download
                                                                        </a>
                                                                    }
                                                                    else
                                                                    {
                                                                        <a href="@streamingUrl" class="btn btn-primary btn-sm me-1" title="Download @doc.FileType File" target="_blank">
                                                                            <i class="fa fa-download me-1"></i>Download
                                                                        </a>
                                                                        <a href="@streamingUrl" class="btn btn-outline-info btn-sm" title="Open in new tab" target="_blank">
                                                                            <i class="fa fa-external-link me-1"></i>Open
                                                                        </a>
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    <button type="button" class="btn btn-outline-primary btn-sm me-1" disabled title="@(errorMessage ?? "Document not available")">
                                                                        <i class="fa fa-eye me-1"></i>View
                                                                    </button>
                                                                    <button type="button" class="btn btn-outline-secondary btn-sm" disabled title="@(errorMessage ?? "Document not available")">
                                                                        <i class="fa fa-download me-1"></i>Download
                                                                    </button>
                                                                    @if (!string.IsNullOrEmpty(errorMessage))
                                                                    {
                                                                        <div class="mt-1">
                                                                            <small class="text-danger"><i class="fa fa-exclamation-triangle me-1"></i>@errorMessage</small>
                                                                        </div>
                                                                    }
                                                                }
                                                            </div>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                }
                                else
                                {
                                    <div class="text-center py-5 text-muted">
                                        <i class="fa fa-file-o fa-4x mb-3"></i>
                                        <h5>No documents submitted</h5>
                                        <p class="mb-0">This student has not submitted any documents yet.</p>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="row mt-4">
                    <div class="col-12">
                        <div class="d-flex justify-content-between">
                            <button class="btn btn-outline-secondary btn-lg" @onclick="GoBackToScholars">
                                <i class="fa fa-arrow-left me-2"></i>Back to Scholar Management
                            </button>
                            <div class="d-flex gap-2">
                                <button class="btn btn-outline-primary btn-lg" @onclick="LoadStudentProfile">
                                    <i class="fa fa-refresh me-2"></i>Refresh Data
                                </button>
                                <button class="btn btn-outline-info btn-lg" @onclick="() => TestModal()">
                                    <i class="fa fa-play me-2"></i>Test Modal
                                </button>
                                <button class="btn btn-primary btn-lg" @onclick="GoBackToScholars">
                                    <i class="fa fa-users me-2"></i>View All Scholars
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Document Viewer Modal -->
<div class="modal fade" id="documentModal" tabindex="-1" aria-labelledby="documentModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content shadow-lg">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title fw-bold" id="documentModalLabel">
                    <i class="fa fa-file me-2"></i>Document Viewer
                </h5>
                <div class="d-flex align-items-center gap-2">
                    <!-- PDF.js Controls -->
                    <div id="pdfControls" class="d-none d-flex align-items-center gap-2 me-3">
                        <button type="button" class="btn btn-sm btn-outline-light" id="prevPage" title="Previous Page">
                            <i class="fa fa-chevron-left"></i>
                        </button>
                        <span class="text-white small">
                            <span id="pageNum">1</span> / <span id="pageCount">1</span>
                        </span>
                        <button type="button" class="btn btn-sm btn-outline-light" id="nextPage" title="Next Page">
                            <i class="fa fa-chevron-right"></i>
                        </button>
                        <div class="vr mx-2"></div>
                        <button type="button" class="btn btn-sm btn-outline-light" id="zoomOut" title="Zoom Out">
                            <i class="fa fa-search-minus"></i>
                        </button>
                        <span class="text-white small" id="zoomLevel">100%</span>
                        <button type="button" class="btn btn-sm btn-outline-light" id="zoomIn" title="Zoom In">
                            <i class="fa fa-search-plus"></i>
                        </button>
                    </div>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
            </div>
            <div class="modal-body p-0" style="height: 80vh; max-height: 80vh;">
                <!-- Loading State -->
                <div id="documentLoader" class="d-flex justify-content-center align-items-center h-100">
                    <div class="text-center">
                        <div class="spinner-border text-primary mb-3" style="width: 3rem; height: 3rem;"></div>
                        <h5 class="text-muted">Loading document...</h5>
                        <p class="text-muted mb-0">Please wait while we prepare your document</p>
                    </div>
                </div>
                
                <!-- Document Container -->
                <div id="documentContainer" class="d-none h-100">
                    <!-- PDF.js Canvas Container -->
                    <div id="pdfContainer" class="h-100 overflow-auto text-center" style="background: #f8f9fa;">
                        <canvas id="pdfCanvas" style="max-width: 100%; height: auto; margin: 20px auto; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"></canvas>
                    </div>
                    
                    <!-- Fallback iframe for non-PDF documents -->
                    <iframe id="documentFrame" width="100%" height="100%" frameborder="0" 
                            style="border: none; background: white; display: none;" 
                            sandbox="allow-same-origin allow-scripts allow-popups allow-forms allow-downloads">
                    </iframe>
                </div>
                
                <!-- Error State -->
                <div id="documentError" class="d-none h-100 d-flex align-items-center justify-content-center">
                    <div class="text-center p-4">
                        <div class="mb-4">
                            <i class="fa fa-exclamation-triangle fa-4x text-warning mb-3"></i>
                            <h4 class="text-dark">Unable to display document</h4>
                            <p class="text-muted mb-2" id="errorMessage">This document cannot be previewed in the browser.</p>
                            <p class="text-muted mb-4"><small>This might be due to security restrictions or the document format. You can still download it directly.</small></p>
                        </div>
                        <div class="d-flex justify-content-center gap-2 flex-wrap">
                            <button type="button" class="btn btn-primary" id="downloadDocumentBtn">
                                <i class="fa fa-download me-2"></i>Download Document
                            </button>
                            <button type="button" class="btn btn-outline-info" id="openNewTabBtn2">
                                <i class="fa fa-external-link me-2"></i>Open in New Tab
                            </button>
                            <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                                <i class="fa fa-times me-2"></i>Close
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer bg-light border-top">
                <div class="d-flex justify-content-between align-items-center w-100 flex-wrap gap-2">
                    <div class="d-flex align-items-center">
                        <i class="fa fa-info-circle text-muted me-2"></i>
                        <span class="text-muted small" id="documentInfo">Document information</span>
                    </div>
                    <div class="d-flex gap-2 flex-wrap">
                        <button type="button" class="btn btn-outline-secondary btn-sm" data-bs-dismiss="modal">
                            <i class="fa fa-times me-1"></i>Close
                        </button>
                        <a id="downloadBtn" href="#" class="btn btn-success btn-sm" download="">
                            <i class="fa fa-download me-1"></i>Download
                        </a>
                        <a id="openNewTabBtn" href="#" class="btn btn-primary btn-sm" target="_blank">
                            <i class="fa fa-external-link me-1"></i>New Tab
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Additional Modal Styles -->
<style>
    /* Force modal to appear above everything */
    #documentModal {
        z-index: 9999 !important;
        position: fixed !important;
        top: 0 !important;
        left: 0 !important;
        width: 100% !important;
        height: 100% !important;
    }
    
    #documentModal .modal-backdrop {
        z-index: 9998 !important;
        background-color: rgba(0, 0, 0, 0.5) !important;
        position: fixed !important;
    }
    
    /* Override any layout or sidebar z-index */
    .sidebar, .navbar, .header, .layout-container, .main-content {
        z-index: 1000 !important;
    }
    
    #documentModal .modal-dialog {
        max-width: 90vw;
        width: 90vw;
        z-index: 10000 !important;
        position: relative;
    }
    
    #documentModal .modal-content {
        border: none;
        border-radius: 8px;
        height: 90vh;
        max-height: 90vh;
        position: relative;
        z-index: 10001 !important;
    }
    
    #documentModal .modal-body {
        overflow: hidden;
    }
    
    #documentModal iframe {
        border: none;
        width: 100%;
        height: 100%;
    }
    
    #documentModal img {
        transition: transform 0.3s ease;
        cursor: pointer;
    }
    
    #documentModal img:hover {
        transform: scale(1.02);
    }
    
    @@media (max-width: 768px) {
        #documentModal .modal-dialog {
            max-width: 95vw;
            width: 95vw;
            margin: 0.5rem;
        }
        
        #documentModal .modal-content {
            height: 95vh;
            max-height: 95vh;
        }
    }
    
    /* Ensure modal backdrop works properly */
    .modal-backdrop {
        background-color: rgba(0, 0, 0, 0.5) !important;
        z-index: 9998 !important;
    }
    
    /* Override any potential conflicting z-index */
    .modal-backdrop.show {
        z-index: 9998 !important;
    }
    
    .modal.show {
        z-index: 9999 !important;
    }
    
    /* Loading spinner animation */
    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    .spinner-border {
        animation: spin 1s linear infinite;
    }
</style>

<!-- PDF.js Library -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>

<script>
    // Configure PDF.js worker
    pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';
    
    // PDF.js variables
    let currentPdf = null;
    let currentPageNum = 1;
    let totalPages = 0;
    let currentScale = 1.0;
    let renderTask = null;
    
    // Global function to show document modal - now with PDF.js support
    window.showDocumentModal = function(documentUrl, documentName, documentType) {
        try {
            console.log('=== DOCUMENT MODAL DEBUG ===');
            console.log('Document Name:', documentName);
            console.log('Document Type:', documentType);
            console.log('Document URL:', documentUrl);
            console.log('URL Length:', documentUrl.length);
            console.log('Contains SAS token:', documentUrl.includes('?'));
            
            // Ensure Bootstrap is available
            if (typeof bootstrap === 'undefined') {
                console.error('Bootstrap is not loaded');
                window.open(documentUrl, '_blank');
                return;
            }
            
            // Set document info
            const documentInfo = document.getElementById('documentInfo');
            if (documentInfo) {
                documentInfo.textContent = documentName + ' (' + documentType + ')';
            }
            
            // Set download links
            const downloadBtn = document.getElementById('downloadBtn');
            const openNewTabBtn = document.getElementById('openNewTabBtn');
            const downloadDocumentBtn = document.getElementById('downloadDocumentBtn');
            
            if (downloadBtn) {
                downloadBtn.href = documentUrl;
                downloadBtn.setAttribute('download', documentName);
            }
            if (openNewTabBtn) {
                openNewTabBtn.href = documentUrl;
            }
            if (downloadDocumentBtn) {
                downloadDocumentBtn.onclick = () => window.open(documentUrl, '_blank');
            }
            
            // Reset modal state first
            resetModalState();
            
            // Show modal
            let modalElement = document.getElementById('documentModal');
            if (modalElement) {
                // Move modal to body to avoid z-index conflicts with layout
                if (modalElement.parentNode !== document.body) {
                    document.body.appendChild(modalElement);
                }
                
                // Ensure the modal is properly positioned
                modalElement.style.zIndex = '9999';
                modalElement.style.position = 'fixed';
                
                const modal = new bootstrap.Modal(modalElement, {
                    backdrop: 'static',
                    keyboard: true,
                    focus: true
                });
                
                // Force z-index on show
                modalElement.addEventListener('show.bs.modal', function() {
                    console.log('Modal is showing, setting z-index');
                    modalElement.style.zIndex = '9999';
                    modalElement.style.position = 'fixed';
                    
                    // Fix backdrop z-index
                    setTimeout(() => {
                        const backdrop = document.querySelector('.modal-backdrop');
                        if (backdrop) {
                            backdrop.style.zIndex = '9998';
                        }
                    }, 50);
                });
                
                modal.show();
                
                // Wait for modal to be fully shown before loading content
                modalElement.addEventListener('shown.bs.modal', function() {
                    console.log('Modal is fully shown');
                    // Double-check z-index after modal is shown
                    modalElement.style.zIndex = '9999';
                    modalElement.style.position = 'fixed';
                    
                    const backdrop = document.querySelector('.modal-backdrop');
                    if (backdrop) {
                        backdrop.style.zIndex = '9998';
                    }
                    
                    loadDocumentContent(documentUrl, documentType);
                }, { once: true });
                
            } else {
                console.error('Modal element not found');
                window.open(documentUrl, '_blank');
            }
            
        } catch (error) {
            console.error('Error showing document modal:', error);
            window.open(documentUrl, '_blank');
        }
    };
    
    function resetModalState() {
        const loader = document.getElementById('documentLoader');
        const container = document.getElementById('documentContainer');
        const error = document.getElementById('documentError');
        const iframe = document.getElementById('documentFrame');
        const pdfControls = document.getElementById('pdfControls');
        
        if (loader) loader.classList.remove('d-none');
        if (container) container.classList.add('d-none');
        if (error) error.classList.add('d-none');
        if (iframe) {
            iframe.src = 'about:blank';
            iframe.style.display = 'none';
        }
        if (pdfControls) pdfControls.classList.add('d-none');
        
        // Reset zoom level display
        const zoomLevel = document.getElementById('zoomLevel');
        if (zoomLevel) zoomLevel.textContent = '100%';
        
        // Reset page display
        const pageNum = document.getElementById('pageNum');
        const pageCount = document.getElementById('pageCount');
        if (pageNum) pageNum.textContent = '1';
        if (pageCount) pageCount.textContent = '1';
        
        // Clear canvas
        const canvas = document.getElementById('pdfCanvas');
        if (canvas) {
            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            canvas.width = 0;
            canvas.height = 0;
        }
        
        // Show PDF container
        const pdfContainer = document.getElementById('pdfContainer');
        if (pdfContainer) {
            pdfContainer.style.display = 'block';
        }
    }
    
    function loadDocumentContent(url, documentType) {
        console.log('Loading document content:', documentType);
        
        if (documentType === 'PDF') {
            loadPdfContent(url);
        } else if (documentType === 'Image') {
            loadImageContent(url);
        } else {
            showErrorState();
        }
    }
    
    function loadPdfContent(url) {
        console.log('Loading PDF with PDF.js:', url);
        
        const loader = document.getElementById('documentLoader');
        const container = document.getElementById('documentContainer');
        const pdfControls = document.getElementById('pdfControls');
        const pdfContainer = document.getElementById('pdfContainer');
        const canvas = document.getElementById('pdfCanvas');
        
        if (!loader || !container || !canvas) {
            showErrorState('PDF viewer not available');
            return;
        }
        
        // Load PDF using PDF.js
        pdfjsLib.getDocument(url).promise.then(function(pdf) {
            console.log('PDF loaded successfully, pages:', pdf.numPages);
            
            currentPdf = pdf;
            totalPages = pdf.numPages;
            currentPageNum = 1;
            
            // Update page counter
            document.getElementById('pageCount').textContent = totalPages;
            document.getElementById('pageNum').textContent = currentPageNum;
            
            // Show PDF controls
            if (pdfControls) {
                pdfControls.classList.remove('d-none');
            }
            
            // Render first page
            renderPage(currentPageNum);
            
            // Hide loader and show container
            loader.classList.add('d-none');
            container.classList.remove('d-none');
            
        }).catch(function(error) {
            console.error('Error loading PDF:', error);
            
            // Fallback to iframe approach
            console.log('Falling back to iframe approach');
            const iframe = document.getElementById('documentFrame');
            if (iframe) {
                iframe.style.display = 'block';
                pdfContainer.style.display = 'none';
                iframe.src = url;
                
                iframe.onload = function() {
                    loader.classList.add('d-none');
                    container.classList.remove('d-none');
                };
                
                iframe.onerror = function() {
                    showErrorState('Failed to load PDF document');
                };
            } else {
                showErrorState(`Failed to load PDF: ${error.message}`);
            }
        });
    }
    
    function renderPage(pageNum) {
        if (!currentPdf || renderTask) {
            return;
        }
        
        const canvas = document.getElementById('pdfCanvas');
        const ctx = canvas.getContext('2d');
        
        // Get page
        currentPdf.getPage(pageNum).then(function(page) {
            console.log('Rendering page:', pageNum);
            
            // Calculate scale to fit container width
            const container = document.getElementById('pdfContainer');
            const containerWidth = container.clientWidth - 40; // Account for margins
            const viewport = page.getViewport({ scale: 1.0 });
            const scale = Math.min(currentScale, containerWidth / viewport.width);
            const scaledViewport = page.getViewport({ scale: scale });
            
            // Set canvas dimensions
            canvas.width = scaledViewport.width;
            canvas.height = scaledViewport.height;
            
            // Render page
            const renderContext = {
                canvasContext: ctx,
                viewport: scaledViewport
            };
            
            renderTask = page.render(renderContext);
            renderTask.promise.then(function() {
                console.log('Page rendered successfully');
                renderTask = null;
                
                // Update page number display
                document.getElementById('pageNum').textContent = pageNum;
                
                // Update button states
                document.getElementById('prevPage').disabled = (pageNum <= 1);
                document.getElementById('nextPage').disabled = (pageNum >= totalPages);
                
            }).catch(function(error) {
                console.error('Error rendering page:', error);
                renderTask = null;
            });
        });
    }
    

    
    function loadImageContent(url) {
        console.log('Loading Image:', url);
        
        const container = document.getElementById('documentContainer');
        const loader = document.getElementById('documentLoader');
        
        if (!container || !loader) {
            showErrorState();
            return;
        }
        
        // Try to load image directly first, fallback to new tab if blocked
        const testImg = new Image();
        testImg.onload = function() {
            console.log('Image accessible, displaying inline');
            
            container.innerHTML = `
                <div class="d-flex justify-content-center align-items-center h-100 p-3">
                    <img class="img-fluid" 
                         style="max-width: 100%; max-height: 100%; object-fit: contain; cursor: pointer; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);" 
                         src="${url}"
                         alt="Document Image" 
                         onclick="this.style.maxWidth = this.style.maxWidth === '200%' ? '100%' : '200%';" />
                </div>
            `;
            
            loader.classList.add('d-none');
            container.classList.remove('d-none');
        };
        
        testImg.onerror = function() {
            console.log('Image blocked by browser, showing open in new tab option');
            
            container.innerHTML = `
                <div class="d-flex flex-column justify-content-center align-items-center h-100 p-4 text-center">
                    <div class="mb-4">
                        <i class="fa fa-image fa-5x text-info mb-3"></i>
                        <h4>Image Document Ready</h4>
                        <p class="text-muted mb-4">The image document is ready for viewing. Click below to open it in a new tab.</p>
                    </div>
                    <div class="d-flex gap-3">
                        <button type="button" class="btn btn-info btn-lg" onclick="window.open('${url}', '_blank')">
                            <i class="fa fa-external-link me-2"></i>Open Image in New Tab
                        </button>
                        <button type="button" class="btn btn-outline-secondary btn-lg" onclick="downloadDocument('${url}')">
                            <i class="fa fa-download me-2"></i>Download Image
                        </button>
                    </div>
                    <small class="text-muted mt-3">
                        <i class="fa fa-shield me-1"></i>
                        This ensures secure image viewing while respecting browser security policies.
                    </small>
                </div>
            `;
            
            loader.classList.add('d-none');
            container.classList.remove('d-none');
        };
        
        testImg.src = url;
    }
    
    function showErrorState(errorMsg = 'Document cannot be displayed in browser') {
        console.log('Showing error state:', errorMsg);
        
        const loader = document.getElementById('documentLoader');
        const container = document.getElementById('documentContainer');
        const error = document.getElementById('documentError');
        const errorMessage = document.getElementById('errorMessage');
        
        if (loader) loader.classList.add('d-none');
        if (container) container.classList.add('d-none');
        if (error) error.classList.remove('d-none');
        if (errorMessage) errorMessage.textContent = errorMsg;
        
        // Set up the error buttons with current document URL
        const openNewTabBtn2 = document.getElementById('openNewTabBtn2');
        const downloadDocumentBtn = document.getElementById('downloadDocumentBtn');
        const mainOpenBtn = document.getElementById('openNewTabBtn');
        const mainDownloadBtn = document.getElementById('downloadBtn');
        
        if (openNewTabBtn2 && mainOpenBtn) {
            openNewTabBtn2.onclick = () => window.open(mainOpenBtn.href, '_blank');
        }
        if (downloadDocumentBtn && mainDownloadBtn) {
            downloadDocumentBtn.onclick = () => window.open(mainDownloadBtn.href, '_blank');
        }
    }
    
    // Download function for documents
    window.downloadDocument = function(url) {
        console.log('Downloading document:', url);
        
        // Create a temporary link element to trigger download
        const link = document.createElement('a');
        link.href = url;
        link.download = '';
        link.style.display = 'none';
        
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
    
    // PDF.js control event handlers
    function setupPdfControls() {
        // Previous page
        document.getElementById('prevPage').addEventListener('click', function() {
            if (currentPageNum > 1) {
                currentPageNum--;
                renderPage(currentPageNum);
            }
        });
        
        // Next page
        document.getElementById('nextPage').addEventListener('click', function() {
            if (currentPageNum < totalPages) {
                currentPageNum++;
                renderPage(currentPageNum);
            }
        });
        
        // Zoom in
        document.getElementById('zoomIn').addEventListener('click', function() {
            currentScale = Math.min(currentScale * 1.2, 3.0);
            document.getElementById('zoomLevel').textContent = Math.round(currentScale * 100) + '%';
            renderPage(currentPageNum);
        });
        
        // Zoom out
        document.getElementById('zoomOut').addEventListener('click', function() {
            currentScale = Math.max(currentScale / 1.2, 0.5);
            document.getElementById('zoomLevel').textContent = Math.round(currentScale * 100) + '%';
            renderPage(currentPageNum);
        });
    }
    
    // Clean up when modal is hidden
    document.addEventListener('DOMContentLoaded', function() {
        console.log('DOM loaded, setting up modal cleanup and PDF controls');
        
        // Setup PDF controls
        setupPdfControls();
        
        const modalElement = document.getElementById('documentModal');
        if (modalElement) {
            modalElement.addEventListener('hidden.bs.modal', function() {
                console.log('Modal hidden, cleaning up');
                
                // Clean up PDF.js resources
                if (currentPdf) {
                    currentPdf.destroy();
                    currentPdf = null;
                }
                if (renderTask) {
                    renderTask.cancel();
                    renderTask = null;
                }
                
                // Reset variables
                currentPageNum = 1;
                totalPages = 0;
                currentScale = 1.0;
                
                // Hide PDF controls
                const pdfControls = document.getElementById('pdfControls');
                if (pdfControls) {
                    pdfControls.classList.add('d-none');
                }
                
                // Clean canvas
                const canvas = document.getElementById('pdfCanvas');
                if (canvas) {
                    const ctx = canvas.getContext('2d');
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                }
                
                // Clean iframe
                const iframe = document.getElementById('documentFrame');
                if (iframe) {
                    iframe.src = 'about:blank';
                    iframe.style.display = 'none';
                }
                
                // Show PDF container again
                const pdfContainer = document.getElementById('pdfContainer');
                if (pdfContainer) {
                    pdfContainer.style.display = 'block';
                }
                
                resetModalState();
            });
        }
    });
</script>

