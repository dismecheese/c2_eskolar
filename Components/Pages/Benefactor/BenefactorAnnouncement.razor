@page "/dashboard/benefactor/announcements"
@attribute [Authorize(Roles = "Benefactor,SuperAdmin")]
@layout Layout.BenefactorDashLayout
@rendermode InteractiveServer
@using c2_eskolar.Models
@using c2_eskolar.Models.Enums
@using c2_eskolar.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@inject AnnouncementService AnnouncementService
@inject UserManager<IdentityUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Announcements</PageTitle>

<div class="container-fluid" style="min-height: 100vh;">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-10">

            <!-- SEARCH BAR + CREATE BUTTON -->
            <div class="search-header-section d-flex flex-column flex-md-row align-items-md-center mb-4 gap-3 mt-5">
                <div class="flex-grow-1">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Search announcements..." 
                               @bind="searchTerm" @oninput="OnSearchChanged" />
                        <span class="input-group-text"><i class="bi bi-search"></i></span>
                    </div>
                </div>

                <!-- Create new announcement -->
                <button class="btn btn-custom-primary d-flex align-items-center gap-2" @onclick="ShowCreateForm">
                    <i class="bi bi-plus-circle"></i>
                    <span>Create Announcement</span>
                </button>
            </div>

            <!-- CATEGORY TABS + FILTER DROPDOWN -->
            <div class="modern-tabs d-flex align-items-center mb-4 gap-3">
                <div class="tab-pills">
                    <button class="tab-pill @(activeTab == "all" ? "active" : "")" @onclick='() => SetActiveTab("all")'>
                        <i class="bi bi-collection"></i> <span>All</span>
                    </button>
                    <button class="tab-pill @(activeTab == "institution" ? "active" : "")" @onclick='() => SetActiveTab("institution")'>
                        <i class="bi bi-building"></i> <span>Institution</span>
                    </button>
                    <button class="tab-pill @(activeTab == "benefactor" ? "active" : "")" @onclick='() => SetActiveTab("benefactor")'>
                        <i class="bi bi-hand-thumbs-up"></i> <span>Benefactor</span>
                    </button>
                    <button class="tab-pill @(activeTab == "mine" ? "active" : "")" @onclick='() => SetActiveTab("mine")'>
                        <i class="bi bi-person-circle"></i> <span>My Posts</span>
                    </button>
                </div>

                <!-- Category filter -->
                <div class="ms-auto">
                    <select class="form-select form-select-sm" @bind="selectedCategory">
                        <option value="">All Categories</option>
                        <option value="Requirements">Requirements</option>
                        <option value="Results">Results</option>
                        <option value="Events">Events</option>
                        <option value="General">General</option>
                    </select>
                </div>
            </div>
            
            <div class="row">
                <!-- ANNOUNCEMENTS LIST -->
                <div class="col-lg-8">
                    @if (isLoading)
                    {
                        <!-- Loading state -->
                        <div class="d-flex justify-content-center py-5">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (filteredAnnouncements?.Any() == true)
                    {
                        <!-- Tab description -->
                        <div class="mb-3">
                            <h5 class="text-muted">@GetTabDescription()</h5>
                        </div>
                        <!-- List of announcement cards -->
                        <div class="d-flex flex-column gap-3">
                            @foreach (var announcement in filteredAnnouncements.OrderByDescending(a => a.IsPinned).ThenByDescending(a => a.CreatedAt))
                            {
                                <div class="card shadow-sm border-0 @(announcement.IsPinned ? "border-warning border-2" : "")">
                                    <div class="card-body">
                                        <!-- Header with badges and date -->
                                        <div class="d-flex justify-content-between align-items-start mb-2">
                                            <div class="d-flex gap-2 flex-wrap">
                                                @if (announcement.IsPinned)
                                                {
                                                    <span class="badge badge-pinned">
                                                        <i class="bi bi-pin-fill"></i> Pinned
                                                    </span>
                                                }
                                                <span class="badge @(announcement.AuthorType == UserRole.Institution ? "badge-institution" : announcement.AuthorType == UserRole.Benefactor ? "badge-benefactor" : "badge-normal")">
                                                    @announcement.AuthorType
                                                </span>
                                                @if (!string.IsNullOrEmpty(announcement.Category))
                                                {
                                                    <span class="badge @GetCategoryBadgeClass(announcement.Category)">@announcement.Category</span>
                                                }
                                                <span class="badge @GetPriorityBadgeClass(announcement.Priority)">
                                                    @announcement.Priority
                                                </span>
                                            </div>
                                            <div class="d-flex align-items-center gap-2">
                                                <small class="text-muted">@announcement.CreatedAt.ToString("MMM dd, yyyy")</small>
                                                <!-- Expand/Collapse toggle -->
                                                <button class="btn btn-sm btn-outline-secondary" 
                                                        @onclick="() => ToggleAnnouncementExpansion(announcement.AnnouncementId)"
                                                        @onclick:stopPropagation="true">
                                                    <i class="bi bi-@(IsAnnouncementExpanded(announcement.AnnouncementId) ? "chevron-up" : "chevron-down")"></i>
                                                </button>
                                            </div>
                                        </div>

                                        <!-- Content section -->
                                        <div class="d-flex align-items-start gap-3">
                                            <!-- Icon based on author type -->
                                            <div>
                                                <i class="@(GetAuthorIcon(announcement.AuthorType)) fs-2 text-secondary"></i>
                                            </div>
                                            <div class="flex-grow-1">
                                                <!-- Title clickable -->
                                                <div class="fw-semibold mb-1 cursor-pointer" @onclick="() => IncrementView(announcement.AnnouncementId)">
                                                    @announcement.Title
                                                </div>
                                                
                                                <!-- Preview text (always visible) -->
                                                <div class="text-secondary mb-2">
                                                    @(announcement.Summary ?? 
                                                      (announcement.Content.Length > 150 ? 
                                                       announcement.Content.Substring(0, 150) + "..." : 
                                                       announcement.Content))
                                                </div>

                                                <!-- Collapsible Details -->
                                                @if (IsAnnouncementExpanded(announcement.AnnouncementId))
                                                {
                                                    <div class="announcement-details border-top pt-3 mt-2">
                                                        <!-- Full Content -->
                                                        @if (!string.IsNullOrEmpty(announcement.Content) && announcement.Content.Length > 150)
                                                        {
                                                            <div class="mb-3">
                                                                <h6 class="fw-bold">Full Description:</h6>
                                                                <div class="text-secondary">@announcement.Content</div>
                                                            </div>
                                                        }

                                                        <!-- Additional Details -->
                                                        <div class="row">
                                                            @if (!string.IsNullOrEmpty(announcement.OrganizationName))
                                                            {
                                                                <div class="col-md-6 mb-2">
                                                                    <small class="text-muted">Organization:</small>
                                                                    <div class="fw-semibold">@announcement.OrganizationName</div>
                                                                </div>
                                                            }
                                                            @if (announcement.ExpiryDate.HasValue)
                                                            {
                                                                <div class="col-md-6 mb-2">
                                                                    <small class="text-muted">Deadline:</small>
                                                                    <div class="fw-semibold">@announcement.ExpiryDate.Value.ToString("MMM dd, yyyy")</div>
                                                                </div>
                                                            }
                                                            <div class="col-md-6 mb-2">
                                                                <small class="text-muted">Visibility:</small>
                                                                <div class="fw-semibold">@(announcement.IsPublic ? "Public" : "Private")</div>
                                                            </div>
                                                            <div class="col-md-6 mb-2">
                                                                <small class="text-muted">Status:</small>
                                                                <div class="fw-semibold">@(announcement.IsActive ? "Active" : "Inactive")</div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                                
                                                <!-- Footer with views + management actions -->
                                                <div class="mt-2 d-flex justify-content-between align-items-center">
                                                    <small class="text-muted">
                                                        <i class="bi bi-eye"></i> @announcement.ViewCount views
                                                        • By @announcement.AuthorName
                                                    </small>
                                                    
                                                     <!-- Edit/Delete/Pin buttons for owner -->
                                                    @if (announcement.AuthorId == currentUserId)
                                                    {
                                                        <div class="btn-group btn-group-sm">
                                                            <button class="btn btn-outline-primary" @onclick="() => EditAnnouncement(announcement)" 
                                                                    @onclick:stopPropagation="true" title="Edit">
                                                                <i class="bi bi-pencil"></i>
                                                            </button>
                                                            <button class="btn btn-outline-@(announcement.IsPinned ? "warning" : "secondary")" 
                                                                    @onclick="() => TogglePin(announcement.AnnouncementId)" 
                                                                    @onclick:stopPropagation="true" 
                                                                    title="@(announcement.IsPinned ? "Unpin" : "Pin")">
                                                                <i class="bi bi-pin"></i>
                                                            </button>
                                                            <button class="btn btn-outline-danger" @onclick="() => DeleteAnnouncement(announcement.AnnouncementId)" 
                                                                    @onclick:stopPropagation="true" title="Delete">
                                                                <i class="bi bi-trash"></i>
                                                            </button>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <!-- EMPTY STATE -->
                        <div class="empty-state">
                            <i class="bi bi-megaphone empty-icon"></i>
                            <h5>@GetEmptyStateTitle()</h5>
                            <p>@GetEmptyStateMessage()</p>
                            @if (!string.IsNullOrEmpty(searchTerm) || !string.IsNullOrEmpty(selectedCategory))
                            {
                                <button class="btn btn-custom-outline btn-sm me-2" @onclick="ClearFilters">
                                    Clear Filters
                                </button>
                            }
                            @if (activeTab == "mine" || activeTab == "all")
                            {
                                <button class="btn btn-custom-primary mt-2" @onclick="ShowCreateForm">
                                    <i class="bi bi-plus-circle"></i> Create Your First Announcement
                                </button>
                            }
                        </div>
                    }
                </div>

                <!-- STATISTICS SIDEBAR -->
                <div class="col-lg-4 mt-4 mt-lg-0">
                    <div class="card shadow-sm border-0">
                        <div class="card-body">
                            <div class="fw-bold mb-3">Statistics for @activeTab</div>
                            <div class="list-group list-group-flush">

                                <!-- Totals by category -->
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <span>Total Announcements</span>
                                    <span class="badge badge-normal">@GetTabCount()</span>
                                </div>
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <span>From Institutions</span>
                                    <span class="badge badge-institution">@institutionCount</span>
                                </div>
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <span>From Benefactors</span>
                                    <span class="badge badge-benefactor">@benefactorCount</span>
                                </div>
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <span>My Posts</span>
                                    <span class="badge badge-custom-gradient">@myPostsCount</span>
                                </div>
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <span>Pinned</span>
                                    <span class="badge badge-pinned">@pinnedCount</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- CREATE/EDIT MODAL -->
@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content modern-modal">
                <!-- Modal header -->
                <div class="modal-header modern-modal-header" style="position: relative;">
                    <h5 class="modal-title">@(editingAnnouncement?.AnnouncementId != Guid.Empty ? "Edit" : "Create") Announcement</h5>
                    <button type="button" class="modern-modal-x" @onclick="HideModal" aria-label="Close" style="position: absolute; top: 18px; right: 24px; background: none; border: none; font-size: 2rem; color: #fff; z-index: 10; cursor: pointer;">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body modern-modal-body">
                    <!-- EditForm for creating/updating announcements -->
                    <EditForm Model="editingAnnouncement" OnValidSubmit="SaveAnnouncement">
                        <DataAnnotationsValidator />
                        
                        <!-- Title -->
                        <div class="modern-form-group">
                            <label class="modern-form-label">Title</label>
                            <InputText @bind-Value="editingAnnouncement!.Title" class="modern-form-control force-premium-input" placeholder="Enter announcement title..." />
                            <ValidationMessage For="@(() => editingAnnouncement!.Title)" />
                        </div>

                        <!-- Organization -->
                        <div class="modern-form-group">
                            <label class="modern-form-label">Institution/Organization</label>
                            <InputText @bind-Value="editingAnnouncement.OrganizationName" class="modern-form-control force-premium-input" placeholder="e.g., ABC Foundation" />
                            <small class="text-muted">Name of your institution or organization</small>
                        </div>

                        <!-- Category -->
                        <div class="modern-form-group">
                            <label class="modern-form-label">Category</label>
                            <InputSelect @bind-Value="editingAnnouncement.Category" class="modern-form-control force-premium-input">
                                <option value="">Select Category</option>
                                <option value="Requirements">Requirements</option>
                                <option value="Results">Results</option>
                                <option value="Events">Events</option>
                                <option value="General">General</option>
                            </InputSelect>
                        </div>

                        <!-- Description -->
                        <div class="modern-form-group">
                            <label class="modern-form-label">Description</label>
                            <InputTextArea @bind-Value="editingAnnouncement.Content" class="modern-form-control force-premium-input" rows="6" placeholder="Enter detailed description..." />
                            <ValidationMessage For="@(() => editingAnnouncement.Content)" />
                        </div>

                        <!-- Deadline -->
                        <div class="modern-form-group">
                            <label class="modern-form-label">Deadline (Optional)</label>
                            <InputDate @bind-Value="editingAnnouncement.ExpiryDate" class="modern-form-control force-premium-input" />
                            <small class="modern-form-text">When this announcement expires or when the deadline is</small>
                        </div>

                        <!-- Visibility -->
                        <div class="modern-form-group">
                            <label class="modern-form-label">Visibility</label>
                            <div class="modern-radio-group">
                                <InputRadioGroup @bind-Value="editingAnnouncement.IsPublic" Name="visibility">
                                    <div class="modern-radio-item">
                                        <InputRadio Value="true" class="modern-radio-input" id="public-radio" />
                                        <label class="modern-radio-label" for="public-radio">
                                            <i class="bi bi-globe"></i>
                                            <div>
                                                <strong>Public</strong>
                                                <span>Visible to all students</span>
                                            </div>
                                        </label>
                                    </div>
                                    <div class="modern-radio-item">
                                        <InputRadio Value="false" class="modern-radio-input" id="private-radio" />
                                        <label class="modern-radio-label" for="private-radio">
                                            <i class="bi bi-lock"></i>
                                            <div>
                                                <strong>Private</strong>
                                                <span>Visible to specific audience only</span>
                                            </div>
                                        </label>
                                    </div>
                                </InputRadioGroup>
                            </div>
                        </div>

                        <!-- Pin option -->
                        <div class="modern-form-group">
                            <div class="modern-checkbox-item">
                                <InputCheckbox @bind-Value="editingAnnouncement.IsPinned" class="modern-checkbox-input" id="pin-checkbox" />
                                <label class="modern-checkbox-label" for="pin-checkbox">
                                    <i class="bi bi-pin-fill"></i>
                                    <div>
                                        <strong>Pin this announcement</strong>
                                        <span>Appears at the top of the list</span>
                                    </div>
                                </label>
                            </div>
                        </div>

                        <!-- Footer buttons -->
                        <div class="modern-modal-footer">
                            <button type="button" class="btn-modern-secondary" @onclick="HideModal">
                                <i class="bi bi-x-circle"></i>
                                Cancel
                            </button>
                            <button type="submit" class="btn-modern-primary" disabled="@isLoadingModal">
                                @if (isLoadingModal)
                                {
                                    <div class="modern-spinner"></div>
                                }
                                else
                                {
                                    <i class="bi bi-@(editingAnnouncement?.AnnouncementId != Guid.Empty ? "pencil" : "plus-circle")"></i>
                                }
                                @(editingAnnouncement?.AnnouncementId != Guid.Empty ? "Update" : "Create")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- BACKEND LOGIC -->
@code {
    // Main data and state variables
    private List<Announcement>? announcements;
    private List<Announcement>? filteredAnnouncements;
    private string searchTerm = "";
    private string activeTab = "all";
    private string selectedCategory = "";
    private bool isLoading = true;
    private bool showModal = false;
    private bool isLoadingModal = false;
    private HashSet<Guid> expandedAnnouncements = new HashSet<Guid>();
    
    // Statistics counters
    private int institutionCount = 0;
    private int benefactorCount = 0;
    private int myPostsCount = 0;
    private int pinnedCount = 0;
    
     // Model for editing
    private Announcement editingAnnouncement = new() 
    { 
        Title = "",
        Content = "",
        AuthorId = "",
        AuthorName = "",
        AuthorType = UserRole.Benefactor
    };
    
    private string currentUserId = "";
    private string currentUserName = "";

    // Load current user + announcements on init
    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUser();
        await LoadAnnouncements();
    }

    // Load user details from authentication
    private async Task LoadCurrentUser()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            var user = await UserManager.GetUserAsync(authState.User);
            if (user != null)
            {
                currentUserId = user.Id;
                currentUserName = user.Email ?? "Benefactor Admin";
            }
        }
    }

    // Fetch announcements from service
    private async Task LoadAnnouncements()
    {
        isLoading = true;
        try
        {
            // Load ALL announcements (for shared viewing)
            announcements = await AnnouncementService.GetAllAnnouncementsAsync();
            UpdateStatistics();
            FilterAnnouncements();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading announcements: {ex.Message}");
            announcements = new List<Announcement>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    // Update statistics counters
    private void UpdateStatistics()
    {
        if (announcements == null) return;
        
        institutionCount = announcements.Count(a => a.AuthorType == UserRole.Institution);
        benefactorCount = announcements.Count(a => a.AuthorType == UserRole.Benefactor);
        myPostsCount = announcements.Count(a => a.AuthorId == currentUserId);
        pinnedCount = announcements.Count(a => a.IsPinned);
    }

    // Change active tab
    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        FilterAnnouncements();
    }

// FILTER MANAGEMENT

    // Trigger filter on search
    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        FilterAnnouncements();
    }

    // Apply filtering logic
    private void FilterAnnouncements()
    {
        if (announcements == null) return;

        var filtered = announcements.AsEnumerable();

        // Filter by tab
        filtered = activeTab switch
        {
            "institution" => filtered.Where(a => a.AuthorType == UserRole.Institution),
            "benefactor" => filtered.Where(a => a.AuthorType == UserRole.Benefactor),
            "mine" => filtered.Where(a => a.AuthorId == currentUserId),
            _ => filtered // "all"
        };

        // Filter by category
        if (!string.IsNullOrEmpty(selectedCategory))
        {
            filtered = filtered.Where(a => a.Category?.Contains(selectedCategory) == true);
        }

        // Filter by search term
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(a => 
                a.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                a.Content.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (a.AuthorName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false));
        }

        filteredAnnouncements = filtered.ToList();
        StateHasChanged();
    }

    // Reset filters and reload announcements
    private void ClearFilters()
    {
        searchTerm = "";
        selectedCategory = "";
        FilterAnnouncements();
    }

// CREATE ANNOUNCEMENT FORM
    // Initialize a new announcement draft for creation
    private void ShowCreateForm()
    {
        editingAnnouncement = new Announcement
        {
            Title = "",
            Content = "",
            AuthorId = currentUserId,
            AuthorName = currentUserName,
            AuthorType = UserRole.Benefactor,
            Priority = AnnouncementPriority.Normal,
            IsPublic = true,
            IsActive = true
        };
        showModal = true;
    }

// EDIT ANNOUNCEMENT FORM
    // Load an existing announcement into edit form
    private void EditAnnouncement(Announcement announcement)
    {
        editingAnnouncement = new Announcement
        {
            AnnouncementId = announcement.AnnouncementId,
            Title = announcement.Title,
            Content = announcement.Content,
            Summary = announcement.Summary,
            Category = announcement.Category,
            Priority = announcement.Priority,
            IsPublic = announcement.IsPublic,
            IsPinned = announcement.IsPinned,
            IsActive = announcement.IsActive,
            PublishDate = announcement.PublishDate,
            ExpiryDate = announcement.ExpiryDate,
            AuthorId = announcement.AuthorId,
            AuthorName = announcement.AuthorName,
            AuthorType = announcement.AuthorType,
            OrganizationName = announcement.OrganizationName
        };
        showModal = true;
    }

// SAVE ANNOUNCEMENT (CREATE OR UPDATE)
    private async Task SaveAnnouncement()
    {
        isLoadingModal = true;
        try
        {
            if (editingAnnouncement.AnnouncementId != Guid.Empty)
            {
                // Update existing announcement
                await AnnouncementService.UpdateAnnouncementAsync(editingAnnouncement.AnnouncementId, editingAnnouncement);
            }
            else
            {
                // Create new announcement
                await AnnouncementService.CreateAnnouncementAsync(editingAnnouncement);
            }
            
            await LoadAnnouncements();
            HideModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving announcement: {ex.Message}");
        }
        finally
        {
            isLoadingModal = false;
        }
    }

    // TOGGLE PIN ON ANNOUNCEMENT
    private async Task TogglePin(Guid announcementId)
    {
        try
        {
            await AnnouncementService.TogglePinAsync(announcementId, currentUserId);
            await LoadAnnouncements();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling pin: {ex.Message}");
        }
    }

    // DELETE ANNOUNCEMENT
    private async Task DeleteAnnouncement(Guid announcementId)
    {
        try
        {
            if (await AnnouncementService.DeleteAnnouncementAsync(announcementId, currentUserId))
            {
                await LoadAnnouncements();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting announcement: {ex.Message}");
        }
    }

    // INCREMENT VIEW COUNT
    private async Task IncrementView(Guid announcementId)
    {
        try
        {
            await AnnouncementService.IncrementViewCountAsync(announcementId);
            // Update local view count without reloading everything
            var announcement = announcements?.FirstOrDefault(a => a.AnnouncementId == announcementId);
            if (announcement != null)
            {
                announcement.ViewCount++;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error incrementing view count: {ex.Message}");
        }
    }

// MODAL HANDLING
    // Close modal and reset editing announcement
    private void HideModal()
    {
        showModal = false;
        editingAnnouncement = new() 
        { 
            Title = "",
            Content = "",
            AuthorId = "",
            AuthorName = "",
            AuthorType = UserRole.Benefactor
        };
    }

// ANNOUNCEMENT EXPANSION (SHOW MORE/LESS)
    // Check if announcement is expanded
    private bool IsAnnouncementExpanded(Guid announcementId)
    {
    return expandedAnnouncements.Contains(announcementId);
    }

    // Expand or collapse announcement details
    private void ToggleAnnouncementExpansion(Guid announcementId)
    {
        if (expandedAnnouncements.Contains(announcementId))
        {
            expandedAnnouncements.Remove(announcementId);
        }
        else
        {
            expandedAnnouncements.Add(announcementId);
        }
        StateHasChanged();
    }

// UI HELPERS
    // Provide tab-specific description
    private string GetTabDescription()
    {
        return activeTab switch
        {
            "all" => "All announcements from institutions and benefactors",
            "institution" => "Announcements from educational institutions",
            "benefactor" => "Announcements from scholarship benefactors",
            "mine" => "Announcements you have created",
            _ => "Announcements"
        };
    }

    // Provide empty state title based on tab
    private string GetEmptyStateTitle()
    {
        return activeTab switch
        {
            "all" => "No announcements found",
            "institution" => "No institution announcements",
            "benefactor" => "No benefactor announcements", 
            "mine" => "You haven't created any announcements yet",
            _ => "No announcements found"
        };
    }

    private string GetEmptyStateMessage()
    {
        // Suggest adjustments if filters/search applied
        if (!string.IsNullOrEmpty(searchTerm) || !string.IsNullOrEmpty(selectedCategory))
        {
            return "Try adjusting your search terms or filters.";
        }
        
        // Provide tab-specific empty state message
        return activeTab switch
        {
            "all" => "There are no announcements to display at this time.",
            "institution" => "No institutions have posted announcements yet.",
            "benefactor" => "No benefactors have posted announcements yet.",
            "mine" => "Click 'Create Announcement' to share information with students.",
            _ => "No announcements available."
        };
    }

    // Return count of announcements based on tab
    private int GetTabCount()
    {
        return activeTab switch
        {
            "all" => announcements?.Count ?? 0,
            "institution" => institutionCount,
            "benefactor" => benefactorCount,
            "mine" => myPostsCount,
            _ => 0
        };
    }

    // Return badge style based on author type
    private string GetAuthorBadgeClass(UserRole authorType)
    {
        return authorType switch
        {
            UserRole.Institution => "badge-institution",
            UserRole.Benefactor => "badge-benefactor",
            _ => "badge-normal"
        };
    }

    private string GetCategoryBadgeClass(string category)
    {
        return category switch
        {
            "Events" => "badge-events",
            "Requirements" => "badge-requirements",
            "Results" => "badge-results",
            "General" => "badge-general",
            _ => "badge-normal"
        };
    }

    private string GetPriorityBadgeClass(AnnouncementPriority priority)
    {
        return priority switch
        {
            AnnouncementPriority.High => "badge-high",
            AnnouncementPriority.Normal => "badge-normal",
            AnnouncementPriority.Low => "badge-low",
            AnnouncementPriority.Urgent => "badge-urgent",
            _ => "badge-normal"
        };
    }

    // Return icon class based on author type
    private string GetAuthorIcon(UserRole authorType)
    {
        return authorType switch
        {
            UserRole.Institution => "bi bi-building",
            UserRole.Benefactor => "bi bi-hand-thumbs-up",
            _ => "bi bi-person"
        };
    }

    // Return color based on announcement priority
    private string GetPriorityColor(AnnouncementPriority priority)
    {
        return priority switch
        {
            AnnouncementPriority.Low => "secondary",
            AnnouncementPriority.Normal => "primary",
            AnnouncementPriority.High => "warning",
            AnnouncementPriority.Urgent => "danger",
            _ => "primary"
        };
    }
}