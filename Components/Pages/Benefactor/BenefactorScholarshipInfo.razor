@page "/dashboard/benefactor/scholarships-info/{ScholarshipId:int}"
@attribute [Authorize(Roles = "Benefactor,SuperAdmin")]
@layout Layout.BenefactorDashLayout

@using Microsoft.EntityFrameworkCore
@using c2_eskolar.Data
@using c2_eskolar.Models
@using Microsoft.AspNetCore.Components.Forms
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject c2_eskolar.Services.BenefactorProfileService BenefactorProfileService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Microsoft.AspNetCore.Identity.UserManager<Microsoft.AspNetCore.Identity.IdentityUser> UserManager
@inject IJSRuntime JS
@inject c2_eskolar.Services.BlobStorageService BlobStorageService

@code {
    [Parameter] public int ScholarshipId { get; set; }
    private Scholarship? scholarship;
    private List<ScholarshipApplication> studentApplicants = new();
    private List<ScholarshipApplication> acceptedStudents = new();
    private bool isEditMode = false;

    private Scholarship editableScholarship = new Scholarship 
    { 
        Title = string.Empty, 
        Benefits = string.Empty, 
        ApplicationDeadline = DateTime.Now.AddMonths(3) // Set a reasonable default deadline
    };
    private string? errorMessage;
    private string? successMessage;
    private bool showStudentList = false;
    private bool isSaving = false;
    private Guid? currentBenefactorProfileId = null;
    private string? scholarshipIconSasUrl = null;
    private string targetInstitutionNames = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentBenefactor();
        await LoadScholarship();
    }

    private async Task LoadCurrentBenefactor()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                var user = await UserManager.GetUserAsync(authState.User);
                if (user != null)
                {
                    using var context = await DbContextFactory.CreateDbContextAsync();
                    var benefactorProfile = await context.BenefactorProfiles
                        .FirstOrDefaultAsync(bp => bp.UserId == user.Id);
                    currentBenefactorProfileId = benefactorProfile?.BenefactorProfileId;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading benefactor: {ex.Message}");
        }
    }

    private async Task LoadScholarship()
    {
        using var context = await DbContextFactory.CreateDbContextAsync();
        scholarship = await context.Scholarships
            .Include(s => s.Institution)
            .Include(s => s.Benefactor)
            .Include(s => s.Applications)
                .ThenInclude(a => a.Student)
            .FirstOrDefaultAsync(s => s.ScholarshipId == ScholarshipId);

        if (scholarship != null)
        {
            // Debug: Log the IconUrl value
            Console.WriteLine($"🔍 DEBUG: Scholarship ID {scholarship.ScholarshipId} - IconUrl: '{scholarship.IconUrl}'");
            
            // Generate secure SAS URL for the scholarship icon
            scholarshipIconSasUrl = GetSecureIconUrl(scholarship.IconUrl);
            
            // Fetch target institution names if targeted
            if (scholarship.VisibilityType == "targeted" && !string.IsNullOrWhiteSpace(scholarship.TargetInstitutionIds))
            {
                var institutionIds = scholarship.TargetInstitutionIds
                    .Split(',', StringSplitOptions.RemoveEmptyEntries)
                    .Select(id => id.Trim())
                    .Where(id => Guid.TryParse(id, out _))
                    .Select(id => Guid.Parse(id))
                    .ToList();
                
                if (institutionIds.Any())
                {
                    var institutions = await context.InstitutionProfiles
                        .Where(i => institutionIds.Contains(i.InstitutionProfileId))
                        .Select(i => i.InstitutionName)
                        .ToListAsync();
                    
                    targetInstitutionNames = string.Join(", ", institutions);
                }
            }
            
            studentApplicants = scholarship.Applications
                .Where(a => a.Student != null)
                .ToList();
            acceptedStudents = scholarship.Applications
                .Where(a => a.Student != null && a.Status == "Accepted")
                .ToList();
            // Copy scholarship to editableScholarship for editing
            editableScholarship = new Scholarship
            {
                ScholarshipId = scholarship.ScholarshipId,
                Title = scholarship.Title ?? string.Empty,
                Description = scholarship.Description,
                Benefits = scholarship.Benefits ?? string.Empty,
                IsActive = scholarship.IsActive,
                Eligibility = scholarship.Eligibility,
                Requirements = scholarship.Requirements,
                ApplicationDeadline = scholarship.ApplicationDeadline,
                SlotsAvailable = scholarship.SlotsAvailable,
                MinimumGPA = scholarship.MinimumGPA,
                RequiredCourse = scholarship.RequiredCourse,
                RequiredYearLevel = scholarship.RequiredYearLevel,
                RequiredUniversity = scholarship.RequiredUniversity,
                ExternalApplicationUrl = scholarship.ExternalApplicationUrl,
                IconUrl = scholarship.IconUrl,
                // Copy foreign keys to maintain relationships
                BenefactorProfileId = scholarship.BenefactorProfileId,
                InstitutionProfileId = scholarship.InstitutionProfileId
            };
        }
    }

    private void EnterEditMode()
    {
        isEditMode = true;
        errorMessage = null;
        successMessage = null;
    }

    private void CancelEdit()
    {
        isEditMode = false;
        errorMessage = null;
        successMessage = null;
        // Reset editableScholarship to original
        if (scholarship != null)
        {
            editableScholarship = new Scholarship
            {
                ScholarshipId = scholarship.ScholarshipId,
                Title = scholarship.Title ?? string.Empty,
                Description = scholarship.Description,
                Benefits = scholarship.Benefits ?? string.Empty,
                IsActive = scholarship.IsActive,
                Eligibility = scholarship.Eligibility,
                Requirements = scholarship.Requirements,
                ApplicationDeadline = scholarship.ApplicationDeadline,
                SlotsAvailable = scholarship.SlotsAvailable,
                MinimumGPA = scholarship.MinimumGPA,
                RequiredCourse = scholarship.RequiredCourse,
                RequiredYearLevel = scholarship.RequiredYearLevel,
                RequiredUniversity = scholarship.RequiredUniversity,
                ExternalApplicationUrl = scholarship.ExternalApplicationUrl,
                IconUrl = scholarship.IconUrl,
                // Copy foreign keys to maintain relationships
                BenefactorProfileId = scholarship.BenefactorProfileId,
                InstitutionProfileId = scholarship.InstitutionProfileId
            };
        }
    }

    private async Task SaveChangesAsync()
    {
        isSaving = true;
        errorMessage = null;
        successMessage = null;

        // Validate required fields
        if (string.IsNullOrWhiteSpace(editableScholarship.Title))
        {
            errorMessage = "Title is required.";
            isSaving = false;
            return;
        }

        if (string.IsNullOrWhiteSpace(editableScholarship.Benefits))
        {
            errorMessage = "Benefits field is required.";
            isSaving = false;
            return;
        }

        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            var existing = await context.Scholarships.FindAsync(editableScholarship.ScholarshipId);
            if (existing == null)
            {
                errorMessage = "Scholarship not found.";
                return;
            }

            // Update fields
            existing.Title = editableScholarship.Title.Trim();
            existing.Description = string.IsNullOrWhiteSpace(editableScholarship.Description) ? null : editableScholarship.Description.Trim();
            existing.Benefits = editableScholarship.Benefits.Trim();
            existing.IsActive = editableScholarship.IsActive;
            existing.Eligibility = string.IsNullOrWhiteSpace(editableScholarship.Eligibility) ? null : editableScholarship.Eligibility.Trim();
            existing.Requirements = string.IsNullOrWhiteSpace(editableScholarship.Requirements) ? null : editableScholarship.Requirements.Trim();
            existing.ApplicationDeadline = editableScholarship.ApplicationDeadline;
            existing.SlotsAvailable = editableScholarship.SlotsAvailable;
            existing.MinimumGPA = editableScholarship.MinimumGPA;
            existing.RequiredCourse = string.IsNullOrWhiteSpace(editableScholarship.RequiredCourse) ? null : editableScholarship.RequiredCourse.Trim();
            existing.RequiredYearLevel = editableScholarship.RequiredYearLevel;
            existing.RequiredUniversity = string.IsNullOrWhiteSpace(editableScholarship.RequiredUniversity) ? null : editableScholarship.RequiredUniversity.Trim();
            existing.ExternalApplicationUrl = string.IsNullOrWhiteSpace(editableScholarship.ExternalApplicationUrl) ? null : editableScholarship.ExternalApplicationUrl.Trim();
            existing.UpdatedAt = DateTime.Now;

            // Save changes
            var changes = await context.SaveChangesAsync();
            
            if (changes > 0)
            {
                successMessage = "Scholarship updated successfully.";
                isEditMode = false;
                await LoadScholarship(); // Reload to reflect changes
            }
            else
            {
                errorMessage = "No changes were made to the scholarship.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving changes: {ex.Message}";
            // Log the full exception for debugging
            Console.WriteLine($"SaveChangesAsync Exception: {ex}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task GoBack()
    {
        await JS.InvokeVoidAsync("history.back");
    }

    /// <summary>
    /// Converts a blob URL to a secure SAS URL for display
    /// </summary>
    private string GetSecureIconUrl(string? iconUrl)
    {
        if (string.IsNullOrEmpty(iconUrl))
        {
            return string.Empty;
        }

        try
        {
            // If it's already a data URL (base64), return as-is
            if (iconUrl.StartsWith("data:"))
            {
                return iconUrl;
            }

            // If it's a blob storage URL, convert to SAS URL
            if (iconUrl.Contains("blob.core.windows.net"))
            {
                var sasUrl = BlobStorageService.GetPhotoSasUrlFromBlobUrl(iconUrl, 480); // 8 hours validity
                Console.WriteLine($"🔐 Generated SAS URL for icon: {sasUrl.Substring(0, Math.Min(50, sasUrl.Length))}...");
                return sasUrl;
            }

            // Return original URL for other cases
            return iconUrl;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ Error generating secure icon URL: {ex.Message}");
            return iconUrl; // Return original URL on error
        }
    }
}

@if (scholarship == null)
{
    <div class="text-center my-5">
        <div class="spinner-border text-primary" role="status"></div>
        <p>Loading scholarship details...</p>
    </div>
}
else
{
    <!-- Back Button -->
    <button class="btn btn-outline-primary mb-4 animate__animated animate__fadeIn d-flex align-items-center gap-2" 
            style="border-radius: 8px; padding: 0.5rem 1.25rem; font-weight: 500;" 
            @onclick="GoBack">
        <span style="font-size:1.2rem;">←</span>
        <span>Back</span>
    </button>

    <!-- Professional Header Banner -->
    <div class="scholarship-banner mb-4 animate__animated animate__fadeIn" 
         style="background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%); 
                border-radius: 16px; 
                padding: 2.5rem; 
                box-shadow: 0 8px 32px rgba(30, 64, 175, 0.15);
                position: relative;
                overflow: hidden;">
        
        <!-- Subtle background pattern -->
        <div style="position: absolute; top: 0; right: 0; width: 300px; height: 300px; 
                    background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
                    border-radius: 50%;
                    transform: translate(30%, -30%);"></div>
        
        <div class="d-flex align-items-center gap-4" style="position: relative; z-index: 1;">
            <!-- Icon Container -->
            <div class="flex-shrink-0">
                <div style="width: 100px; height: 100px; 
                           border-radius: 20px; 
                           background: white; 
                           display: flex; 
                           align-items: center; 
                           justify-content: center; 
                           box-shadow: 0 4px 16px rgba(0,0,0,0.1);
                           border: 3px solid rgba(255,255,255,0.3);">
                    @if (!string.IsNullOrEmpty(scholarshipIconSasUrl))
                    {
                        <img src="@scholarshipIconSasUrl" alt="@scholarship.Title Icon" 
                             style="width: 80px; height: 80px; border-radius: 14px; object-fit: cover;" 
                             onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                        <div style="width: 80px; height: 80px; 
                                   border-radius: 14px; 
                                   background: linear-gradient(135deg, #3b82f6, #60a5fa); 
                                   display: none; 
                                   align-items: center; 
                                   justify-content: center; 
                                   color: white; 
                                   font-size: 2.5rem;">
                            🎓
                        </div>
                    }
                    else
                    {
                        <div style="width: 80px; height: 80px; 
                                   border-radius: 14px; 
                                   background: linear-gradient(135deg, #3b82f6, #60a5fa); 
                                   display: flex; 
                                   align-items: center; 
                                   justify-content: center; 
                                   color: white; 
                                   font-size: 2.5rem;">
                            🎓
                        </div>
                    }
                </div>
            </div>

            <!-- Content -->
            <div class="flex-grow-1">
                <h1 class="mb-2 fw-bold" style="color: white; font-size: 2.25rem; letter-spacing: -0.5px;">
                    @scholarship.Title
                </h1>
                
                <div class="d-flex align-items-center flex-wrap gap-2 mb-3">
                    <span class="badge" style="background: rgba(255,255,255,0.2); 
                                              color: white; 
                                              padding: 0.5rem 1rem; 
                                              font-size: 0.95rem; 
                                              font-weight: 500;
                                              border-radius: 8px;">
                        @(!string.IsNullOrEmpty(scholarship.Institution?.InstitutionName)
                            ? scholarship.Institution.InstitutionName
                            : scholarship.Benefactor?.OrganizationName ?? "Unknown Provider")
                    </span>
                </div>

                <!-- Status Badges -->
                <div class="d-flex align-items-center flex-wrap gap-2">
                    <span class="badge" style="background: white; 
                                              color: #1e40af; 
                                              padding: 0.4rem 0.9rem; 
                                              font-size: 0.875rem;
                                              font-weight: 600;
                                              border-radius: 6px;
                                              box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                        📅 @scholarship.ApplicationDeadline.ToString("MMM dd, yyyy")
                    </span>
                    @if (scholarship.SlotsAvailable.HasValue && scholarship.SlotsAvailable.Value > 0)
                    {
                        <span class="badge" style="background: rgba(255,255,255,0.25); 
                                                  color: white; 
                                                  padding: 0.4rem 0.9rem; 
                                                  font-size: 0.875rem;
                                                  font-weight: 600;
                                                  border-radius: 6px;">
                            👥 @scholarship.SlotsAvailable Slots
                        </span>
                    }
                    <span class="badge" style="background: @(scholarship.VisibilityType == "open" ? "#8b5cf6" : scholarship.VisibilityType == "targeted" ? "#f59e0b" : "#6b7280"); 
                                              color: white; 
                                              padding: 0.4rem 0.9rem; 
                                              font-size: 0.875rem;
                                              font-weight: 600;
                                              border-radius: 6px;">
                        @(scholarship.VisibilityType == "open" ? "🌐 Open" : scholarship.VisibilityType == "targeted" ? "🎯 Targeted" : "👁️ " + scholarship.VisibilityType)
                    </span>
                </div>
            </div>

            <!-- Edit Button -->
            @if (!isEditMode && scholarship?.BenefactorProfileId != null && currentBenefactorProfileId != null && scholarship.BenefactorProfileId == currentBenefactorProfileId)
            {
                <div class="flex-shrink-0">
                    <button class="btn animate__animated animate__fadeIn" 
                            style="background: white; 
                                   color: #1e40af; 
                                   border: none; 
                                   padding: 0.75rem 1.5rem; 
                                   border-radius: 10px; 
                                   font-weight: 600;
                                   box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                                   transition: all 0.3s ease;"
                            @onclick="EnterEditMode">
                        ✏️ Edit
                    </button>
                </div>
            }
        </div>
    </div>

    <div class="container-fluid px-2 px-md-4">
        <div class="row gx-4 gy-4">
            <!-- 📄 Scholarship Info (Left Column, Categorized) -->
            <div class="col-lg-8 mb-5 animate__animated animate__fadeInUp">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mb-2">@errorMessage</div>
                }
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-primary mb-2">@successMessage</div>
                }

                <EditForm Model="editableScholarship" OnValidSubmit="SaveChangesAsync" class="mb-3">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger" />
                    
                    <!-- Visibility & Targeting -->
                    <div class="card shadow-sm border-0 mb-3 animate__animated animate__fadeIn" 
                         style="border-radius: 12px; overflow: hidden;">
                        <div class="card-header text-white fw-semibold py-3 px-4" 
                             style="background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%); 
                                    font-size: 1.05rem; 
                                    border: none;">
                            🌐 Visibility & Targeting
                        </div>
                        <div class="card-body bg-white text-dark py-3 px-4" style="background: #f9fafb !important;">
                            <div class="mb-3">
                                <label class="form-label fw-semibold mb-2" style="color: #374151;">Visibility Type</label>
                                <div>
                                    <span class="badge" style="background: @(scholarship?.VisibilityType == "open" ? "#8b5cf6" : "#f59e0b"); 
                                                                 color: white; 
                                                                 padding: 0.5rem 1rem; 
                                                                 font-size: 0.9rem; 
                                                                 font-weight: 600;
                                                                 border-radius: 8px;">
                                        @(scholarship?.VisibilityType == "open" ? "🌐 Open to All Students" : "🎯 Targeted to Specific Institutions")
                                    </span>
                                </div>
                            </div>
                            @if (scholarship?.VisibilityType == "targeted" && !string.IsNullOrWhiteSpace(targetInstitutionNames))
                            {
                                <div class="mb-0">
                                    <label class="form-label fw-semibold mb-2" style="color: #374151;">Target Institutions</label>
                                    <p class="text-secondary mb-0">@targetInstitutionNames</p>
                                    <small class="text-muted">Institutions that can see this scholarship</small>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Basic Information -->
                    <div class="card shadow-sm border-0 mb-3 animate__animated animate__fadeIn" 
                         style="border-radius: 12px; overflow: hidden;">
                        <div class="card-header text-white fw-semibold py-3 px-4" 
                             style="background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%); 
                                    font-size: 1.05rem; 
                                    border: none;">
                            📋 Basic Information
                        </div>
                        <div class="card-body bg-white text-dark py-3 px-4" style="background: #f9fafb !important;">
                            <div class="mb-3">
                                <label class="form-label fw-semibold mb-2" style="color: #374151;">Provider</label>
                                <p class="text-secondary mb-0">
                                    @(scholarship != null && !string.IsNullOrEmpty(scholarship.Institution?.InstitutionName)
                                        ? scholarship.Institution.InstitutionName
                                        : scholarship?.Benefactor?.OrganizationName ?? "Unknown")
                                </p>
                            </div>
                            @if (isEditMode)
                            {
                                <div class="mb-3">
                                    <label class="form-label fw-semibold" style="color: #374151;">
                                        Title <span class="text-danger">*</span>
                                    </label>
                                    <InputText class="form-control" 
                                               style="border-radius: 8px; border: 1px solid #d1d5db; padding: 0.625rem 0.875rem;"
                                               @bind-Value="editableScholarship.Title" 
                                               placeholder="Enter scholarship title" />
                                    <ValidationMessage For="@(() => editableScholarship.Title)" class="text-danger small mt-1" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label fw-semibold" style="color: #374151;">Description</label>
                                    <InputTextArea class="form-control" 
                                                   style="border-radius: 8px; border: 1px solid #d1d5db; padding: 0.625rem 0.875rem; min-height: 100px;"
                                                   @bind-Value="editableScholarship.Description" 
                                                   placeholder="Brief description of the scholarship" />
                                    <ValidationMessage For="@(() => editableScholarship.Description)" class="text-danger small mt-1" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label fw-semibold" style="color: #374151;">
                                        Benefits <span class="text-danger">*</span>
                                    </label>
                                    <InputTextArea class="form-control" 
                                                   style="border-radius: 8px; border: 1px solid #d1d5db; padding: 0.625rem 0.875rem; min-height: 100px;"
                                                   @bind-Value="editableScholarship.Benefits" 
                                                   placeholder="List the benefits and what's included" />
                                    <ValidationMessage For="@(() => editableScholarship.Benefits)" class="text-danger small mt-1" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label fw-semibold" style="color: #374151;">
                                        Application Deadline <span class="text-danger">*</span>
                                    </label>
                                    <InputDate class="form-control" 
                                               style="border-radius: 8px; border: 1px solid #d1d5db; padding: 0.625rem 0.875rem;"
                                               @bind-Value="editableScholarship.ApplicationDeadline" />
                                    <ValidationMessage For="@(() => editableScholarship.ApplicationDeadline)" class="text-danger small mt-1" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label fw-semibold" style="color: #374151;">Slots Available</label>
                                    <InputNumber class="form-control" 
                                                 style="border-radius: 8px; border: 1px solid #d1d5db; padding: 0.625rem 0.875rem;"
                                                 @bind-Value="editableScholarship.SlotsAvailable" 
                                                 placeholder="0" />
                                    <ValidationMessage For="@(() => editableScholarship.SlotsAvailable)" class="text-danger small mt-1" />
                                </div>
                            }
                            else
                            {
                                @if (scholarship != null && !string.IsNullOrWhiteSpace(scholarship.Description))
                                {
                                    <div class="mb-3">
                                        <label class="form-label fw-semibold mb-2" style="color: #374151;">Description</label>
                                        <p class="text-secondary mb-0" style="line-height: 1.6;">@scholarship.Description</p>
                                    </div>
                                }
                                <div class="mb-3">
                                    <label class="form-label fw-semibold mb-2" style="color: #374151;">Benefits</label>
                                    <p class="text-secondary mb-0" style="line-height: 1.6; white-space: pre-wrap;">@(scholarship != null ? scholarship.Benefits : "")</p>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label fw-semibold mb-2" style="color: #374151;">Application Deadline</label>
                                    <p class="text-secondary mb-0">@(scholarship != null ? scholarship.ApplicationDeadline.ToString("MMMM dd, yyyy") : "")</p>
                                </div>
                                @if (scholarship?.SlotsAvailable.HasValue == true && scholarship.SlotsAvailable.Value > 0)
                                {
                                    <div class="mb-0">
                                        <label class="form-label fw-semibold mb-2" style="color: #374151;">Slots Available</label>
                                        <p class="text-secondary mb-0 fs-5 fw-bold">@scholarship.SlotsAvailable</p>
                                    </div>
                                }
                            }
                        </div>
                    </div>

                    <!-- Eligibility & Requirements -->
                    <div class="card shadow-sm border-0 mb-3 animate__animated animate__fadeIn" 
                         style="border-radius: 12px; overflow: hidden;">
                        <div class="card-header text-white fw-semibold py-3 px-4" 
                             style="background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%); 
                                    font-size: 1.05rem; 
                                    border: none;">
                            📝 Eligibility & Requirements
                        </div>
                        <div class="card-body bg-white text-dark py-3 px-4" style="background: #f9fafb !important;">
                            @if (isEditMode)
                            {
                                <div class="mb-3">
                                    <label class="form-label fw-semibold" style="color: #374151;">Required Course</label>
                                    <InputText class="form-control" 
                                               style="border-radius: 8px; border: 1px solid #d1d5db; padding: 0.625rem 0.875rem;"
                                               @bind-Value="editableScholarship.RequiredCourse" 
                                               placeholder="e.g., Computer Science, Engineering" />
                                    <small class="form-text text-muted mt-1">Leave blank if open to all courses</small>
                                    <ValidationMessage For="@(() => editableScholarship.RequiredCourse)" class="text-danger small mt-1" />
                                </div>
                                <div class="row g-3 mb-3">
                                    <div class="col-md-6">
                                        <label class="form-label fw-semibold" style="color: #374151;">Eligibility</label>
                                        <InputTextArea class="form-control" 
                                                       style="border-radius: 8px; border: 1px solid #d1d5db; padding: 0.625rem 0.875rem; min-height: 120px;"
                                                       @bind-Value="editableScholarship.Eligibility" 
                                                       placeholder="Define who is eligible to apply" />
                                        <ValidationMessage For="@(() => editableScholarship.Eligibility)" class="text-danger small mt-1" />
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label fw-semibold" style="color: #374151;">Requirements</label>
                                        <InputTextArea class="form-control" 
                                                       style="border-radius: 8px; border: 1px solid #d1d5db; padding: 0.625rem 0.875rem; min-height: 120px;"
                                                       @bind-Value="editableScholarship.Requirements" 
                                                       placeholder="List what applicants need to provide" />
                                        <ValidationMessage For="@(() => editableScholarship.Requirements)" class="text-danger small mt-1" />
                                    </div>
                                </div>
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <label class="form-label fw-semibold" style="color: #374151;">Minimum GPA</label>
                                        <InputNumber class="form-control" 
                                                     style="border-radius: 8px; border: 1px solid #d1d5db; padding: 0.625rem 0.875rem;"
                                                     @bind-Value="editableScholarship.MinimumGPA" 
                                                     placeholder="0.0" />
                                        <ValidationMessage For="@(() => editableScholarship.MinimumGPA)" class="text-danger small mt-1" />
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label fw-semibold" style="color: #374151;">Required Year Level</label>
                                        <InputNumber class="form-control" 
                                                     style="border-radius: 8px; border: 1px solid #d1d5db; padding: 0.625rem 0.875rem;"
                                                     @bind-Value="editableScholarship.RequiredYearLevel" 
                                                     placeholder="0 for any year" />
                                        <ValidationMessage For="@(() => editableScholarship.RequiredYearLevel)" class="text-danger small mt-1" />
                                    </div>
                                </div>
                                <div class="mt-3">
                                    <label class="form-label fw-semibold" style="color: #374151;">Required University</label>
                                    <InputText class="form-control" 
                                               style="border-radius: 8px; border: 1px solid #d1d5db; padding: 0.625rem 0.875rem;"
                                               @bind-Value="editableScholarship.RequiredUniversity" 
                                               placeholder="Leave empty for any university" />
                                    <ValidationMessage For="@(() => editableScholarship.RequiredUniversity)" class="text-danger small mt-1" />
                                </div>
                                <div class="mt-3">
                                    <label class="form-label fw-semibold" style="color: #374151;">External Application URL</label>
                                    <InputText class="form-control" 
                                               style="border-radius: 8px; border: 1px solid #d1d5db; padding: 0.625rem 0.875rem;"
                                               @bind-Value="editableScholarship.ExternalApplicationUrl" 
                                               placeholder="https://example.com/apply" />
                                    <small class="form-text text-muted mt-1">Leave empty for internal applications only</small>
                                    <ValidationMessage For="@(() => editableScholarship.ExternalApplicationUrl)" class="text-danger small mt-1" />
                                </div>
                            }
                            else
                            {
                                @if (scholarship != null && !string.IsNullOrWhiteSpace(scholarship.RequiredCourse))
                                {
                                    <div class="mb-3">
                                        <label class="form-label fw-semibold mb-2" style="color: #374151;">Required Course</label>
                                        <p class="text-secondary mb-0">@scholarship.RequiredCourse</p>
                                    </div>
                                }
                                @if (scholarship != null && !string.IsNullOrWhiteSpace(scholarship.Eligibility))
                                {
                                    <div class="mb-3">
                                        <label class="form-label fw-semibold mb-2" style="color: #374151;">Eligibility</label>
                                        <p class="text-secondary mb-0" style="line-height: 1.6; white-space: pre-wrap;">@scholarship.Eligibility</p>
                                    </div>
                                }
                                @if (scholarship != null && !string.IsNullOrWhiteSpace(scholarship.Requirements))
                                {
                                    <div class="mb-3">
                                        <label class="form-label fw-semibold mb-2" style="color: #374151;">Requirements</label>
                                        <p class="text-secondary mb-0" style="line-height: 1.6; white-space: pre-wrap;">@scholarship.Requirements</p>
                                    </div>
                                }
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label fw-semibold mb-2" style="color: #374151;">Minimum GPA</label>
                                        <p class="text-secondary mb-0">@(scholarship != null && scholarship.MinimumGPA.HasValue ? scholarship.MinimumGPA.Value.ToString("0.00") : "None")</p>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label fw-semibold mb-2" style="color: #374151;">Required Year Level</label>
                                        <p class="text-secondary mb-0">@(scholarship != null && scholarship.RequiredYearLevel.HasValue && scholarship.RequiredYearLevel > 0 ? $"Year {scholarship.RequiredYearLevel}" : "Any year level")</p>
                                    </div>
                                </div>
                                @if (scholarship != null && !string.IsNullOrWhiteSpace(scholarship.RequiredUniversity))
                                {
                                    <div class="mb-3">
                                        <label class="form-label fw-semibold mb-2" style="color: #374151;">Required University</label>
                                        <p class="text-secondary mb-0">@scholarship.RequiredUniversity</p>
                                    </div>
                                }
                                @if (scholarship != null && !string.IsNullOrWhiteSpace(scholarship.ExternalApplicationUrl))
                                {
                                    <div class="mb-0">
                                        <label class="form-label fw-semibold mb-2" style="color: #374151;">External Application</label>
                                        <p class="mb-0">
                                            <a href="@scholarship.ExternalApplicationUrl" 
                                               target="_blank" 
                                               style="color: #3b82f6; text-decoration: none; font-weight: 500;"
                                               class="d-inline-flex align-items-center gap-1">
                                                @scholarship.ExternalApplicationUrl
                                                <span style="font-size: 0.875rem;">↗</span>
                                            </a>
                                        </p>
                                    </div>
                                }
                            }
                        </div>
                    </div>

                    @if (isEditMode)
                    {
                        <div class="d-flex gap-2 mt-4">
                            <button type="submit" 
                                    class="btn animate__animated animate__fadeIn" 
                                    style="background: linear-gradient(135deg, #10b981 0%, #059669 100%); 
                                           color: white; 
                                           border: none; 
                                           padding: 0.75rem 2rem; 
                                           border-radius: 10px; 
                                           font-weight: 600;
                                           box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);"
                                    disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Saving...</span>
                                }
                                else
                                {
                                    <span>💾 Save Changes</span>
                                }
                            </button>
                            <button type="button" 
                                    class="btn animate__animated animate__fadeIn" 
                                    style="background: #6b7280; 
                                           color: white; 
                                           border: none; 
                                           padding: 0.75rem 2rem; 
                                           border-radius: 10px; 
                                           font-weight: 600;"
                                    @onclick="CancelEdit" 
                                    disabled="@isSaving">
                                ✕ Cancel
                            </button>
                        </div>
                    }
                </EditForm>


            </div>

            <!-- 👥 Students Helped & Applicants (Right Column, toggled by button) -->
            <div class="col-lg-4 mb-5 animate__animated animate__fadeInRight">
                <div class="card shadow-sm border-0 animate__animated animate__fadeIn mb-4" 
                     style="border-radius: 12px; overflow: hidden;">
                    <div class="card-header text-white fw-semibold py-3 px-4" 
                         style="background: linear-gradient(135deg, #10b981 0%, #059669 100%); 
                                font-size: 1.05rem; 
                                border: none;">
                        ✓ Students Helped
                    </div>
                    <div class="card-body py-3 px-4" 
                         style="max-height: 250px; overflow-y: auto; background: #f9fafb !important;">
                        @if (!acceptedStudents.Any())
                        {
                            <p class="text-muted mb-0">No students have been accepted yet.</p>
                        }
                        else
                        {
                            <ul class="list-group list-group-flush">
                                @foreach (var application in acceptedStudents)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center" 
                                        style="background: white; border: none; border-bottom: 1px solid #e5e7eb; padding: 1rem;">
                                        <span class="fw-semibold">@application.Student?.FirstName @application.Student?.LastName</span>
                                        <NavLink class="btn btn-sm text-white" 
                                                 style="background: linear-gradient(135deg, #10b981 0%, #059669 100%); 
                                                        border: none; 
                                                        padding: 0.4rem 1rem; 
                                                        border-radius: 6px;"
                                                 href="@($"/dashboard/benefactor/applications/review/{application.ScholarshipApplicationId}")">
                                            View
                                        </NavLink>
                                    </li>
                                }
                            </ul>
                        }
                    </div>
                </div>
                <button class="btn w-100 mb-3" 
                        style="background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%); 
                               color: white; 
                               border: none; 
                               padding: 0.75rem 1.5rem; 
                               border-radius: 10px; 
                               font-weight: 600;
                               box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
                               transition: all 0.3s ease;" 
                        @onclick="() => showStudentList = !showStudentList">
                    @if (showStudentList)
                    {
                        <span>▲ Hide Student Applicants</span>
                    }
                    else
                    {
                        <span>▼ Show Student Applicants</span>
                    }
                </button>
                @if (showStudentList)
                {
                    <div class="card shadow-sm border-0 animate__animated animate__fadeIn" 
                         style="border-radius: 12px; overflow: hidden;">
                        <div class="card-header text-white fw-semibold py-3 px-4" 
                             style="background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%); 
                                    font-size: 1.05rem; 
                                    border: none;">
                            📋 Student Applicants
                        </div>
                        <div class="card-body py-3 px-4" 
                             style="max-height: 500px; overflow-y: auto; background: #f9fafb !important;">
                            @if (!studentApplicants.Any())
                            {
                                <p class="text-muted">No students have applied yet.</p>
                            }
                            else
                            {
                                <ul class="list-group list-group-flush">
                                    @foreach (var application in studentApplicants)
                                    {
                                        <li class="list-group-item d-flex justify-content-between align-items-center" 
                                            style="background: white; border: none; border-bottom: 1px solid #e5e7eb; padding: 1rem;">
                                            <span class="fw-semibold">@application.Student?.FirstName @application.Student?.LastName</span>
                                            <NavLink class="btn btn-sm text-white" 
                                                     style="background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%); 
                                                            border: none; 
                                                            padding: 0.4rem 1rem; 
                                                            border-radius: 6px;"
                                                     href="@($"/dashboard/benefactor/applications/review/{application.ScholarshipApplicationId}")">
                                                View
                                            </NavLink>
                                        </li>
                                    }
                                </ul>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}
