@page "/dashboard/benefactor/scholarships-info/{ScholarshipId:int}"
@attribute [Authorize(Roles = "Benefactor,SuperAdmin")]
@layout Layout.BenefactorDashLayout

@using Microsoft.EntityFrameworkCore
@using c2_eskolar.Data
@using c2_eskolar.Models
@using Microsoft.AspNetCore.Components.Forms
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject c2_eskolar.Services.BenefactorProfileService BenefactorProfileService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Microsoft.AspNetCore.Identity.UserManager<Microsoft.AspNetCore.Identity.IdentityUser> UserManager
@inject IJSRuntime JS
@inject c2_eskolar.Services.BlobStorageService BlobStorageService

@code {
    [Parameter] public int ScholarshipId { get; set; }
    private Scholarship? scholarship;
    private List<ScholarshipApplication> studentApplicants = new();
    private List<ScholarshipApplication> acceptedStudents = new();
    private bool isEditMode = false;

    private Scholarship editableScholarship = new Scholarship 
    { 
        Title = string.Empty, 
        Benefits = string.Empty, 
        ApplicationDeadline = DateTime.Now.AddMonths(3) // Set a reasonable default deadline
    };
    private string? errorMessage;
    private string? successMessage;
    private bool showStudentList = false;
    private bool isSaving = false;
    private Guid? currentBenefactorProfileId = null;
    private string? scholarshipIconSasUrl = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentBenefactor();
        await LoadScholarship();
    }

    private async Task LoadCurrentBenefactor()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                var user = await UserManager.GetUserAsync(authState.User);
                if (user != null)
                {
                    using var context = await DbContextFactory.CreateDbContextAsync();
                    var benefactorProfile = await context.BenefactorProfiles
                        .FirstOrDefaultAsync(bp => bp.UserId == user.Id);
                    currentBenefactorProfileId = benefactorProfile?.BenefactorProfileId;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading benefactor: {ex.Message}");
        }
    }

    private async Task LoadScholarship()
    {
        using var context = await DbContextFactory.CreateDbContextAsync();
        scholarship = await context.Scholarships
            .Include(s => s.Institution)
            .Include(s => s.Benefactor)
            .Include(s => s.Applications)
                .ThenInclude(a => a.Student)
            .FirstOrDefaultAsync(s => s.ScholarshipId == ScholarshipId);

        if (scholarship != null)
        {
            // Debug: Log the IconUrl value
            Console.WriteLine($"🔍 DEBUG: Scholarship ID {scholarship.ScholarshipId} - IconUrl: '{scholarship.IconUrl}'");
            
            // Generate secure SAS URL for the scholarship icon
            scholarshipIconSasUrl = GetSecureIconUrl(scholarship.IconUrl);
            
            studentApplicants = scholarship.Applications
                .Where(a => a.Student != null)
                .ToList();
            acceptedStudents = scholarship.Applications
                .Where(a => a.Student != null && a.Status == "Accepted")
                .ToList();
            // Copy scholarship to editableScholarship for editing
            editableScholarship = new Scholarship
            {
                ScholarshipId = scholarship.ScholarshipId,
                Title = scholarship.Title ?? string.Empty,
                Description = scholarship.Description,
                Benefits = scholarship.Benefits ?? string.Empty,
                IsActive = scholarship.IsActive,
                Requirements = scholarship.Requirements,
                ApplicationDeadline = scholarship.ApplicationDeadline,
                SlotsAvailable = scholarship.SlotsAvailable,
                MinimumGPA = scholarship.MinimumGPA,
                RequiredCourse = scholarship.RequiredCourse,
                RequiredYearLevel = scholarship.RequiredYearLevel,
                RequiredUniversity = scholarship.RequiredUniversity,
                ExternalApplicationUrl = scholarship.ExternalApplicationUrl,
                IconUrl = scholarship.IconUrl,
                // Copy foreign keys to maintain relationships
                BenefactorProfileId = scholarship.BenefactorProfileId,
                InstitutionProfileId = scholarship.InstitutionProfileId
            };
        }
    }

    private void EnterEditMode()
    {
        isEditMode = true;
        errorMessage = null;
        successMessage = null;
    }

    private void CancelEdit()
    {
        isEditMode = false;
        errorMessage = null;
        successMessage = null;
        // Reset editableScholarship to original
        if (scholarship != null)
        {
            editableScholarship = new Scholarship
            {
                ScholarshipId = scholarship.ScholarshipId,
                Title = scholarship.Title ?? string.Empty,
                Description = scholarship.Description,
                Benefits = scholarship.Benefits ?? string.Empty,
                IsActive = scholarship.IsActive,
                Requirements = scholarship.Requirements,
                ApplicationDeadline = scholarship.ApplicationDeadline,
                SlotsAvailable = scholarship.SlotsAvailable,
                MinimumGPA = scholarship.MinimumGPA,
                RequiredCourse = scholarship.RequiredCourse,
                RequiredYearLevel = scholarship.RequiredYearLevel,
                RequiredUniversity = scholarship.RequiredUniversity,
                ExternalApplicationUrl = scholarship.ExternalApplicationUrl,
                IconUrl = scholarship.IconUrl,
                // Copy foreign keys to maintain relationships
                BenefactorProfileId = scholarship.BenefactorProfileId,
                InstitutionProfileId = scholarship.InstitutionProfileId
            };
        }
    }

    private async Task SaveChangesAsync()
    {
        isSaving = true;
        errorMessage = null;
        successMessage = null;

        // Validate required fields
        if (string.IsNullOrWhiteSpace(editableScholarship.Title))
        {
            errorMessage = "Title is required.";
            isSaving = false;
            return;
        }

        if (string.IsNullOrWhiteSpace(editableScholarship.Benefits))
        {
            errorMessage = "Benefits field is required.";
            isSaving = false;
            return;
        }

        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            var existing = await context.Scholarships.FindAsync(editableScholarship.ScholarshipId);
            if (existing == null)
            {
                errorMessage = "Scholarship not found.";
                return;
            }

            // Update fields
            existing.Title = editableScholarship.Title.Trim();
            existing.Description = string.IsNullOrWhiteSpace(editableScholarship.Description) ? null : editableScholarship.Description.Trim();
            existing.Benefits = editableScholarship.Benefits.Trim();
            existing.IsActive = editableScholarship.IsActive;
            existing.Requirements = string.IsNullOrWhiteSpace(editableScholarship.Requirements) ? null : editableScholarship.Requirements.Trim();
            existing.ApplicationDeadline = editableScholarship.ApplicationDeadline;
            existing.SlotsAvailable = editableScholarship.SlotsAvailable;
            existing.MinimumGPA = editableScholarship.MinimumGPA;
            existing.RequiredCourse = string.IsNullOrWhiteSpace(editableScholarship.RequiredCourse) ? null : editableScholarship.RequiredCourse.Trim();
            existing.RequiredYearLevel = editableScholarship.RequiredYearLevel;
            existing.RequiredUniversity = string.IsNullOrWhiteSpace(editableScholarship.RequiredUniversity) ? null : editableScholarship.RequiredUniversity.Trim();
            existing.ExternalApplicationUrl = string.IsNullOrWhiteSpace(editableScholarship.ExternalApplicationUrl) ? null : editableScholarship.ExternalApplicationUrl.Trim();
            existing.UpdatedAt = DateTime.Now;

            // Save changes
            var changes = await context.SaveChangesAsync();
            
            if (changes > 0)
            {
                successMessage = "Scholarship updated successfully.";
                isEditMode = false;
                await LoadScholarship(); // Reload to reflect changes
            }
            else
            {
                errorMessage = "No changes were made to the scholarship.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving changes: {ex.Message}";
            // Log the full exception for debugging
            Console.WriteLine($"SaveChangesAsync Exception: {ex}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task GoBack()
    {
        await JS.InvokeVoidAsync("history.back");
    }

    /// <summary>
    /// Converts a blob URL to a secure SAS URL for display
    /// </summary>
    private string GetSecureIconUrl(string? iconUrl)
    {
        if (string.IsNullOrEmpty(iconUrl))
        {
            return string.Empty;
        }

        try
        {
            // If it's already a data URL (base64), return as-is
            if (iconUrl.StartsWith("data:"))
            {
                return iconUrl;
            }

            // If it's a blob storage URL, convert to SAS URL
            if (iconUrl.Contains("blob.core.windows.net"))
            {
                var sasUrl = BlobStorageService.GetPhotoSasUrlFromBlobUrl(iconUrl, 480); // 8 hours validity
                Console.WriteLine($"🔐 Generated SAS URL for icon: {sasUrl.Substring(0, Math.Min(50, sasUrl.Length))}...");
                return sasUrl;
            }

            // Return original URL for other cases
            return iconUrl;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ Error generating secure icon URL: {ex.Message}");
            return iconUrl; // Return original URL on error
        }
    }
}

@if (scholarship == null)
{
    <div class="text-center my-5">
        <div class="spinner-border text-primary" role="status"></div>
        <p>Loading scholarship details...</p>
    </div>
}
else
{
    <!-- Back Button -->
    <button class="btn btn-outline-primary mb-3 animate__animated animate__fadeIn btn-sm d-flex align-items-center gap-2" @onclick="GoBack">
        <span style="font-size:1.2rem;">&#8592;</span>
        <span>Back</span>
    </button>
    <!-- 🔷 Improved Banner -->
    <div class="scholarship-banner mb-4 animate__animated animate__fadeIn" style="background: linear-gradient(90deg, #2563eb 60%, #60a5fa 100%); box-shadow: 0 4px 24px #2563eb22; border-radius: 1.5rem; padding: 2.5rem 2rem 2rem 2rem; display: flex; align-items: center; gap: 2rem; margin-right: 0;">
        <div class="d-flex align-items-center justify-content-center" style="min-width: 100px;">
            <div style="width: 90px; height: 90px; border-radius: 50%; background: #fff; display: flex; align-items: center; justify-content: center; box-shadow: 0 2px 12px #2563eb33; border: 4px solid #60a5fa;">
                @if (!string.IsNullOrEmpty(scholarshipIconSasUrl))
                {
                    <img src="@scholarshipIconSasUrl" alt="Scholarship Icon" 
                         style="width: 70px; height: 70px; border-radius: 50%; object-fit: cover;" 
                         onerror="console.error('❌ Failed to load scholarship icon:', '@scholarshipIconSasUrl'); console.warn('🔧 This may be due to Azure Blob Storage access permissions or SAS token expiry'); this.style.display='none'; this.nextElementSibling.style.display='flex';" 
                         onload="console.log('✅ Scholarship icon loaded successfully with SAS URL:', '@scholarshipIconSasUrl');" />
                    <div id="fallback-icon" style="width: 70px; height: 70px; border-radius: 50%; background: linear-gradient(135deg, #2563eb, #60a5fa); display: none; align-items: center; justify-content: center; color: white; font-size: 2rem; position: relative;">
                        🎓
                        <div style="position: absolute; bottom: -2px; right: -2px; width: 20px; height: 20px; background: #f59e0b; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 0.8rem;">🔐</div>
                    </div>
                }
                else
                {
                    <div style="width: 70px; height: 70px; border-radius: 50%; background: linear-gradient(135deg, #2563eb, #60a5fa); display: flex; align-items: center; justify-content: center; color: white; font-size: 2rem;">
                        🎓
                    </div>
                }
            </div>
        </div>
        <div class="flex-grow-1">
            <h1 class="mb-2 fw-bold" style="color: #fff; font-size: 2.3rem; letter-spacing: -1px; text-shadow: 0 2px 8px #2563eb55;">
                @scholarship.Title
            </h1>
            <div class="d-flex align-items-center mb-1">
                <span class="badge bg-white text-primary fw-semibold me-2" style="font-size: 1rem; box-shadow: 0 1px 4px #2563eb22;">
                    @(!string.IsNullOrEmpty(scholarship.Institution?.InstitutionName)
                        ? scholarship.Institution.InstitutionName
                        : scholarship.Benefactor?.OrganizationName ?? "Unknown Provider")
                </span>
                @if (scholarship != null && !string.IsNullOrWhiteSpace(scholarship.Description))
                {
                    <span class="text-white-50 ms-2" style="font-size: 1rem;">@scholarship.Description</span>
                }
            </div>
            <div class="mt-2">
                @if (scholarship != null)
                {
                    <span class="badge bg-primary text-white me-2">@scholarship.ApplicationDeadline.ToString("MMM dd, yyyy")</span>
                }
                <span class="badge bg-info text-dark me-2">Slots: @(scholarship != null ? scholarship.SlotsAvailable : 0)</span>
                <span class="badge bg-secondary text-white">@(scholarship != null && scholarship.IsActive ? "Active" : "Inactive")</span>
            </div>
        </div>
    </div>

    <div class="container-fluid px-2 px-md-4">
        <div class="row gx-4 gy-4">
            <!-- 📄 Scholarship Info (Left Column, Categorized) -->
            <div class="col-lg-8 mb-5 animate__animated animate__fadeInUp">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mb-2">@errorMessage</div>
                }
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-primary mb-2">@successMessage</div>
                }

                @if (!isEditMode && scholarship?.BenefactorProfileId != null && currentBenefactorProfileId != null && scholarship.BenefactorProfileId == currentBenefactorProfileId)
                {
                    <button class="btn btn-primary mb-2 animate__animated animate__pulse animate__infinite" @onclick="EnterEditMode">Edit</button>
                }

                <EditForm Model="editableScholarship" OnValidSubmit="SaveChangesAsync" class="mb-3">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger" />
                    <!-- Basic Information -->
                    <div class="card shadow-sm border-0 mb-2 animate__animated animate__fadeIn" style="padding: 0.75rem 1rem;">
                        <div class="card-header bg-primary text-white fw-bold py-2 px-3" style="font-size: 1rem;">Basic Information</div>
                        <div class="card-body bg-white text-dark py-2 px-3">
                            <div class="mb-2"><strong>Provider:</strong>
                                @(scholarship != null && !string.IsNullOrEmpty(scholarship.Institution?.InstitutionName)
                                    ? scholarship.Institution.InstitutionName
                                    : scholarship?.Benefactor?.OrganizationName ?? "Unknown")
                            </div>
                            @if (isEditMode)
                            {
                                <div class="mb-2">
                                    <strong>Title: <span class="text-danger">*</span></strong>
                                    <InputText class="form-control form-control-sm" @bind-Value="editableScholarship.Title" />
                                    <ValidationMessage For="@(() => editableScholarship.Title)" class="text-danger small" />
                                </div>
                                <div class="mb-2">
                                    <strong>Description:</strong>
                                    <InputTextArea class="form-control form-control-sm" @bind-Value="editableScholarship.Description" />
                                    <ValidationMessage For="@(() => editableScholarship.Description)" class="text-danger small" />
                                </div>
                                <div class="mb-2">
                                    <strong>Benefits: <span class="text-danger">*</span></strong>
                                    <InputTextArea class="form-control form-control-sm" @bind-Value="editableScholarship.Benefits" />
                                    <ValidationMessage For="@(() => editableScholarship.Benefits)" class="text-danger small" />
                                </div>
                                <div class="mb-2">
                                    <strong>Status:</strong>
                                    <InputCheckbox class="form-check-input" @bind-Value="editableScholarship.IsActive" />
                                    <span class="ms-2">@((editableScholarship.IsActive) ? "🟢 Active" : "🔴 Inactive")</span>
                                </div>
                            }
                            else
                            {
                                @if (scholarship != null && !string.IsNullOrWhiteSpace(scholarship.Description))
                                {
                                    <div class="mb-2"><strong>Description:</strong><p class="mb-1">@scholarship.Description</p></div>
                                }
                                <div class="mb-2"><strong>Benefits:</strong> <p class="mb-1">@(scholarship != null ? scholarship.Benefits : "")</p></div>
                                <div class="mb-2"><strong>Status:</strong> @(scholarship != null && scholarship.IsActive ? "🟢 Active" : "🔴 Inactive")</div>
                            }
                        </div>
                    </div>

                    <!-- Requirements -->
                    <div class="card shadow-sm border-0 mb-2 animate__animated animate__fadeIn" style="padding: 0.75rem 1rem;">
                        <div class="card-header bg-info text-white fw-bold py-2 px-3" style="font-size: 1rem;">Requirements</div>
                        <div class="card-body bg-white text-dark py-2 px-3">
                            @if (isEditMode)
                            {
                                <div class="mb-2">
                                    <strong>Requirements:</strong>
                                    <InputTextArea class="form-control form-control-sm" @bind-Value="editableScholarship.Requirements" />
                                    <ValidationMessage For="@(() => editableScholarship.Requirements)" class="text-danger small" />
                                </div>
                                <div class="mb-2">
                                    <strong>Application Deadline: <span class="text-danger">*</span></strong>
                                    <InputDate class="form-control form-control-sm" @bind-Value="editableScholarship.ApplicationDeadline" />
                                    <ValidationMessage For="@(() => editableScholarship.ApplicationDeadline)" class="text-danger small" />
                                </div>
                                <div class="mb-2">
                                    <strong>Slots Available:</strong>
                                    <InputNumber class="form-control form-control-sm" @bind-Value="editableScholarship.SlotsAvailable" />
                                    <ValidationMessage For="@(() => editableScholarship.SlotsAvailable)" class="text-danger small" />
                                </div>
                                <div class="mb-2">
                                    <strong>Minimum GPA:</strong>
                                    <InputNumber class="form-control form-control-sm" @bind-Value="editableScholarship.MinimumGPA" />
                                    <ValidationMessage For="@(() => editableScholarship.MinimumGPA)" class="text-danger small" />
                                </div>
                            }
                            else
                            {
                                <div class="mb-2"><strong>Requirements:</strong> <p class="mb-1">@(scholarship != null ? scholarship.Requirements : "")</p></div>
                                <div class="mb-2"><strong>Application Deadline:</strong> @(scholarship != null ? scholarship.ApplicationDeadline.ToString("MMMM dd, yyyy") : "")</div>
                                <div class="mb-2"><strong>Slots Available:</strong> @(scholarship != null ? scholarship.SlotsAvailable : 0)</div>
                                <div class="mb-2"><strong>Minimum GPA:</strong> @(scholarship != null ? scholarship.MinimumGPA : 0)</div>
                            }
                        </div>
                    </div>

                    <!-- Eligibility -->
                    <div class="card shadow-sm border-0 mb-2 animate__animated animate__fadeIn" style="padding: 0.75rem 1rem;">
                        <div class="card-header bg-primary text-white fw-bold py-2 px-3" style="font-size: 1rem;">Eligibility</div>
                        <div class="card-body bg-white text-dark py-2 px-3">
                            @if (isEditMode)
                            {
                                <div class="mb-2">
                                    <strong>Required Course:</strong>
                                    <InputText class="form-control form-control-sm" @bind-Value="editableScholarship.RequiredCourse" />
                                    <ValidationMessage For="@(() => editableScholarship.RequiredCourse)" class="text-danger small" />
                                </div>
                                <div class="mb-2">
                                    <strong>Required Year Level:</strong>
                                    <InputNumber class="form-control form-control-sm" @bind-Value="editableScholarship.RequiredYearLevel" />
                                    <ValidationMessage For="@(() => editableScholarship.RequiredYearLevel)" class="text-danger small" />
                                </div>
                                <div class="mb-2">
                                    <strong>Required University:</strong>
                                    <InputText class="form-control form-control-sm" @bind-Value="editableScholarship.RequiredUniversity" />
                                    <ValidationMessage For="@(() => editableScholarship.RequiredUniversity)" class="text-danger small" />
                                </div>
                            }
                            else
                            {
                                <div class="mb-2"><strong>Required Course:</strong> @(scholarship != null ? scholarship.RequiredCourse : "")</div>
                                <div class="mb-2"><strong>Required Year Level:</strong> @(scholarship != null ? scholarship.RequiredYearLevel : 0)</div>
                                <div class="mb-2"><strong>Required University:</strong> @(scholarship != null ? scholarship.RequiredUniversity : "")</div>
                            }
                        </div>
                    </div>

                    <!-- Settings -->
                    <div class="card shadow-sm border-0 mb-2 animate__animated animate__fadeIn" style="padding: 0.75rem 1rem;">
                        <div class="card-header bg-info text-white fw-bold py-2 px-3" style="font-size: 1rem;">Settings</div>
                        <div class="card-body bg-white text-dark py-2 px-3">
                            @if (isEditMode)
                            {
                                <div class="mb-2">
                                    <strong>Apply Externally:</strong>
                                    <InputText class="form-control form-control-sm" @bind-Value="editableScholarship.ExternalApplicationUrl" placeholder="https://example.com/apply" />
                                    <ValidationMessage For="@(() => editableScholarship.ExternalApplicationUrl)" class="text-danger small" />
                                    <small class="form-text text-muted">Leave empty for internal applications only</small>
                                </div>
                            }
                            else if (scholarship != null && !string.IsNullOrWhiteSpace(scholarship.ExternalApplicationUrl))
                            {
                                <div class="mb-2">
                                    <strong>Apply Externally:</strong>
                                    <a href="@scholarship.ExternalApplicationUrl" target="_blank">@scholarship.ExternalApplicationUrl</a>
                                </div>
                            }
                        </div>
                    </div>

                    @if (isEditMode)
                    {
                        <button type="submit" class="btn btn-primary me-2 animate__animated animate__fadeIn btn-sm" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                <span>Saving...</span>
                            }
                            else
                            {
                                <span>Save Changes</span>
                            }
                        </button>
                        <button type="button" class="btn btn-secondary animate__animated animate__fadeIn btn-sm" @onclick="CancelEdit" disabled="@isSaving">Cancel</button>
                    }
                </EditForm>


            </div>

            <!-- 👥 Students Helped & Applicants (Right Column, toggled by button) -->
            <div class="col-lg-4 mb-5 animate__animated animate__fadeInRight">
                <div class="card shadow-sm border-0 animate__animated animate__fadeIn mb-4">
                    <div class="card-header bg-success text-white fw-bold py-2 px-3" style="font-size: 1rem;">Students Helped</div>
                    <div class="card-body bg-white text-dark py-2 px-3" style="max-height: 250px; overflow-y: auto;">
                        @if (!acceptedStudents.Any())
                        {
                            <p class="text-muted">No students have been accepted yet.</p>
                        }
                        else
                        {
                            <ul class="list-group list-group-flush">
                                @foreach (var application in acceptedStudents)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <span class="fw-semibold">@application.Student?.FirstName @application.Student?.LastName</span>
                                        <NavLink class="btn btn-sm btn-success text-white" href="@($"/dashboard/benefactor/applications/review/{application.ScholarshipApplicationId}")">View</NavLink>
                                    </li>
                                }
                            </ul>
                        }
                    </div>
                </div>
                <button class="btn btn-primary w-100 mb-2" @onclick="() => showStudentList = !showStudentList">
                    @if (showStudentList)
                    {
                        <span>Hide Student Applicants</span>
                    }
                    else
                    {
                        <span>Show Student Applicants</span>
                    }
                </button>
                @if (showStudentList)
                {
                    <div class="card shadow-sm border-0 animate__animated animate__fadeIn">
                        <ul class="nav nav-tabs nav-fill bg-light" id="studentTabs" role="tablist">
                            <li class="nav-item" role="presentation">
                                <button class="nav-link active text-primary fw-bold" id="students-tab" data-bs-toggle="tab" data-bs-target="#students" type="button" role="tab" aria-controls="students" aria-selected="true">
                                    📋 Student Applicants
                                </button>
                            </li>
                        </ul>
                        <div class="tab-content" id="studentTabsContent">
                            <div class="tab-pane fade show active" id="students" role="tabpanel" aria-labelledby="students-tab">
                                <div class="card-body bg-white text-dark" style="max-height: 500px; overflow-y: auto;">
                                    @if (!studentApplicants.Any())
                                    {
                                        <p class="text-muted">No students have applied yet.</p>
                                    }
                                    else
                                    {
                                        <ul class="list-group list-group-flush">
                                            @foreach (var application in studentApplicants)
                                            {
                                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                                    <span class="fw-semibold">@application.Student?.FirstName @application.Student?.LastName</span>
                                                    <NavLink class="btn btn-sm btn-primary text-white" href="@($"/dashboard/benefactor/applications/review/{application.ScholarshipApplicationId}")">View</NavLink>
                                                </li>
                                            }
                                        </ul>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}
