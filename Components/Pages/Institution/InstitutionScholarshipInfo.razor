@page "/dashboard/institution/scholarships-info/{ScholarshipId:int}"
@attribute [Authorize(Roles = "Institution,SuperAdmin")]
@layout Layout.InstitutionDashLayout

@using Microsoft.EntityFrameworkCore
@using c2_eskolar.Data
@using c2_eskolar.Models
@inject ApplicationDbContext DbContext

@code {
    [Parameter] public int ScholarshipId { get; set; }
    private Scholarship? scholarship;
    private List<ScholarshipApplication> studentApplicants = new();
    private bool isEditMode = false;

    private Scholarship editableScholarship = new Scholarship { Title = string.Empty, Benefits = string.Empty, ApplicationDeadline = DateTime.Now };
    private int SlotsRemaining => (scholarship?.SlotsAvailable ?? 0) - studentApplicants.Count;
    private string? errorMessage;
    private string? successMessage;
    private bool showStudentList = false;

    [Inject] private NavigationManager? Navigation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadScholarship();
    }

    private async Task LoadScholarship()
    {
        scholarship = await DbContext.Scholarships
            .Include(s => s.Institution)
            .Include(s => s.Benefactor)
            .Include(s => s.Applications)
                .ThenInclude(a => a.Student)
            .FirstOrDefaultAsync(s => s.ScholarshipId == ScholarshipId);

        if (scholarship != null)
        {
            studentApplicants = scholarship.Applications
                .Where(a => a.Student != null)
                .ToList();
            // Copy scholarship to editableScholarship for editing
            editableScholarship = new Scholarship
            {
                ScholarshipId = scholarship.ScholarshipId,
                Title = scholarship.Title,
                Description = scholarship.Description,
                Benefits = scholarship.Benefits,
                IsActive = scholarship.IsActive,
                Requirements = scholarship.Requirements,
                ApplicationDeadline = scholarship.ApplicationDeadline,
                SlotsAvailable = scholarship.SlotsAvailable,
                MinimumGPA = scholarship.MinimumGPA,
                RequiredCourse = scholarship.RequiredCourse,
                RequiredYearLevel = scholarship.RequiredYearLevel,
                RequiredUniversity = scholarship.RequiredUniversity,
                ExternalApplicationUrl = scholarship.ExternalApplicationUrl
            };
        }
    }

    private void EnterEditMode()
    {
        isEditMode = true;
        errorMessage = null;
        successMessage = null;
    }

    private void CancelEdit()
    {
        isEditMode = false;
        errorMessage = null;
        successMessage = null;
        // Reset editableScholarship to original
        if (scholarship != null)
        {
            editableScholarship = new Scholarship
            {
                ScholarshipId = scholarship.ScholarshipId,
                Title = scholarship.Title,
                Description = scholarship.Description,
                Benefits = scholarship.Benefits,
                IsActive = scholarship.IsActive,
                Requirements = scholarship.Requirements,
                ApplicationDeadline = scholarship.ApplicationDeadline,
                SlotsAvailable = scholarship.SlotsAvailable,
                MinimumGPA = scholarship.MinimumGPA,
                RequiredCourse = scholarship.RequiredCourse,
                RequiredYearLevel = scholarship.RequiredYearLevel,
                RequiredUniversity = scholarship.RequiredUniversity,
                ExternalApplicationUrl = scholarship.ExternalApplicationUrl
            };
        }
    }

    private async Task SaveChangesAsync()
    {
        errorMessage = null;
        successMessage = null;
        try
        {
            var existing = await DbContext.Scholarships.FindAsync(editableScholarship.ScholarshipId);
            if (existing == null)
            {
                errorMessage = "Scholarship not found.";
                return;
            }
            // Update fields
            existing.Title = editableScholarship.Title;
            existing.Description = editableScholarship.Description;
            existing.Benefits = editableScholarship.Benefits;
            existing.IsActive = editableScholarship.IsActive;
            existing.Requirements = editableScholarship.Requirements;
            existing.ApplicationDeadline = editableScholarship.ApplicationDeadline;
            existing.SlotsAvailable = editableScholarship.SlotsAvailable;
            existing.MinimumGPA = editableScholarship.MinimumGPA;
            existing.RequiredCourse = editableScholarship.RequiredCourse;
            existing.RequiredYearLevel = editableScholarship.RequiredYearLevel;
            existing.RequiredUniversity = editableScholarship.RequiredUniversity;
            existing.ExternalApplicationUrl = editableScholarship.ExternalApplicationUrl;
            existing.UpdatedAt = DateTime.Now;
            await DbContext.SaveChangesAsync();
            successMessage = "Scholarship updated successfully.";
            isEditMode = false;
            await LoadScholarship();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving changes: {ex.Message}";
        }
    }

    private void GoBackToList()
    {
        Navigation?.NavigateTo("/dashboard/institution/scholarships");
    }
}

@if (scholarship == null)
{
    <div class="text-center my-5">
        <div class="spinner-border text-primary" role="status"></div>
        <p>Loading scholarship details...</p>
    </div>
}
else
{
    <!-- ðŸ”· Improved Banner -->
    <div class="scholarship-banner mb-4 animate__animated animate__fadeIn" style="background: linear-gradient(90deg, #2563eb 60%, #60a5fa 100%); box-shadow: 0 4px 24px #2563eb22; border-radius: 1.5rem; padding: 2.5rem 2rem 2rem 2rem; display: flex; align-items: center; gap: 2rem; margin-right: 0;">
        <div class="d-flex align-items-center justify-content-center" style="min-width: 100px;">
            <div style="width: 90px; height: 90px; border-radius: 50%; background: #fff; display: flex; align-items: center; justify-content: center; box-shadow: 0 2px 12px #2563eb33; border: 4px solid #60a5fa;">
                <img src="https://via.placeholder.com/70x70.png?text=ðŸŽ“" alt="Scholarship Logo" style="width: 70px; height: 70px; border-radius: 50%; object-fit: cover;" />
            </div>
        </div>
        <div class="flex-grow-1">
            <h1 class="mb-2 fw-bold" style="color: #fff; font-size: 2.3rem; letter-spacing: -1px; text-shadow: 0 2px 8px #2563eb55;">
                @scholarship.Title
            </h1>
            <div class="d-flex align-items-center mb-1">
                <span class="badge bg-white text-primary fw-semibold me-2" style="font-size: 1rem; box-shadow: 0 1px 4px #2563eb22;">
                    @(!string.IsNullOrEmpty(scholarship.Institution?.InstitutionName)
                        ? scholarship.Institution.InstitutionName
                        : scholarship.Benefactor?.OrganizationName ?? "Unknown Provider")
                </span>
                @if (!string.IsNullOrWhiteSpace(scholarship.Description))
                {
                    <span class="text-white-50 ms-2" style="font-size: 1rem;">@scholarship.Description</span>
                }
            </div>
            <div class="mt-2">
                <span class="badge bg-primary text-white me-2">@scholarship.ApplicationDeadline.ToString("MMM dd, yyyy")</span>
                <span class="badge bg-info text-dark me-2">Slots: @SlotsRemaining of @scholarship.SlotsAvailable</span>
                <span class="badge bg-secondary text-white">@((scholarship.IsActive) ? "Active" : "Inactive")</span>
            </div>
        </div>
    </div>

    <style>
        .eskolar-back-btn {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            background: #fff;
            color: #2563eb;
            border: 1.5px solid #2563eb;
            border-radius: 8px;
            font-weight: 600;
            font-size: 1.08rem;
            padding: 0.5em 1.3em;
            margin-bottom: 1.2rem;
            box-shadow: 0 1px 4px 0 rgba(30,34,90,0.04);
            transition: background 0.13s, color 0.13s, border 0.13s;
            cursor: pointer;
            text-decoration: none;
        }
        .eskolar-back-btn:hover, .eskolar-back-btn:focus {
            background: #2563eb;
            color: #fff;
            border-color: #1746a2;
            text-decoration: none;
        }
    </style>

    <div class="container-fluid px-2 px-md-4">
        <button class="eskolar-back-btn" @onclick="GoBackToList">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 20 20"><path d="M9.707 15.707a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 111.414 1.414L6.414 9H17a1 1 0 110 2H6.414l3.293 3.293a1 1 0 010 1.414z"/></svg>
            Back to List
        </button>
        <div class="row gx-4 gy-4">
            <!-- ðŸ“„ Scholarship Info (Left Column, Categorized) -->
            <div class="col-lg-8 mb-5 animate__animated animate__fadeInUp">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mb-2">@errorMessage</div>
                }
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-primary mb-2">@successMessage</div>
                }

                @if (!isEditMode)
                {
                    <button class="btn btn-primary mb-2 animate__animated animate__pulse animate__infinite" @onclick="EnterEditMode">Edit</button>
                }

                <EditForm Model="editableScholarship" OnValidSubmit="SaveChangesAsync" class="mb-3">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <!-- Basic Information -->
                    <div class="card shadow-sm border-0 mb-2 animate__animated animate__fadeIn" style="padding: 0.75rem 1rem;">
                        <div class="card-header bg-primary text-white fw-bold py-2 px-3" style="font-size: 1rem;">Basic Information</div>
                        <div class="card-body bg-white text-dark py-2 px-3">
                            <div class="mb-2"><strong>Provider:</strong>
                                @(!string.IsNullOrEmpty(scholarship.Institution?.InstitutionName)
                                    ? scholarship.Institution.InstitutionName
                                    : scholarship.Benefactor?.OrganizationName ?? "Unknown")
                            </div>
                            @if (isEditMode)
                            {
                                <div class="mb-2">
                                    <strong>Title:</strong>
                                    <InputText class="form-control form-control-sm" @bind-Value="editableScholarship.Title" />
                                </div>
                                <div class="mb-2">
                                    <strong>Description:</strong>
                                    <InputTextArea class="form-control form-control-sm" @bind-Value="editableScholarship.Description" />
                                </div>
                                <div class="mb-2">
                                    <strong>Benefits:</strong>
                                    <InputTextArea class="form-control form-control-sm" @bind-Value="editableScholarship.Benefits" />
                                </div>
                                <div class="mb-2">
                                    <strong>Status:</strong>
                                    <InputCheckbox class="form-check-input" @bind-Value="editableScholarship.IsActive" />
                                    <span class="ms-2">@((editableScholarship.IsActive) ? "ðŸŸ¢ Active" : "ðŸ”´ Inactive")</span>
                                </div>
                            }
                            else
                            {
                                @if (!string.IsNullOrWhiteSpace(scholarship.Description))
                                {
                                    <div class="mb-2"><strong>Description:</strong><p class="mb-1">@scholarship.Description</p></div>
                                }
                                <div class="mb-2"><strong>Benefits:</strong> <p class="mb-1">@scholarship.Benefits</p></div>
                                <div class="mb-2"><strong>Status:</strong> @(scholarship.IsActive ? "ðŸŸ¢ Active" : "ðŸ”´ Inactive")</div>
                            }
                        </div>
                    </div>

                    <!-- Requirements -->
                    <div class="card shadow-sm border-0 mb-2 animate__animated animate__fadeIn" style="padding: 0.75rem 1rem;">
                        <div class="card-header bg-info text-white fw-bold py-2 px-3" style="font-size: 1rem;">Requirements</div>
                        <div class="card-body bg-white text-dark py-2 px-3">
                            @if (isEditMode)
                            {
                                <div class="mb-2">
                                    <strong>Requirements:</strong>
                                    <InputTextArea class="form-control form-control-sm" @bind-Value="editableScholarship.Requirements" />
                                </div>
                                <div class="mb-2">
                                    <strong>Application Deadline:</strong>
                                    <InputDate class="form-control form-control-sm" @bind-Value="editableScholarship.ApplicationDeadline" />
                                </div>
                                <div class="mb-2">
                                    <strong>Slots Available:</strong>
                                    <InputNumber class="form-control form-control-sm" @bind-Value="editableScholarship.SlotsAvailable" />
                                </div>
                                <div class="mb-2">
                                    <strong>Minimum GPA:</strong>
                                    <InputNumber class="form-control form-control-sm" @bind-Value="editableScholarship.MinimumGPA" />
                                </div>
                            }
                            else
                            {
                                <div class="mb-2"><strong>Requirements:</strong> <p class="mb-1">@scholarship.Requirements</p></div>
                                <div class="mb-2"><strong>Application Deadline:</strong> @scholarship.ApplicationDeadline.ToString("MMMM dd, yyyy")</div>
                                <div class="mb-2"><strong>Slots Available:</strong> @SlotsRemaining of @scholarship.SlotsAvailable</div>
                                <div class="mb-2"><strong>Minimum GPA:</strong> @scholarship.MinimumGPA</div>
                            }
                        </div>
                    </div>

                    <!-- Eligibility -->
                    <div class="card shadow-sm border-0 mb-2 animate__animated animate__fadeIn" style="padding: 0.75rem 1rem;">
                        <div class="card-header bg-primary text-white fw-bold py-2 px-3" style="font-size: 1rem;">Eligibility</div>
                        <div class="card-body bg-white text-dark py-2 px-3">
                            @if (isEditMode)
                            {
                                <div class="mb-2">
                                    <strong>Required Course:</strong>
                                    <InputText class="form-control form-control-sm" @bind-Value="editableScholarship.RequiredCourse" />
                                </div>
                                <div class="mb-2">
                                    <strong>Required Year Level:</strong>
                                    <InputNumber class="form-control form-control-sm" @bind-Value="editableScholarship.RequiredYearLevel" />
                                </div>
                                <div class="mb-2">
                                    <strong>Required University:</strong>
                                    <InputText class="form-control form-control-sm" @bind-Value="editableScholarship.RequiredUniversity" />
                                </div>
                            }
                            else
                            {
                                <div class="mb-2"><strong>Required Course:</strong> @scholarship.RequiredCourse</div>
                                <div class="mb-2"><strong>Required Year Level:</strong> @scholarship.RequiredYearLevel</div>
                                <div class="mb-2"><strong>Required University:</strong> @scholarship.RequiredUniversity</div>
                            }
                        </div>
                    </div>

                    <!-- Settings -->
                    <div class="card shadow-sm border-0 mb-2 animate__animated animate__fadeIn" style="padding: 0.75rem 1rem;">
                        <div class="card-header bg-info text-white fw-bold py-2 px-3" style="font-size: 1rem;">Settings</div>
                        <div class="card-body bg-white text-dark py-2 px-3">
                            @if (isEditMode)
                            {
                                <div class="mb-2">
                                    <strong>Apply Externally:</strong>
                                    <InputText class="form-control form-control-sm" @bind-Value="editableScholarship.ExternalApplicationUrl" />
                                </div>
                            }
                            else if (!string.IsNullOrWhiteSpace(scholarship.ExternalApplicationUrl))
                            {
                                <div class="mb-2">
                                    <strong>Apply Externally:</strong>
                                    <a href="@scholarship.ExternalApplicationUrl" target="_blank">@scholarship.ExternalApplicationUrl</a>
                                </div>
                            }
                        </div>
                    </div>

                    @if (isEditMode)
                    {
                        <button type="submit" class="btn btn-primary me-2 animate__animated animate__fadeIn btn-sm">Save</button>
                        <button type="button" class="btn btn-secondary animate__animated animate__fadeIn btn-sm" @onclick="CancelEdit">Cancel</button>
                    }
                </EditForm>

            </div>

            <!-- ðŸ‘¥ Student Applicants (Right Column, toggled by button) -->
            <div class="col-lg-4 mb-5 animate__animated animate__fadeInRight">
                <button class="btn btn-primary w-100 mb-2" @onclick="() => showStudentList = !showStudentList">
                    @if (showStudentList)
                    {
                        <span>Hide Student Applicants</span>
                    }
                    else
                    {
                        <span>Show Student Applicants</span>
                    }
                </button>
                @if (showStudentList)
                {
                    <div class="card shadow-sm border-0 animate__animated animate__fadeIn">
                        <ul class="nav nav-tabs nav-fill bg-light" id="studentTabs" role="tablist">
                            <li class="nav-item" role="presentation">
                                <button class="nav-link active text-primary fw-bold" id="students-tab" data-bs-toggle="tab" data-bs-target="#students" type="button" role="tab" aria-controls="students" aria-selected="true">
                                    ðŸ“‹ Student Applicants
                                </button>
                            </li>
                        </ul>
                        <div class="tab-content" id="studentTabsContent">
                            <div class="tab-pane fade show active" id="students" role="tabpanel" aria-labelledby="students-tab">
                                <div class="card-body bg-white text-dark" style="max-height: 500px; overflow-y: auto;">
                                    @if (!studentApplicants.Any())
                                    {
                                        <p class="text-muted">No students have applied yet.</p>
                                    }
                                    else
                                    {
                                        <ul class="list-group list-group-flush">
                                            @foreach (var application in studentApplicants)
                                            {
                                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                                    <span class="fw-semibold">@application.Student?.FirstName @application.Student?.LastName</span>
                                                    <NavLink class="btn btn-sm btn-primary text-white" href="@($"/dashboard/institution/applications/review/{application.ScholarshipApplicationId}")">View</NavLink>
                                                </li>
                                            }
                                        </ul>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}
