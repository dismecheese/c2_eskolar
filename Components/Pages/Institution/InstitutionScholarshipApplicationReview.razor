@page "/dashboard/institution/applications/review/{ApplicationId:guid}"
@attribute [Authorize(Roles = "Institution")]
@layout Layout.InstitutionDashLayout

@using c2_eskolar.Data
@using c2_eskolar.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims

@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthProvider
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager Navigation

<PageTitle>Review Application</PageTitle>

<h3>Review Scholarship Application</h3>

@if (isLoading)
{
    <div class="d-flex align-items-center my-5 justify-content-center">
        <div class="spinner-border text-primary me-3" role="status" aria-label="Loading"></div>
        <span>Loading application details...</span>
    </div>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (application == null)
{
    <div class="alert alert-warning">Application not found.</div>
}
else
{
    <div class="card shadow-sm border-0 mb-4">
        <div class="card-header bg-primary text-white fw-bold">Application Info</div>
        <div class="card-body">
            <h4 class="mb-2">@(!string.IsNullOrWhiteSpace(application?.Scholarship?.Title) ? application.Scholarship.Title : "(No Title)")</h4>
            <div class="mb-2"><span class="text-muted">Reference:</span> <strong>@(application?.ScholarshipApplicationId.ToString())</strong></div>
            <div class="mb-2"><span class="text-muted">Application Date:</span> @(application?.ApplicationDate.ToString("MMMM dd, yyyy"))</div>
            <div class="mb-2"><span class="text-muted">Status:</span> <span class="fw-semibold">@(application?.Status)</span></div>
        </div>
    </div>

    <div class="card shadow-sm border-0 mb-4">
        <div class="card-header bg-info text-white fw-bold">Applicant Info</div>
        <div class="card-body">
            <div class="mb-2"><span class="text-muted">Applicant:</span> <strong>@(application?.Student != null ? $"{application.Student.FirstName} {application.Student.LastName}" : "-")</strong></div>
            <div class="mb-2"><span class="text-muted">Student ID:</span> <strong>@(application?.StudentId ?? "-")</strong></div>
            <div class="mb-2"><span class="text-muted">GWA:</span> <strong>@(application?.GWA != null ? application.GWA.Value.ToString("0.00") : "-")</strong></div>
            <div class="mb-2"><span class="text-muted">1st Sem Grades:</span> <span>@(string.IsNullOrWhiteSpace(application?.FirstSemesterGrades) ? "-" : application.FirstSemesterGrades)</span></div>
            <div class="mb-2"><span class="text-muted">2nd Sem Grades:</span> <span>@(string.IsNullOrWhiteSpace(application?.SecondSemesterGrades) ? "-" : application.SecondSemesterGrades)</span></div>
        </div>
    </div>

    <div class="card shadow-sm border-0 mb-4">
        <div class="card-header bg-success text-white fw-bold">Documents & Statement</div>
        <div class="card-body">
            @if (application?.IsExternalApplication == true)
            {
                <div class="mb-3">
                    <strong>External Application:</strong>
                    <p>
                        @if (!string.IsNullOrWhiteSpace(application?.ExternalApplicationUrl))
                        {
                            <a href="@application.ExternalApplicationUrl" target="_blank" rel="noopener noreferrer">@application.ExternalApplicationUrl</a>
                        }
                        else
                        {
                            <span class="text-muted">No URL provided</span>
                        }
                    </p>
                    <p><strong>Confirmed Applied:</strong> @(application?.HasAppliedExternally == true ? "Yes" : "No")</p>
                </div>
            }
            else
            {
                <div class="mb-3">
                    <strong>Personal Statement</strong>
                    <p>@(!string.IsNullOrWhiteSpace(application?.PersonalStatement) ? application.PersonalStatement : "No statement provided.")</p>
                </div>

                @if (!string.IsNullOrEmpty(application?.UploadedDocuments))
                {
                    <div class="mb-3">
                        <strong>Supporting Documents:</strong>
                        <ul>
                            @foreach (var doc in (application?.UploadedDocuments ?? "").Split(',', StringSplitOptions.RemoveEmptyEntries))
                            {
                                var trimmed = doc.Trim();
                                if (!string.IsNullOrWhiteSpace(trimmed))
                                {
                                    <li>
                                        <a href="@trimmed" target="_blank" rel="noopener noreferrer" title="@trimmed">
                                            @GetFileName(trimmed)
                                        </a>
                                        <span class="text-muted">(Document)</span>
                                    </li>
                                }
                            }
                        </ul>
                    </div>
                }
            }
        </div>
    </div>

    <div class="card shadow-sm border-0 mb-4">
        <div class="card-header bg-warning text-dark fw-bold">Review</div>
        <div class="card-body">
            <EditForm Model="application" OnValidSubmit="HandleReview">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="ReviewNotes" class="form-label">Review Notes</label>
                    <InputTextArea id="ReviewNotes" class="form-control"
                                   @bind-Value="application!.ReviewNotes" rows="4"
                                   placeholder="Add feedback or notes about this application" aria-label="Review Notes" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="DecisionSelect">Decision</label>
                    <InputSelect id="DecisionSelect" @bind-Value="application!.Status" class="form-select" aria-label="Decision">
                        <option value="Under Review">Under Review</option>
                        <option value="Approved">Approved</option>
                        <option value="Rejected">Rejected</option>
                    </InputSelect>
                </div>

                <button type="submit" class="btn btn-primary" disabled="@isSubmitting" aria-busy="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <text>Saving...</text>
                    }
                    else
                    {
                        <span>Save Review</span>
                    }
                </button>
                @if (application?.Scholarship != null)
                {
                    <NavLink href="@($"/dashboard/institution/scholarships-info/{application.Scholarship.ScholarshipId}")" class="btn btn-secondary ms-2">Back</NavLink>
                }

                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success mt-3" role="alert">@successMessage</div>
                }
            </EditForm>
        </div>
    </div>
}

@code {
    // ...existing code...

    private string GetFileName(string path)
    {
        if (string.IsNullOrWhiteSpace(path)) return "";
        try
        {
            // Handles both / and \ as separators
            var parts = path.Split(new[] {'/', '\\'}, StringSplitOptions.RemoveEmptyEntries);
            var fileName = parts.Length > 0 ? parts[^1] : path;
            // Truncate if too long
            if (fileName.Length > 32)
                return fileName.Substring(0, 14) + "..." + fileName.Substring(fileName.Length - 12);
            return fileName;
        }
        catch { return path; }
    }
}

@code {
    [Parameter] public Guid ApplicationId { get; set; }

    private ScholarshipApplication? application;
    private bool isLoading = true;
    private bool isSubmitting = false;
    private string? successMessage;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            application = await DbContext.ScholarshipApplications
                .Include(a => a.Student)
                .Include(a => a.Scholarship)
                .FirstOrDefaultAsync(a => a.ScholarshipApplicationId == ApplicationId)
                .ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load application: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleReview()
    {
        if (application == null)
            return;

        try
        {
            isSubmitting = true;
            errorMessage = null;

            var authState = await AuthProvider.GetAuthenticationStateAsync().ConfigureAwait(false);
            var user = authState.User;
            var reviewerId = user.FindFirstValue(ClaimTypes.NameIdentifier);

            // Track previous status before update
            var previousStatus = await DbContext.ScholarshipApplications
                .Where(a => a.ScholarshipApplicationId == application.ScholarshipApplicationId)
                .Select(a => a.Status)
                .FirstOrDefaultAsync();

            application.ReviewDate = DateTime.Now;
            application.ReviewedBy = reviewerId;

            // Only decrement slots if status is being set to Approved and was not previously Approved
            if (application.Status == "Approved" && previousStatus != "Approved" && application.Scholarship != null)
            {
                // Reload scholarship from DB to ensure up-to-date value
                var scholarship = await DbContext.Scholarships.FirstOrDefaultAsync(s => s.ScholarshipId == application.Scholarship.ScholarshipId);
                if (scholarship != null && scholarship.SlotsAvailable.HasValue && scholarship.SlotsAvailable.Value > 0)
                {
                    scholarship.SlotsAvailable -= 1;
                    DbContext.Scholarships.Update(scholarship);
                }
            }

            DbContext.ScholarshipApplications.Update(application);
            await DbContext.SaveChangesAsync().ConfigureAwait(false);

            successMessage = "✅ Review saved successfully.";

            // Redirect to scholarship info page after save
            if (application.Scholarship != null)
            {
                Navigation.NavigateTo($"/dashboard/institution/scholarships-info/{application.Scholarship.ScholarshipId}");
            }
            else
            {
                Navigation.NavigateTo("/dashboard/institution/scholarships");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"❌ Failed to save review: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
