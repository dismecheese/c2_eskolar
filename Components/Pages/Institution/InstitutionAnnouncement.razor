@page "/dashboard/institution/announcements"
@attribute [Authorize(Roles = "Institution")] 
@layout Layout.InstitutionDashLayout
@rendermode InteractiveServer
@using c2_eskolar.Models
@using c2_eskolar.Models.Enums
@using c2_eskolar.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@inject AnnouncementService AnnouncementService
@inject UserManager<IdentityUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Announcements</PageTitle>

<div class="container-fluid" style="min-height: 100vh;">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-10">
            <!-- Search and Header -->
            <div class="d-flex flex-column flex-md-row align-items-md-center mb-4 gap-3 mt-5">
                <div class="flex-grow-1">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Search announcements..." 
                               @bind="searchTerm" @oninput="OnSearchChanged" />
                        <span class="input-group-text bg-white border-0">
                            <i class="bi bi-search"></i>
                        </span>
                    </div>
                </div>
                <!-- Create Button for Institution -->
                <button class="btn btn-primary d-flex align-items-center gap-2" @onclick="ShowCreateForm">
                    <i class="bi bi-plus-circle"></i>
                    <span>Create Announcement</span>
                </button>
            </div>

            <!-- Category Tabs -->
            <div class="modern-tabs d-flex align-items-center mb-4 gap-3">
                <div class="tab-pills">
                    <button class="tab-pill @(activeTab == "all" ? "active" : "")" @onclick='() => SetActiveTab("all")'>
                        <i class="bi bi-collection"></i> <span>All</span>
                    </button>
                    <button class="tab-pill @(activeTab == "institution" ? "active" : "")" @onclick='() => SetActiveTab("institution")'>
                        <i class="bi bi-building"></i> <span>Institution</span>
                    </button>
                    <button class="tab-pill @(activeTab == "benefactor" ? "active" : "")" @onclick='() => SetActiveTab("benefactor")'>
                        <i class="bi bi-globe"></i> <span>Benefactor</span>
                    </button>
                    <button class="tab-pill @(activeTab == "mine" ? "active" : "")" @onclick='() => SetActiveTab("mine")'>
                        <i class="bi bi-person-circle"></i> <span>My Posts</span>
                    </button>
                </div>
                <div class="ms-auto" style="min-width:180px;">
                    <select class="form-select form-select-sm" @bind="selectedCategory">
                        <option value="">All Categories</option>
                        <option value="Requirements">Requirements</option>
                        <option value="Results">Results</option>
                        <option value="Events">Events</option>
                        <option value="General">General</option>
                    </select>
                </div>
            </div>

            <div class="row">
                <!-- Announcements List -->
                <div class="col-lg-8">
                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center py-5">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (filteredAnnouncements?.Any() == true)
                    {
                        <div class="mb-3">
                            <h5 class="text-muted">@GetTabDescription()</h5>
                        </div>

                        <div class="d-flex flex-column gap-3">
                            @foreach (var announcement in filteredAnnouncements.OrderByDescending(a => a.IsPinned).ThenByDescending(a => a.CreatedAt))
                            {
                                <div class="card shadow-sm border-0 @(announcement.IsPinned ? "border-warning border-2" : "")">
                                    <div class="card-body">
                                        <!-- Header with badges -->
                                        <div class="d-flex justify-content-between align-items-start mb-2">
                                            <div class="d-flex gap-2 flex-wrap">
                                                @if (announcement.IsPinned)
                                                {
                                                    <span class="badge bg-warning text-dark">
                                                        <i class="bi bi-pin-fill"></i> Pinned
                                                    </span>
                                                }
                                                <span class="badge @(GetAuthorBadgeClass(announcement.AuthorType))">
                                                    @announcement.AuthorType
                                                </span>
                                                @if (!string.IsNullOrEmpty(announcement.Category))
                                                {
                                                    <span class="badge bg-info">@announcement.Category</span>
                                                }
                                                <span class="badge bg-@GetPriorityColor(announcement.Priority)">
                                                    @announcement.Priority
                                                </span>
                                            </div>
                                            <div class="d-flex align-items-center gap-2">
                                                <small class="text-muted">@announcement.CreatedAt.ToString("MMM dd, yyyy")</small>
                                                <button class="btn btn-sm btn-outline-secondary" 
                                                        @onclick="() => ToggleAnnouncementExpansion(announcement.AnnouncementId)"
                                                        @onclick:stopPropagation="true">
                                                    <i class="bi bi-@(IsAnnouncementExpanded(announcement.AnnouncementId) ? "chevron-up" : "chevron-down")"></i>
                                                </button>
                                            </div>
                                        </div>

                                        <!-- Content -->
                                        <div class="d-flex align-items-start gap-3">
                                            <div>
                                                <i class="@(GetAuthorIcon(announcement.AuthorType)) fs-2 text-secondary"></i>
                                            </div>
                                            <div class="flex-grow-1">
                                                <div class="fw-semibold mb-1 cursor-pointer" @onclick="() => IncrementView(announcement.AnnouncementId)">
                                                    @announcement.Title
                                                </div>
                                                
                                                <!-- Summary/Preview (always visible) -->
                                                <div class="text-secondary mb-2">
                                                    @(announcement.Summary ?? 
                                                      (announcement.Content.Length > 150 ? 
                                                       announcement.Content.Substring(0, 150) + "..." : 
                                                       announcement.Content))
                                                </div>

                                                <!-- Collapsible Details -->
                                                @if (IsAnnouncementExpanded(announcement.AnnouncementId))
                                                {
                                                    <div class="announcement-details border-top pt-3 mt-2">
                                                        <!-- Full Content -->
                                                        @if (!string.IsNullOrEmpty(announcement.Content) && announcement.Content.Length > 150)
                                                        {
                                                            <div class="mb-3">
                                                                <h6 class="fw-bold">Full Description:</h6>
                                                                <div class="text-secondary">@announcement.Content</div>
                                                            </div>
                                                        }

                                                        <!-- Additional Details -->
                                                        <div class="row">
                                                            @if (!string.IsNullOrEmpty(announcement.OrganizationName))
                                                            {
                                                                <div class="col-md-6 mb-2">
                                                                    <small class="text-muted">Organization:</small>
                                                                    <div class="fw-semibold">@announcement.OrganizationName</div>
                                                                </div>
                                                            }
                                                            @if (announcement.ExpiryDate.HasValue)
                                                            {
                                                                <div class="col-md-6 mb-2">
                                                                    <small class="text-muted">Deadline:</small>
                                                                    <div class="fw-semibold">@announcement.ExpiryDate.Value.ToString("MMM dd, yyyy")</div>
                                                                </div>
                                                            }
                                                            <div class="col-md-6 mb-2">
                                                                <small class="text-muted">Visibility:</small>
                                                                <div class="fw-semibold">@(announcement.IsPublic ? "Public" : "Private")</div>
                                                            </div>
                                                            <div class="col-md-6 mb-2">
                                                                <small class="text-muted">Status:</small>
                                                                <div class="fw-semibold">@(announcement.IsActive ? "Active" : "Inactive")</div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                                
                                                <div class="mt-2 d-flex justify-content-between align-items-center">
                                                    <small class="text-muted">
                                                        <i class="bi bi-eye"></i> @announcement.ViewCount views
                                                        • By @announcement.AuthorName
                                                    </small>
                                                    
                                                    <!-- Management Buttons (only for own announcements) -->
                                                    @if (announcement.AuthorId == currentUserId)
                                                    {
                                                        <div class="btn-group btn-group-sm">
                                                            <button class="btn btn-outline-primary" @onclick="() => EditAnnouncement(announcement)" 
                                                                    @onclick:stopPropagation="true" title="Edit">
                                                                <i class="bi bi-pencil"></i>
                                                            </button>
                                                            <button class="btn btn-outline-@(announcement.IsPinned ? "warning" : "secondary")" 
                                                                    @onclick="() => TogglePin(announcement.AnnouncementId)" 
                                                                    @onclick:stopPropagation="true" 
                                                                    title="@(announcement.IsPinned ? "Unpin" : "Pin")">
                                                                <i class="bi bi-pin"></i>
                                                            </button>
                                                            <button class="btn btn-outline-danger" @onclick="() => DeleteAnnouncement(announcement.AnnouncementId)" 
                                                                    @onclick:stopPropagation="true" title="Delete">
                                                                <i class="bi bi-trash"></i>
                                                            </button>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <div class="mb-3">
                                <i class="bi bi-megaphone fs-1 text-muted"></i>
                            </div>
                            <h5 class="text-muted">@GetEmptyStateTitle()</h5>
                            <p class="text-muted">@GetEmptyStateMessage()</p>
                            @if (!string.IsNullOrEmpty(searchTerm) || !string.IsNullOrEmpty(selectedCategory))
                            {
                                <button class="btn btn-outline-primary btn-sm me-2" @onclick="ClearFilters">
                                    Clear Filters
                                </button>
                            }
                            @if (activeTab == "mine" || activeTab == "all")
                            {
                                <button class="btn btn-primary" @onclick="ShowCreateForm">
                                    <i class="bi bi-plus-circle"></i> Create Your First Announcement
                                </button>
                            }
                        </div>
                    }
                </div>

                <!-- Statistics Sidebar -->
                <div class="col-lg-4 mt-4 mt-lg-0">
                    <div class="card shadow-sm border-0">
                        <div class="card-body">
                            <div class="fw-bold mb-3">Statistics for @activeTab</div>
                            <div class="list-group list-group-flush">
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <span>Total Announcements</span>
                                    <span class="badge bg-primary rounded-pill">@GetTabCount()</span>
                                </div>
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <span>From Institutions</span>
                                    <span class="badge bg-success rounded-pill">@institutionCount</span>
                                </div>
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <span>From Benefactors</span>
                                    <span class="badge bg-info rounded-pill">@benefactorCount</span>
                                </div>
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <span>My Posts</span>
                                    <span class="badge bg-warning rounded-pill">@myPostsCount</span>
                                </div>
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <span>Pinned</span>
                                    <span class="badge bg-secondary rounded-pill">@pinnedCount</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit Modal -->
@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(editingAnnouncement?.AnnouncementId != Guid.Empty ? "Edit" : "Create") Announcement</h5>
                    <button type="button" class="btn-close" @onclick="HideModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="editingAnnouncement" OnValidSubmit="SaveAnnouncement">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label class="form-label">Title</label>
                            <InputText @bind-Value="editingAnnouncement!.Title" class="form-control" />
                            <ValidationMessage For="@(() => editingAnnouncement!.Title)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">University/Organization</label>
                            <InputText @bind-Value="editingAnnouncement.OrganizationName" class="form-control" 
                                      placeholder="e.g., University of the Philippines" />
                            <small class="form-text text-muted">Name of your institution or organization</small>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Category</label>
                            <InputSelect @bind-Value="editingAnnouncement.Category" class="form-select">
                                <option value="">Select Category</option>
                                <option value="Requirements">Requirements</option>
                                <option value="Results">Results</option>
                                <option value="Events">Events</option>
                                <option value="General">General</option>
                            </InputSelect>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <InputTextArea @bind-Value="editingAnnouncement.Content" class="form-control" rows="6" />
                            <ValidationMessage For="@(() => editingAnnouncement.Content)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Deadline (Optional)</label>
                            <InputDate @bind-Value="editingAnnouncement.ExpiryDate" class="form-control" />
                            <small class="form-text text-muted">When this announcement expires or when the deadline is</small>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Visibility</label>
                            <InputRadioGroup @bind-Value="editingAnnouncement.IsPublic" Name="visibility">
                                <div class="form-check mb-2">
                                    <InputRadio Value="true" class="form-check-input" id="public-radio" />
                                    <label class="form-check-label" for="public-radio">
                                        Public - Visible to all students
                                    </label>
                                </div>
                                <div class="form-check">
                                    <InputRadio Value="false" class="form-check-input" id="private-radio" />
                                    <label class="form-check-label" for="private-radio">
                                        Private - Visible to specific audience only
                                    </label>
                                </div>
                            </InputRadioGroup>
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <InputCheckbox @bind-Value="editingAnnouncement.IsPinned" class="form-check-input" />
                                <label class="form-check-label">Pin this announcement (appears at top)</label>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="HideModal">Cancel</button>
                            <button type="submit" class="btn btn-primary" disabled="@isLoadingModal">
                                @if (isLoadingModal)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                @(editingAnnouncement?.AnnouncementId != Guid.Empty ? "Update" : "Create")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Announcement>? announcements;
    private List<Announcement>? filteredAnnouncements;
    private string searchTerm = "";
    private string activeTab = "all";
    private string _selectedCategory = "";
    private string selectedCategory
    {
        get => _selectedCategory;
        set
        {
            if (_selectedCategory != value)
            {
                _selectedCategory = value;
                FilterAnnouncements();
            }
        }
    }
    private bool isLoading = false;
    private bool showModal = false;
    private bool isLoadingModal = false;
    private HashSet<Guid> expandedAnnouncements = new HashSet<Guid>();
    
    // Statistics
    private int institutionCount = 0;
    private int benefactorCount = 0;
    private int myPostsCount = 0;
    private int pinnedCount = 0;
    
    private Announcement editingAnnouncement = new() 
    { 
        Title = "",
        Content = "",
        AuthorId = "",
        AuthorName = "",
        AuthorType = UserRole.Institution
    };
    
    private string currentUserId = "";
    private string currentUserName = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUser();
        // Only load announcements after user is loaded and all async work is complete
        // Use InvokeAsync to ensure no concurrency issues
        await InvokeAsync(async () => await LoadAnnouncements());
    }

    private async Task LoadCurrentUser()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            var user = await UserManager.GetUserAsync(authState.User);
            if (user != null)
            {
                currentUserId = user.Id;
                currentUserName = user.Email ?? "Institution Admin";
            }
        }
    }

    private async Task LoadAnnouncements()
    {
        if (isLoading) return;
        isLoading = true;
        try
        {
            // Load ALL announcements (for shared viewing)
            announcements = await AnnouncementService.GetAllAnnouncementsAsync();
            UpdateStatistics();
            FilterAnnouncements();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading announcements: {ex.Message}");
            announcements = new List<Announcement>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void UpdateStatistics()
    {
        if (announcements == null) return;
        
        institutionCount = announcements.Count(a => a.AuthorType == UserRole.Institution);
        benefactorCount = announcements.Count(a => a.AuthorType == UserRole.Benefactor);
        myPostsCount = announcements.Count(a => a.AuthorId == currentUserId);
        pinnedCount = announcements.Count(a => a.IsPinned);
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        FilterAnnouncements();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        FilterAnnouncements();
    }

    private void FilterAnnouncements()
    {
        if (announcements == null) return;

        var filtered = announcements.AsEnumerable();

        // Filter by tab
        filtered = activeTab switch
        {
            "institution" => filtered.Where(a => a.AuthorType == UserRole.Institution),
            "benefactor" => filtered.Where(a => a.AuthorType == UserRole.Benefactor),
            "mine" => filtered.Where(a => a.AuthorId == currentUserId),
            _ => filtered // "all"
        };

        // Filter by category
        if (!string.IsNullOrEmpty(selectedCategory))
        {
            filtered = filtered.Where(a => a.Category?.Contains(selectedCategory) == true);
        }

        // Filter by search term
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(a => 
                a.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                a.Content.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (a.AuthorName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false));
        }

        filteredAnnouncements = filtered.ToList();
        StateHasChanged();
    }

    private void ClearFilters()
    {
        searchTerm = "";
        selectedCategory = "";
        FilterAnnouncements();
    }

    private void ShowCreateForm()
    {
        editingAnnouncement = new Announcement
        {
            Title = "",
            Content = "",
            AuthorId = currentUserId,
            AuthorName = currentUserName,
            AuthorType = UserRole.Institution,
            Priority = AnnouncementPriority.Normal,
            IsPublic = true,
            IsActive = true
        };
        showModal = true;
    }

    private void EditAnnouncement(Announcement announcement)
    {
        editingAnnouncement = new Announcement
        {
            AnnouncementId = announcement.AnnouncementId,
            Title = announcement.Title,
            Content = announcement.Content,
            Summary = announcement.Summary,
            Category = announcement.Category,
            Priority = announcement.Priority,
            IsPublic = announcement.IsPublic,
            IsPinned = announcement.IsPinned,
            IsActive = announcement.IsActive,
            PublishDate = announcement.PublishDate,
            ExpiryDate = announcement.ExpiryDate,
            AuthorId = announcement.AuthorId,
            AuthorName = announcement.AuthorName,
            AuthorType = announcement.AuthorType,
            OrganizationName = announcement.OrganizationName
        };
        showModal = true;
    }

    private async Task SaveAnnouncement()
    {
        isLoadingModal = true;
        try
        {
            if (editingAnnouncement.AnnouncementId != Guid.Empty)
            {
                await AnnouncementService.UpdateAnnouncementAsync(editingAnnouncement.AnnouncementId, editingAnnouncement);
            }
            else
            {
                await AnnouncementService.CreateAnnouncementAsync(editingAnnouncement);
            }
            
            await LoadAnnouncements();
            HideModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving announcement: {ex.Message}");
        }
        finally
        {
            isLoadingModal = false;
        }
    }

    private async Task TogglePin(Guid announcementId)
    {
        try
        {
            await AnnouncementService.TogglePinAsync(announcementId, currentUserId);
            await LoadAnnouncements();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling pin: {ex.Message}");
        }
    }

    private async Task DeleteAnnouncement(Guid announcementId)
    {
        try
        {
            if (await AnnouncementService.DeleteAnnouncementAsync(announcementId, currentUserId))
            {
                await LoadAnnouncements();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting announcement: {ex.Message}");
        }
    }

    private async Task IncrementView(Guid announcementId)
    {
        try
        {
            await AnnouncementService.IncrementViewCountAsync(announcementId);
            // Update local count without full reload
            var announcement = announcements?.FirstOrDefault(a => a.AnnouncementId == announcementId);
            if (announcement != null)
            {
                announcement.ViewCount++;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error incrementing view count: {ex.Message}");
        }
    }

    private void HideModal()
    {
        showModal = false;
        editingAnnouncement = new() 
        { 
            Title = "",
            Content = "",
            AuthorId = "",
            AuthorName = "",
            AuthorType = UserRole.Institution
        };
    }

    private bool IsAnnouncementExpanded(Guid announcementId)
    {
        return expandedAnnouncements.Contains(announcementId);
    }

    private void ToggleAnnouncementExpansion(Guid announcementId)
    {
        if (expandedAnnouncements.Contains(announcementId))
        {
            expandedAnnouncements.Remove(announcementId);
        }
        else
        {
            expandedAnnouncements.Add(announcementId);
        }
        StateHasChanged();
    }

    // Helper methods for UI
    private string GetTabDescription()
    {
        return activeTab switch
        {
            "all" => "All announcements from institutions and benefactors",
            "institution" => "Announcements from educational institutions",
            "benefactor" => "Announcements from scholarship benefactors",
            "mine" => "Announcements you have created",
            _ => "Announcements"
        };
    }

    private string GetEmptyStateTitle()
    {
        return activeTab switch
        {
            "all" => "No announcements found",
            "institution" => "No institution announcements",
            "benefactor" => "No benefactor announcements", 
            "mine" => "You haven't created any announcements yet",
            _ => "No announcements found"
        };
    }

    private string GetEmptyStateMessage()
    {
        if (!string.IsNullOrEmpty(searchTerm) || !string.IsNullOrEmpty(selectedCategory))
        {
            return "Try adjusting your search terms or filters.";
        }
        
        return activeTab switch
        {
            "all" => "There are no announcements to display at this time.",
            "institution" => "No institutions have posted announcements yet.",
            "benefactor" => "No benefactors have posted announcements yet.",
            "mine" => "Click 'Create Announcement' to share information with students.",
            _ => "No announcements available."
        };
    }

    private int GetTabCount()
    {
        return activeTab switch
        {
            "all" => announcements?.Count ?? 0,
            "institution" => institutionCount,
            "benefactor" => benefactorCount,
            "mine" => myPostsCount,
            _ => 0
        };
    }

    private string GetAuthorBadgeClass(UserRole authorType)
    {
        return authorType switch
        {
            UserRole.Institution => "bg-success",
            UserRole.Benefactor => "bg-info",
            _ => "bg-secondary"
        };
    }

    private string GetAuthorIcon(UserRole authorType)
    {
        return authorType switch
        {
            UserRole.Institution => "bi bi-building",
            UserRole.Benefactor => "bi bi-globe",
            _ => "bi bi-person"
        };
    }

    private string GetPriorityColor(AnnouncementPriority priority)
    {
        return priority switch
        {
            AnnouncementPriority.Low => "secondary",
            AnnouncementPriority.Normal => "primary",
            AnnouncementPriority.High => "warning",
            AnnouncementPriority.Urgent => "danger",
            _ => "primary"
        };
    }
}

<style>
    .cursor-pointer {
        cursor: pointer;
    }

    .modern-tabs {
        background: #f8f9fa;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.04);
        padding: 0.75rem 1rem;
    }
    .tab-pills {
        display: flex;
        gap: 1rem;
    }
    .tab-pill {
        background: #fff;
        border: 1px solid #e0e0e0;
        border-radius: 24px;
        padding: 0.5rem 1.25rem;
        font-weight: 500;
        color: #333;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        box-shadow: 0 1px 4px rgba(0,0,0,0.03);
        transition: background 0.2s, color 0.2s, box-shadow 0.2s;
        cursor: pointer;
        border: none;
        outline: none;
    }
    .tab-pill.active {
        background: #2563eb;
        color: #fff;
        box-shadow: 0 2px 8px rgba(37,99,235,0.08);
    }
    .tab-pill:hover:not(.active) {
        background: #e0e7ff;
        color: #2563eb;
    }
    .tab-pill i {
        font-size: 1.1rem;
    }
    .modern-tabs .form-select {
        border-radius: 24px;
        font-size: 0.95rem;
        padding-left: 1rem;
    }
    .announcement-details {
        animation: fadeIn 0.3s ease-in-out;
    }
    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(-10px); }
        to { opacity: 1; transform: translateY(0); }
    }
</style>
