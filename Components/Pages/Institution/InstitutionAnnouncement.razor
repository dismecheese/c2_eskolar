@page "/dashboard/institution/announcements"
@attribute [Authorize(Roles = "Institution,SuperAdmin")]
@layout Layout.InstitutionDashLayout
@rendermode InteractiveServer
@using c2_eskolar.Models
@using c2_eskolar.Models.Enums
@using c2_eskolar.Services
@using c2_eskolar.Components.UI
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@inject AnnouncementService AnnouncementService
@inject UserManager<IdentityUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject c2_eskolar.Services.BlobStorageService BlobStorageService

<PageTitle>Announcements</PageTitle>

<div class="container-fluid" style="min-height: 100vh;">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-10">
            <!-- Search and Header -->  
            <div class="search-header-section mb-4 mt-4">
                <div class="row align-items-center">
                    <div class="col-md-8">
                        <h2 class="page-title">
                            <i class="bi bi-megaphone-fill me-2" style="color: #1E88E5;"></i>
                            Institution Announcements
                        </h2>
                        <p class="text-muted mb-3">Create and manage announcements for your institution</p>
                    </div>
                    <div class="col-md-4">
                        <button class="btn w-100 d-flex align-items-center justify-content-center gap-2" 
                                style="background: linear-gradient(135deg, #1E88E5 0%, #42A5F5 100%); color: white; border: none;" 
                                @onclick="ShowCreateForm">
                            <i class="bi bi-plus-circle"></i>
                            <span>Create Announcement</span>
                        </button>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12">
                        <div class="input-group">
                            <input type="text" class="form-control" placeholder="Search announcements..." style="border-radius: 25px 0 0 25px;"
                                   @bind="searchTerm" @oninput="OnSearchChanged" />
                            @if (!string.IsNullOrEmpty(searchTerm))
                            {
                                <button class="btn btn-outline-secondary" type="button" @onclick="() => { searchTerm = string.Empty; FilterAnnouncements(); }">
                                    <i class="bi bi-x"></i>
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Category Tabs -->
            <div class="modern-tabs d-flex align-items-center mb-4 gap-3">
                <div class="tab-pills">
                    <button class="tab-pill @(activeTab == "all" ? "active" : "")" @onclick='() => SetActiveTab("all")'>
                        <i class="bi bi-collection"></i> <span>All</span>
                    </button>
                    <button class="tab-pill @(activeTab == "institution" ? "active" : "")" @onclick='() => SetActiveTab("institution")'>
                        <i class="bi bi-building"></i> <span>Institution</span>
                    </button>
                    <button class="tab-pill @(activeTab == "benefactor" ? "active" : "")" @onclick='() => SetActiveTab("benefactor")'>
                        <i class="bi bi-globe"></i> <span>Benefactor</span>
                    </button>
                    <button class="tab-pill @(activeTab == "mine" ? "active" : "")" @onclick='() => SetActiveTab("mine")'>
                        <i class="bi bi-person"></i> <span>Mine</span>
                    </button>
                </div>
                <div class="ms-auto">
                    <select class="form-select" @bind="selectedCategory" style="min-width: 180px;">
                        <option value="">All Categories</option>
                        <option value="General">General</option>
                        <option value="Funding">Funding</option>
                        <option value="Applications">Applications</option>
                        <option value="Events">Events</option>
                        <option value="Maintenance">Maintenance</option>
                    </select>
                </div>
            </div>

            <div class="row">
                <!-- Announcements List -->
                <div class="col-lg-8">
                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center py-5">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (filteredAnnouncements?.Any() == true)
                    {
                        <div class="mb-3">
                            <h5 class="text-muted">@GetTabDescription()</h5>
                        </div>

                        <div class="d-flex flex-column gap-3">
                            @foreach (var announcement in filteredAnnouncements.OrderByDescending(a => a.IsPinned).ThenByDescending(a => a.CreatedAt))
                            {
                                <div class="card shadow-sm border-0 @(announcement.IsPinned ? "border-warning border-2" : "")">
                                    <div class="card-body">
                                        <!-- Header with Title and badges -->
                                        <div class="d-flex justify-content-between align-items-start mb-3">
                                            <div class="flex-grow-1">
                                                <h5 class="fw-bold mb-2 cursor-pointer" @onclick="() => IncrementView(announcement.AnnouncementId)">
                                                    @announcement.Title
                                                </h5>
                                                <div class="d-flex gap-2 flex-wrap">
                                                    @if (announcement.IsPinned)
                                                    {
                                                        <span class="badge bg-warning text-dark">
                                                            <i class="bi bi-pin-fill"></i> Pinned
                                                        </span>
                                                    }
                                                    <span class="badge @(GetAuthorBadgeClass(announcement.AuthorType))">
                                                        @announcement.AuthorType
                                                    </span>
                                                    @if (!string.IsNullOrEmpty(announcement.Category))
                                                    {
                                                        <span class="badge bg-info">@announcement.Category</span>
                                                    }
                                                    <span class="badge bg-@GetPriorityColor(announcement.Priority)">
                                                        @announcement.Priority
                                                    </span>
                                                    @if (announcement.Photos?.Any() == true)
                                                    {
                                                        <span class="badge bg-light text-dark">
                                                            <i class="bi bi-image"></i> @announcement.Photos.Count
                                                        </span>
                                                    }
                                                </div>
                                            </div>
                                            <div class="d-flex align-items-center gap-2">
                                                <small class="text-muted">@announcement.CreatedAt.ToString("MMM dd, yyyy")</small>
                                                <button class="btn btn-sm btn-outline-secondary" 
                                                        @onclick="() => ToggleAnnouncementExpansion(announcement.AnnouncementId)"
                                                        @onclick:stopPropagation="true">
                                                    <i class="bi bi-@(IsAnnouncementExpanded(announcement.AnnouncementId) ? "chevron-up" : "chevron-down")"></i>
                                                </button>
                                            </div>
                                        </div>

                                        <!-- Images (Clean Display - Only Pictures) -->
                                        @if (announcement.Photos?.Any() == true)
                                        {
                                            <div class="mb-4">
                                                @if (announcement.Photos.Count == 1)
                                                {
                                                    <!-- Single image - full width with enhanced display -->
                                                    <div class="position-relative single-image-container">
                                                        @{
                                                            var photo = announcement.Photos.First();
                                                            var imageUrl = photo.Url;
                                                            var imageCaption = photo.Caption ?? "Announcement image";
                                                            var containerId = $"img-container-{announcement.AnnouncementId}";
                                                            var errorId = $"error-{announcement.AnnouncementId}";
                                                        }
                                                        
                                                        <img src="@imageUrl" 
                                                             class="img-fluid rounded cursor-pointer w-100 announcement-image" 
                                                             style="height: 300px; object-fit: cover; box-shadow: 0 4px 12px rgba(0,0,0,0.15); transition: all 0.3s ease;" 
                                                             alt="@imageCaption"
                                                             @onclick="() => ToggleAnnouncementExpansion(announcement.AnnouncementId)"
                                                             title="@(string.IsNullOrEmpty(photo.Caption) ? "Click to view full size" : photo.Caption)"
                                                             loading="lazy" />
                                                        
                                                        <!-- Image overlay with expand hint -->
                                                        <div class="position-absolute top-0 end-0 m-2 expand-hint">
                                                            <span class="badge bg-dark bg-opacity-75 text-white px-2 py-1 rounded-pill">
                                                                <i class="bi bi-arrows-fullscreen me-1"></i>
                                                                <small>Click to expand</small>
                                                            </span>
                                                        </div>
                                                        
                                                        @if (!string.IsNullOrEmpty(photo.Caption))
                                                        {
                                                            <!-- Image caption overlay -->
                                                            <div class="position-absolute bottom-0 start-0 end-0 p-3 image-caption" 
                                                                 style="background: linear-gradient(transparent, rgba(0,0,0,0.7)); border-radius: 0 0 8px 8px;">
                                                                <div class="text-white small">
                                                                    <i class="bi bi-chat-left-text me-1"></i>
                                                                    @photo.Caption
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                }
                                                else if (announcement.Photos.Count == 2)
                                                {
                                                    <!-- Two images - side by side -->
                                                    <div class="row g-2">
                                                        @foreach (var photo in announcement.Photos.Take(2))
                                                        {
                                                            <div class="col-6">
                                                                <div class="position-relative">
                                                                    <img src="@photo.Url" class="img-fluid rounded cursor-pointer w-100" 
                                                                         style="height: 200px; object-fit: cover; box-shadow: 0 2px 6px rgba(0,0,0,0.1);" 
                                                                         alt="Announcement image"
                                                                         @onclick="() => ToggleAnnouncementExpansion(announcement.AnnouncementId)"
                                                                         title="Click to view all images - URL: @photo.Url"
                                                                         onerror="console.error('Image failed to load:', this.src); this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                                                                    <div class="d-flex flex-column align-items-center justify-content-center bg-light rounded position-absolute top-0 start-0 w-100" 
                                                                         style="height: 200px; display: none; border: 2px dashed #ccc;">
                                                                        <i class="bi bi-image text-muted mb-1"></i>
                                                                        <small class="text-muted">Failed to load</small>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                }
                                                else
                                                {
                                                    <!-- Multiple images - grid layout -->
                                                    <div class="row g-2">
                                                        @foreach (var photo in announcement.Photos.Take(3))
                                                        {
                                                            <div class="col-4">
                                                                <div class="position-relative">
                                                                    <img src="@photo.Url" class="img-fluid rounded cursor-pointer w-100" 
                                                                         style="height: 150px; object-fit: cover; box-shadow: 0 2px 6px rgba(0,0,0,0.1);" 
                                                                         alt="Announcement image"
                                                                         @onclick="() => ToggleAnnouncementExpansion(announcement.AnnouncementId)"
                                                                         title="Click to view all images - URL: @photo.Url"
                                                                         onerror="console.error('Image failed to load:', this.src); this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                                                                    <div class="d-flex flex-column align-items-center justify-content-center bg-light rounded position-absolute top-0 start-0 w-100" 
                                                                         style="height: 150px; display: none; border: 2px dashed #ccc;">
                                                                        <i class="bi bi-image text-muted"></i>
                                                                        <small class="text-muted">Failed</small>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                    @if (announcement.Photos.Count > 3)
                                                    {
                                                        <div class="text-center mt-2">
                                                            <small class="text-muted cursor-pointer px-3 py-1 bg-light rounded-pill" 
                                                                   @onclick="() => ToggleAnnouncementExpansion(announcement.AnnouncementId)">
                                                                <i class="bi bi-plus-circle me-1"></i>
                                                                View all @announcement.Photos.Count images
                                                            </small>
                                                        </div>
                                                    }
                                                }
                                            </div>
                                        }

                                        <!-- Content/Description -->
                                        <div class="d-flex align-items-start gap-3">
                                            <div>
                                                <i class="@(GetAuthorIcon(announcement.AuthorType)) fs-2 text-secondary"></i>
                                            </div>
                                            <div class="flex-grow-1">
                                                <!-- Summary/Preview (always visible) -->
                                                <div class="text-secondary mb-2">
                                                    @(announcement.Summary ?? 
                                                      (announcement.Content.Length > 150 ? 
                                                       announcement.Content.Substring(0, 150) + "..." : 
                                                       announcement.Content))
                                                </div>

                                                <!-- Collapsible Details -->
                                                @if (IsAnnouncementExpanded(announcement.AnnouncementId))
                                                {
                                                    <div class="announcement-details border-top pt-3 mt-2">
                                                        <!-- Full Content -->
                                                        @if (!string.IsNullOrEmpty(announcement.Content) && announcement.Content.Length > 150)
                                                        {
                                                            <div class="mb-3">
                                                                <h6 class="fw-bold">Full Description:</h6>
                                                                <div class="text-secondary">@announcement.Content</div>
                                                            </div>
                                                        }

                                                        <!-- Full Image Gallery -->
                                                        @* @if (announcement.Photos?.Any() == true)
                                                        {
                                                            <div class="mb-3">
                                                                <h6 class="fw-bold">
                                                                    <i class="bi bi-images me-2"></i>
                                                                    Images (@announcement.Photos.Count)
                                                                </h6>
                                                                <div class="row g-3">
                                                                    @foreach (var photo in announcement.Photos)
                                                                    {
                                                                        <div class="col-md-4 col-sm-6">
                                                                            <div class="card shadow-sm h-100">
                                                                                <img src="@photo.Url" class="card-img-top cursor-pointer" 
                                                                                     style="height: 200px; object-fit: cover;" 
                                                                                     alt="Announcement image"
                                                                                     onclick="window.open('@photo.Url', '_blank')"
                                                                                     title="Click to view full size"
                                                                                      />
                                                                                @if (!string.IsNullOrEmpty(photo.Caption))
                                                                                {
                                                                                    <div class="card-body p-2">
                                                                                        <small class="text-muted">@photo.Caption</small>
                                                                                    </div>
                                                                                }
                                                                                else
                                                                                {
                                                                                    <div class="card-body p-2" style="height: 40px;">
                                                                                        <small class="text-muted">Click to view full size</small>
                                                                                    </div>
                                                                                }
                                                                            </div>
                                                                        </div>
                                                                    }
                                                                </div>
                                                            </div>
                                                        } *@

                                                        <!-- Additional Details -->
                                                        <div class="row">
                                                            @if (!string.IsNullOrEmpty(announcement.OrganizationName))
                                                            {
                                                                <div class="col-md-6 mb-2">
                                                                    <small class="text-muted">Organization:</small>
                                                                    <div class="fw-semibold">@announcement.OrganizationName</div>
                                                                </div>
                                                            }
                                                            @if (announcement.ExpiryDate.HasValue)
                                                            {
                                                                <div class="col-md-6 mb-2">
                                                                    <small class="text-muted">Deadline:</small>
                                                                    <div class="fw-semibold">@announcement.ExpiryDate.Value.ToString("MMM dd, yyyy")</div>
                                                                </div>
                                                            }
                                                            <div class="col-md-6 mb-2">
                                                                <small class="text-muted">Visibility:</small>
                                                                <div class="fw-semibold">@(announcement.IsPublic ? "Public" : "Private")</div>
                                                            </div>
                                                            <div class="col-md-6 mb-2">
                                                                <small class="text-muted">Status:</small>
                                                                <div class="fw-semibold">@(announcement.IsActive ? "Active" : "Inactive")</div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                                
                                                <div class="mt-2 d-flex justify-content-between align-items-center">
                                                    <small class="text-muted">
                                                        <i class="bi bi-eye"></i> @announcement.ViewCount views
                                                        • By @announcement.AuthorName
                                                    </small>
                                                    
                                                    <!-- Management Buttons (only for own announcements) -->
                                                    @if (announcement.AuthorId == currentUserId)
                                                    {
                                                        <div class="btn-group btn-group-sm">
                                                            <button class="btn btn-outline-primary" @onclick="async () => await EditAnnouncement(announcement)" 
                                                                    @onclick:stopPropagation="true" title="Edit">
                                                                <i class="bi bi-pencil"></i>
                                                            </button>
                                                            <button class="btn btn-outline-@(announcement.IsPinned ? "warning" : "secondary")" 
                                                                    @onclick="() => TogglePin(announcement.AnnouncementId)" 
                                                                    @onclick:stopPropagation="true" 
                                                                    title="@(announcement.IsPinned ? "Unpin" : "Pin")">
                                                                <i class="bi bi-pin"></i>
                                                            </button>
                                                            <button class="btn btn-outline-danger" @onclick="() => DeleteAnnouncement(announcement.AnnouncementId)" 
                                                                    @onclick:stopPropagation="true" title="Delete">
                                                                <i class="bi bi-trash"></i>
                                                            </button>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <div class="mb-3">
                                <i class="bi bi-megaphone fs-1 text-muted"></i>
                            </div>
                            <h5 class="text-muted">@GetEmptyStateTitle()</h5>
                            <p class="text-muted">@GetEmptyStateMessage()</p>
                            @if (!string.IsNullOrEmpty(searchTerm) || !string.IsNullOrEmpty(selectedCategory))
                            {
                                <button class="btn btn-sm me-2" 
                                        style="border: 2px solid #1E88E5; color: #1E88E5; background: transparent;" 
                                        @onclick="ClearFilters">
                                    Clear Filters
                                </button>
                            }
                            @if (activeTab == "mine" || activeTab == "all")
                            {
                                <button class="btn" 
                                        style="background: linear-gradient(135deg, #1E88E5 0%, #42A5F5 100%); color: white; border: none;" 
                                        @onclick="ShowCreateForm">
                                    <i class="bi bi-plus-circle"></i> Create Your First Announcement
                                </button>
                            }
                        </div>
                    }
                </div>

                <!-- Statistics Sidebar -->
                <div class="col-lg-4 mt-4 mt-lg-0">
                    <div class="card shadow-sm border-0">
                        <div class="card-body">
                            <div class="fw-bold mb-3">Statistics for @activeTab</div>
                            <div class="list-group list-group-flush">
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <span>Total Announcements</span>
                                    <span class="badge rounded-pill" style="background: #1E88E5; color: white;">@GetTabCount()</span>
                                </div>
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <span>From Institutions</span>
                                    <span class="badge rounded-pill" style="background: #42A5F5; color: white;">@institutionCount</span>
                                </div>
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <span>From Benefactors</span>
                                    <span class="badge rounded-pill" style="background: #1565C0; color: white;">@benefactorCount</span>
                                </div>
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <span>My Posts</span>
                                    <span class="badge rounded-pill" style="background: linear-gradient(45deg, #1E88E5, #42A5F5); color: white;">@myPostsCount</span>
                                </div>
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                    <span>Pinned</span>
                                    <span class="badge rounded-pill" style="background: #696969; color: white;">@pinnedCount</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit Modal -->
@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content modern-modal">
                <div class="modal-header text-white" style="background: linear-gradient(135deg, #1E88E5 0%, #42A5F5 100%);">
                    <h5 class="modal-title">
                        <i class="bi bi-@(editingAnnouncement?.AnnouncementId != Guid.Empty ? "pencil" : "plus-circle") me-2"></i>
                        @(editingAnnouncement?.AnnouncementId != Guid.Empty ? "Edit" : "Create") Announcement
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="HideModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="editingAnnouncement" OnValidSubmit="SaveAnnouncement">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label class="form-label">Title</label>
                            <InputText @bind-Value="editingAnnouncement!.Title" class="form-control" />
                            <ValidationMessage For="@(() => editingAnnouncement!.Title)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Content</label>
                            <InputTextArea @bind-Value="editingAnnouncement!.Content" class="form-control" rows="4" />
                            <ValidationMessage For="@(() => editingAnnouncement!.Content)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Summary (optional)</label>
                            <InputTextArea @bind-Value="editingAnnouncement!.Summary" class="form-control" rows="2" />
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Category</label>
                                <InputText @bind-Value="editingAnnouncement!.Category" class="form-control" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Priority</label>
                                <InputSelect @bind-Value="editingAnnouncement!.Priority" class="form-select">
                                    <option value="@AnnouncementPriority.Low">Low</option>
                                    <option value="@AnnouncementPriority.Normal">Normal</option>
                                    <option value="@AnnouncementPriority.High">High</option>
                                    <option value="@AnnouncementPriority.Urgent">Urgent</option>
                                </InputSelect>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Organization Name</label>
                                <InputText @bind-Value="editingAnnouncement!.OrganizationName" class="form-control" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Expiry Date</label>
                                <InputDate @bind-Value="editingAnnouncement!.ExpiryDate" class="form-control" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <InputCheckbox @bind-Value="editingAnnouncement!.IsPublic" class="form-check-input" />
                                <label class="form-check-label">Public (visible to all students)</label>
                            </div>
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <InputCheckbox @bind-Value="editingAnnouncement!.IsPinned" class="form-check-input" />
                                <label class="form-check-label">Pin this announcement</label>
                            </div>
                        </div>

                        <!-- Image Upload Section -->
                        <div class="mb-4">
                            <label class="form-label">Images (Optional)</label>
                            <div class="upload-area" style="border: 2px dashed #dee2e6; border-radius: 12px; padding: 2rem; text-align: center; background: #f8f9fa;">
                                <InputFile OnChange="OnImageSelected" 
                                         multiple 
                                         accept="image/*" 
                                         class="d-none" 
                                         id="imageUpload" />
                                <label for="imageUpload" class="upload-label" style="cursor: pointer; margin: 0;">
                                    <i class="bi bi-cloud-upload fs-1 text-primary mb-3 d-block"></i>
                                    <div>
                                        <strong>Click to upload images</strong> or drag and drop
                                        <div class="text-muted mt-1">PNG, JPG, GIF, WebP up to 10MB each (max 5 images)</div>
                                    </div>
                                </label>
                            </div>

                            @if (isUploadingImages)
                            {
                                <div class="upload-progress mt-3">
                                    <div class="d-flex align-items-center">
                                        <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                                        <span>Uploading images...</span>
                                    </div>
                                    @foreach (var progress in uploadProgress)
                                    {
                                        <div class="progress mt-2" style="height: 4px;">
                                            <div class="progress-bar" role="progressbar" style="width: @(progress.Value)%"></div>
                                        </div>
                                        <small class="text-muted">@progress.Key - @progress.Value%</small>
                                    }
                                </div>
                            }

                            <!-- Selected Images Preview -->
                            @if (selectedImages.Any() || existingPhotos.Any())
                            {
                                <div class="image-previews mt-3">
                                    <div class="row g-2">
                                        <!-- Existing Photos -->
                                        @foreach (var photo in existingPhotos)
                                        {
                                            <div class="col-6 col-sm-4 col-md-3">
                                                <div class="position-relative">
                                                    <img src="@photo.Url" alt="Preview" class="img-fluid rounded" style="height: 100px; width: 100%; object-fit: cover;" />
                                                    <button type="button" 
                                                            class="btn btn-sm btn-danger position-absolute top-0 end-0 m-1" 
                                                            style="width: 24px; height: 24px; border-radius: 50%; padding: 0; display: flex; align-items: center; justify-content: center;"
                                                            @onclick="() => RemoveExistingPhoto(photo.PhotoId)"
                                                            @onclick:stopPropagation="true">
                                                        <i class="bi bi-x" style="font-size: 0.8rem;"></i>
                                                    </button>
                                                    @if (!string.IsNullOrEmpty(photo.Caption))
                                                    {
                                                        <div class="small text-muted text-center mt-1">@photo.Caption</div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        
                                        <!-- New Selected Images -->
                                        @foreach (var (image, index) in selectedImages.Select((img, i) => (img, i)))
                                        {
                                            <div class="col-6 col-sm-4 col-md-3">
                                                <div class="position-relative">
                                                    <div class="border rounded d-flex align-items-center justify-content-center bg-light" style="height: 100px; width: 100%;">
                                                        <div class="text-center">
                                                            <i class="bi bi-image fs-4 text-muted"></i>
                                                            <div class="small text-muted mt-1">@image.Name</div>
                                                        </div>
                                                    </div>
                                                    <button type="button" 
                                                            class="btn btn-sm btn-danger position-absolute top-0 end-0 m-1" 
                                                            style="width: 24px; height: 24px; border-radius: 50%; padding: 0; display: flex; align-items: center; justify-content: center;"
                                                            @onclick="() => RemoveImage(image)"
                                                            @onclick:stopPropagation="true">
                                                        <i class="bi bi-x" style="font-size: 0.8rem;"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="HideModal">Cancel</button>
                            <button type="submit" class="btn" 
                                    style="background: linear-gradient(135deg, #1E88E5 0%, #42A5F5 100%); color: white; border: none;" 
                                    disabled="@isLoadingModal">
                                @if (isLoadingModal)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                @(editingAnnouncement?.AnnouncementId != Guid.Empty ? "Update" : "Create")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Announcement>? announcements;
    private List<Announcement>? filteredAnnouncements;
    private string searchTerm = "";
    private string activeTab = "all";
    private string _selectedCategory = "";
    private string selectedCategory
    {
        get => _selectedCategory;
        set
        {
            if (_selectedCategory != value)
            {
                _selectedCategory = value;
                FilterAnnouncements();
            }
        }
    }
    private bool isLoading = false;
    private bool showModal = false;
    private bool isLoadingModal = false;
    private HashSet<Guid> expandedAnnouncements = new HashSet<Guid>();
    
    // Image upload fields
    private List<IBrowserFile> selectedImages = new();
    private List<Photo> existingPhotos = new();
    private Dictionary<string, int> uploadProgress = new();
    private readonly string[] allowedImageExtensions = { ".jpg", ".jpeg", ".png", ".gif", ".webp" };
    private readonly long maxImageSize = 10 * 1024 * 1024; // 10MB per image
    private bool isUploadingImages = false;
    

    
    // Statistics
    private int institutionCount = 0;
    private int benefactorCount = 0;
    private int myPostsCount = 0;
    private int pinnedCount = 0;
    
    private Announcement editingAnnouncement = new() 
    { 
        Title = "",
        Content = "",
        AuthorId = "",
        AuthorName = "",
        AuthorType = UserRole.Institution
    };
    
    private string currentUserId = "";
    private string currentUserName = "";

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("InstitutionAnnouncement: OnInitializedAsync started");
        await LoadCurrentUser();
        Console.WriteLine($"InstitutionAnnouncement: Current user loaded - ID: {currentUserId}");
        // Only load announcements after user is loaded and all async work is complete
        // Use InvokeAsync to ensure no concurrency issues
        await InvokeAsync(async () => await LoadAnnouncements());
        Console.WriteLine("InstitutionAnnouncement: OnInitializedAsync completed");
    }

    private async Task LoadCurrentUser()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            var user = await UserManager.GetUserAsync(authState.User);
            if (user != null)
            {
                currentUserId = user.Id;
                currentUserName = user.Email ?? "Institution Admin";
            }
        }
    }

    private async Task LoadAnnouncements()
    {
        if (isLoading) return;
        isLoading = true;
        try
        {
            // Load ALL announcements with photos (for shared viewing)
            announcements = await AnnouncementService.GetAllAnnouncementsWithPhotosAsync();
            
            // Debug: Log photo counts for troubleshooting
            Console.WriteLine($"Loaded {announcements?.Count ?? 0} announcements");
            if (announcements != null)
            {
                var totalPhotos = announcements.Sum(a => a.Photos?.Count ?? 0);
                Console.WriteLine($"Total photos across all announcements: {totalPhotos}");
                
                foreach (var announcement in announcements)
                {
                    var photoCount = announcement.Photos?.Count ?? 0;
                    if (photoCount > 0)
                    {
                        Console.WriteLine($"Announcement '{announcement.Title}' has {photoCount} photos");
                        foreach (var photo in announcement.Photos!)
                        {
                            Console.WriteLine($"  Photo URL: {photo.Url}");
                            Console.WriteLine($"  Photo ID: {photo.PhotoId}");
                            Console.WriteLine($"  Photo Caption: {photo.Caption ?? "No caption"}");
                        }
                    }
                    else
                    {
                        Console.WriteLine($"Announcement '{announcement.Title}' has no photos");
                    }
                }
            }
            
            UpdateStatistics();
            FilterAnnouncements();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading announcements: {ex.Message}");
            announcements = new List<Announcement>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void UpdateStatistics()
    {
        if (announcements == null) return;
        
        institutionCount = announcements.Count(a => a.AuthorType == UserRole.Institution);
        benefactorCount = announcements.Count(a => a.AuthorType == UserRole.Benefactor);
        myPostsCount = announcements.Count(a => a.AuthorId == currentUserId);
        pinnedCount = announcements.Count(a => a.IsPinned);
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        FilterAnnouncements();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        FilterAnnouncements();
    }

    private void FilterAnnouncements()
    {
        if (announcements == null) return;

        var filtered = announcements.AsEnumerable();

        // Filter by tab
        filtered = activeTab switch
        {
            "institution" => filtered.Where(a => a.AuthorType == UserRole.Institution),
            "benefactor" => filtered.Where(a => a.AuthorType == UserRole.Benefactor),
            "mine" => filtered.Where(a => a.AuthorId == currentUserId),
            _ => filtered // "all"
        };

        // Filter by category
        if (!string.IsNullOrEmpty(selectedCategory))
        {
            filtered = filtered.Where(a => a.Category?.Contains(selectedCategory) == true);
        }

        // Filter by search term
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(a => 
                a.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                a.Content.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (a.AuthorName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false));
        }

        filteredAnnouncements = filtered.ToList();
        StateHasChanged();
    }

    private void ClearFilters()
    {
        searchTerm = "";
        selectedCategory = "";
        FilterAnnouncements();
    }

    private void ShowCreateForm()
    {
        editingAnnouncement = new Announcement
        {
            Title = "",
            Content = "",
            AuthorId = currentUserId,
            AuthorName = currentUserName,
            AuthorType = UserRole.Institution,
            Priority = AnnouncementPriority.Normal,
            IsPublic = true,
            IsActive = true
        };
        
        // Clear image-related fields
        selectedImages.Clear();
        existingPhotos.Clear();
        uploadProgress.Clear();
        isUploadingImages = false;
        
        showModal = true;
    }

    private async Task EditAnnouncement(Announcement announcement)
    {
        editingAnnouncement = new Announcement
        {
            AnnouncementId = announcement.AnnouncementId,
            Title = announcement.Title,
            Content = announcement.Content,
            Summary = announcement.Summary,
            Category = announcement.Category,
            Priority = announcement.Priority,
            IsPublic = announcement.IsPublic,
            IsPinned = announcement.IsPinned,
            IsActive = announcement.IsActive,
            PublishDate = announcement.PublishDate,
            ExpiryDate = announcement.ExpiryDate,
            AuthorId = announcement.AuthorId,
            AuthorName = announcement.AuthorName,
            AuthorType = announcement.AuthorType,
            OrganizationName = announcement.OrganizationName
        };

        // Load existing photos
        existingPhotos = await AnnouncementService.GetAnnouncementPhotosAsync(announcement.AnnouncementId);
        selectedImages.Clear();
        uploadProgress.Clear();
        isUploadingImages = false;
        
        showModal = true;
    }

    private async Task SaveAnnouncement()
    {
        isLoadingModal = true;
        try
        {
            // Upload new images if any
            var uploadedImageUrls = await UploadSelectedImages();

            Announcement savedAnnouncement;
            if (editingAnnouncement.AnnouncementId != Guid.Empty)
            {
                savedAnnouncement = await AnnouncementService.UpdateAnnouncementAsync(editingAnnouncement.AnnouncementId, editingAnnouncement) ?? editingAnnouncement;
            }
            else
            {
                savedAnnouncement = await AnnouncementService.CreateAnnouncementAsync(editingAnnouncement);
            }

            // Add new photos to the announcement
            if (uploadedImageUrls.Any())
            {
                await AnnouncementService.AddPhotosToAnnouncementAsync(savedAnnouncement.AnnouncementId, uploadedImageUrls);
            }

            // Remove deleted existing photos (photos that were in existingPhotos when we loaded but are no longer there)
            if (editingAnnouncement.AnnouncementId != Guid.Empty)
            {
                var originalPhotos = await AnnouncementService.GetAnnouncementPhotosAsync(editingAnnouncement.AnnouncementId);
                var photosToRemove = originalPhotos.Where(op => !existingPhotos.Any(ep => ep.PhotoId == op.PhotoId)).ToList();
                
                foreach (var photo in photosToRemove)
                {
                    await AnnouncementService.RemovePhotoFromAnnouncementAsync(photo.PhotoId);
                }
            }
            
            await LoadAnnouncements();
            HideModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving announcement: {ex.Message}");
        }
        finally
        {
            isLoadingModal = false;
        }
    }



    private async Task TogglePin(Guid announcementId)
    {
        try
        {
            await AnnouncementService.TogglePinAsync(announcementId, currentUserId);
            await LoadAnnouncements();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling pin: {ex.Message}");
        }
    }

    private async Task DeleteAnnouncement(Guid announcementId)
    {
        try
        {
            if (await AnnouncementService.DeleteAnnouncementAsync(announcementId, currentUserId))
            {
                await LoadAnnouncements();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting announcement: {ex.Message}");
        }
    }

    private async Task IncrementView(Guid announcementId)
    {
        try
        {
            await AnnouncementService.IncrementViewCountAsync(announcementId);
            // Update local count without full reload
            var announcement = announcements?.FirstOrDefault(a => a.AnnouncementId == announcementId);
            if (announcement != null)
            {
                announcement.ViewCount++;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error incrementing view count: {ex.Message}");
        }
    }

    private void HideModal()
    {
        showModal = false;
        editingAnnouncement = new() 
        { 
            Title = "",
            Content = "",
            AuthorId = "",
            AuthorName = "",
            AuthorType = UserRole.Institution
        };
        
        // Clear image-related fields
        selectedImages.Clear();
        existingPhotos.Clear();
        uploadProgress.Clear();
        isUploadingImages = false;
    }

    private bool IsAnnouncementExpanded(Guid announcementId)
    {
        return expandedAnnouncements.Contains(announcementId);
    }

    private void ToggleAnnouncementExpansion(Guid announcementId)
    {
        if (expandedAnnouncements.Contains(announcementId))
        {
            expandedAnnouncements.Remove(announcementId);
        }
        else
        {
            expandedAnnouncements.Add(announcementId);
        }
        StateHasChanged();
    }

    // Helper methods for UI
    private string GetTabDescription()
    {
        return activeTab switch
        {
            "all" => "All announcements from institutions and benefactors",
            "institution" => "Announcements from educational institutions",
            "benefactor" => "Announcements from scholarship benefactors",
            "mine" => "Announcements you have created",
            _ => "Announcements"
        };
    }

    private string GetEmptyStateTitle()
    {
        return activeTab switch
        {
            "all" => "No announcements found",
            "institution" => "No institution announcements",
            "benefactor" => "No benefactor announcements", 
            "mine" => "You haven't created any announcements yet",
            _ => "No announcements found"
        };
    }

    private string GetEmptyStateMessage()
    {
        if (!string.IsNullOrEmpty(searchTerm) || !string.IsNullOrEmpty(selectedCategory))
        {
            return "Try adjusting your search terms or filters.";
        }
        
        return activeTab switch
        {
            "all" => "There are no announcements to display at this time.",
            "institution" => "No institutions have posted announcements yet.",
            "benefactor" => "No benefactors have posted announcements yet.",
            "mine" => "Click 'Create Announcement' to share information with students.",
            _ => "No announcements available."
        };
    }

    private int GetTabCount()
    {
        return activeTab switch
        {
            "all" => announcements?.Count ?? 0,
            "institution" => institutionCount,
            "benefactor" => benefactorCount,
            "mine" => myPostsCount,
            _ => 0
        };
    }

    private string GetAuthorBadgeClass(UserRole authorType)
    {
        return authorType switch
        {
            UserRole.Institution => "bg-success",
            UserRole.Benefactor => "bg-info",
            _ => "bg-secondary"
        };
    }

    private string GetAuthorIcon(UserRole authorType)
    {
        return authorType switch
        {
            UserRole.Institution => "bi bi-building",
            UserRole.Benefactor => "bi bi-globe",
            _ => "bi bi-person"
        };
    }

    private string GetPriorityColor(AnnouncementPriority priority)
    {
        return priority switch
        {
            AnnouncementPriority.Low => "secondary",
            AnnouncementPriority.Normal => "primary",
            AnnouncementPriority.High => "warning",
            AnnouncementPriority.Urgent => "danger",
            _ => "primary"
        };
    }

    // Image handling methods
    private void OnImageSelected(InputFileChangeEventArgs e)
    {
        var validImages = new List<IBrowserFile>();
        
        // Limit to 5 images total (existing + new)
        var maxNewImages = Math.Max(0, 5 - existingPhotos.Count);
        var filesToProcess = e.GetMultipleFiles(maxNewImages);
        
        foreach (var file in filesToProcess)
        {
            var ext = Path.GetExtension(file.Name).ToLowerInvariant();
            if (!allowedImageExtensions.Contains(ext))
            {
                Console.WriteLine($"Skipping invalid file type: {file.Name}");
                continue; // Skip invalid files
            }

            if (file.Size > maxImageSize)
            {
                Console.WriteLine($"Skipping oversized file: {file.Name} ({file.Size} bytes)");
                continue; // Skip files that are too large
            }

            validImages.Add(file);
        }

        selectedImages.Clear();
        selectedImages.AddRange(validImages);
        uploadProgress.Clear();
        
        StateHasChanged();
    }

    private void RemoveImage(IBrowserFile imageToRemove)
    {
        selectedImages.Remove(imageToRemove);
        uploadProgress.Remove(imageToRemove.Name);
        StateHasChanged();
    }

    private void RemoveExistingPhoto(Guid photoId)
    {
        var photoToRemove = existingPhotos.FirstOrDefault(p => p.PhotoId == photoId);
        if (photoToRemove != null)
        {
            existingPhotos.Remove(photoToRemove);
            StateHasChanged();
        }
    }

    private async Task<List<string>> UploadSelectedImages()
    {
        if (!selectedImages.Any()) return new List<string>();
        
        isUploadingImages = true;
        var uploadedUrls = new List<string>();
        
        try
        {
            foreach (var image in selectedImages)
            {
                try
                {
                    uploadProgress[image.Name] = 0;
                    StateHasChanged();

                    var uniqueName = $"{Guid.NewGuid()}_{Path.GetFileName(image.Name)}";
                    
                    uploadProgress[image.Name] = 25;
                    StateHasChanged();
                    
                    using var stream = image.OpenReadStream(maxImageSize);
                    
                    uploadProgress[image.Name] = 50;
                    StateHasChanged();

                    var url = await BlobStorageService.UploadPhotoAsync(stream, uniqueName, image.ContentType);
                    uploadedUrls.Add(url);

                    uploadProgress[image.Name] = 100;
                    StateHasChanged();
                    
                    Console.WriteLine($"Successfully uploaded image: {image.Name} -> {uniqueName}");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error uploading image {image.Name}: {ex.Message}");
                    // Continue with other images
                }
            }
        }
        finally
        {
            isUploadingImages = false;
            uploadProgress.Clear();
            StateHasChanged();
        }

        return uploadedUrls;
    }

}



<style>
    .cursor-pointer {
        cursor: pointer;
    }

    .page-title {
        font-weight: 700;
        color: #1E88E5; /* Primary Blue */
        margin-bottom: 0.5rem;
        font-size: 2rem;
    }

    .search-header-section {
        background: linear-gradient(135deg, #E3F2FD 0%, #F3E5F5 100%); /* Light Blue gradient */
        border-radius: 16px;
        padding: 2rem;
        margin-bottom: 2rem;
        border: 1px solid #42A5F5; /* Light Blue border */
    }

    .input-group .form-control {
        border-radius: 25px 0 0 25px;
        border-right: none;
        padding: 0.75rem 1rem;
    }

    .input-group-text {
        border-radius: 25px 0 0 25px;
        border-right: none;
    }

    .input-group .btn {
        border-radius: 0 25px 25px 0;
        border-left: none;
    }

    .modern-tabs {
        background: linear-gradient(135deg, #E3F2FD 0%, #BBDEFB 100%); /* Light Blue gradient */
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(30, 136, 229, 0.1); /* Blue shadow */
        padding: 0.75rem 1rem;
    }
    .tab-pills {
        display: flex;
        gap: 1rem;
    }
    .tab-pill {
        background: #fff;
        border: 1px solid #42A5F5; /* Light Blue border */
        border-radius: 24px;
        padding: 0.5rem 1.25rem;
        font-weight: 500;
        color: #1E88E5; /* Primary Blue text */
        display: flex;
        align-items: center;
        gap: 0.5rem;
        box-shadow: 0 1px 4px rgba(30, 136, 229, 0.1); /* Blue shadow */
        transition: background 0.2s, color 0.2s, box-shadow 0.2s;
        cursor: pointer;
        border: none;
        outline: none;
    }
    .tab-pill.active {
        background: linear-gradient(135deg, #1E88E5 0%, #1565C0 100%); /* Primary to Dark Blue gradient */
        color: #fff;
        box-shadow: 0 2px 8px rgba(30, 136, 229, 0.3); /* Blue shadow */
    }
    .tab-pill:hover:not(.active) {
        background: linear-gradient(135deg, #42A5F5 0%, #64B5F6 100%); /* Light Blue gradient */
        color: #0D47A1; /* Navy Blue for contrast */
    }
    .tab-pill i {
        font-size: 1.1rem;
    }
    .modern-tabs .form-select {
        border-radius: 24px;
        font-size: 0.95rem;
        padding-left: 1rem;
        border: 2px solid #42A5F5;
        background-color: white;
        color: #1E88E5;
        font-weight: 500;
        transition: all 0.2s ease;
    }
    
    .modern-tabs .form-select:focus {
        border-color: #1E88E5;
        box-shadow: 0 0 0 0.2rem rgba(30, 136, 229, 0.15);
        outline: none;
    }
    
    .modern-tabs .form-select:hover {
        border-color: #1E88E5;
        background-color: #E3F2FD;
    }
    .announcement-details {
        animation: fadeIn 0.3s ease-in-out;
    }
    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(-10px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .modern-modal {
        border-radius: 16px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15);
        border: none;
    }

    .modal-header {
        border-radius: 16px 16px 0 0;
        background: linear-gradient(135deg, #1E88E5 0%, #42A5F5 100%) !important;
    }

    .modal-body {
        padding: 2rem;
    }

    .form-control, .form-select {
        border-radius: 8px;
        border: 2px solid #e9ecef;
        padding: 0.75rem 1rem;
        transition: all 0.2s;
    }

    .form-control:focus, .form-select:focus {
        border-color: #1E88E5; /* Primary Blue */
        box-shadow: 0 0 0 0.2rem rgba(30, 136, 229, 0.25); /* Blue shadow */
    }

    .form-check-input:checked {
        background-color: #1E88E5; /* Primary Blue */
        border-color: #1E88E5; /* Primary Blue */
    }

    /* Image Upload Styles */
    .upload-area {
        transition: all 0.3s ease;
        border: 2px dashed #42A5F5 !important; /* Light Blue */
        border-radius: 12px !important;
        padding: 2rem !important;
        text-align: center !important;
        background: #E3F2FD !important; /* Light Blue background */
    }

    .upload-area:hover {
        border-color: #1E88E5 !important; /* Primary Blue */
        background: linear-gradient(135deg, #BBDEFB 0%, #90CAF9 100%) !important; /* Blue gradient */
    }

    .upload-label {
        cursor: pointer !important;
        margin: 0 !important;
    }

    .upload-progress {
        margin-top: 1rem;
    }

    .image-previews {
        margin-top: 1rem;
    }

    .image-preview-item {
        position: relative;
        border-radius: 8px;
        overflow: hidden;
    }

    .image-preview-item img {
        transition: all 0.2s ease;
    }

    .image-preview-item:hover img {
        transform: scale(1.05);
    }

    .image-preview-item .btn-danger {
        opacity: 0.8;
        transition: opacity 0.2s ease;
    }

    .image-preview-item:hover .btn-danger {
        opacity: 1;
    }

    .upload-progress .progress {
        height: 4px;
        border-radius: 2px;
        background-color: #e9ecef;
    }

    .upload-progress .progress-bar {
        background: linear-gradient(90deg, #1E88E5 0%, #42A5F5 100%); /* Primary to Light Blue gradient */
        transition: width 0.3s ease;
    }

    /* Enhanced Single Image Display Styles */
    .single-image-container {
        overflow: hidden;
        border-radius: 12px;
        transition: transform 0.2s ease;
        position: relative;
        min-height: 300px;
    }

    .single-image-container:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(30, 136, 229, 0.3); /* Blue shadow */
    }

    .single-image-container .announcement-image {
        transition: transform 0.3s ease;
        position: relative;
        z-index: 1;
        display: block !important;
    }

    .single-image-container .announcement-image:hover {
        transform: scale(1.02);
    }



    /* Hide overlays by default, show on hover */
    .single-image-container .expand-hint,
    .single-image-container .image-caption {
        opacity: 0;
        transition: opacity 0.3s ease;
        z-index: 3;
    }

    .single-image-container:hover .expand-hint,
    .single-image-container:hover .image-caption {
        opacity: 1;
    }

    .single-image-container .expand-hint .badge {
        backdrop-filter: blur(4px);
    }

    /* Loading state */
    .single-image-container .image-loading {
        z-index: 10;
    }



    /* Image loading animation */
    .announcement-image {
        animation: imageLoad 0.5s ease-in-out;
    }

    @@keyframes imageLoad {
        from {
            opacity: 0;
            transform: scale(0.98);
        }
        to {
            opacity: 1;
            transform: scale(1);
        }
    }

    /* Custom Color Palette Classes */
    .btn-custom-primary {
        background: linear-gradient(135deg, #1E88E5 0%, #42A5F5 100%);
        color: white;
        border: none;
        transition: all 0.3s ease;
    }

    .btn-custom-primary:hover {
        background: linear-gradient(135deg, #1565C0 0%, #1E88E5 100%);
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(30, 136, 229, 0.4);
    }

    .btn-custom-outline {
        border: 2px solid #1E88E5;
        color: #1E88E5;
        background: transparent;
        transition: all 0.3s ease;
    }

    .btn-custom-outline:hover {
        background: linear-gradient(135deg, #42A5F5 0%, #64B5F6 100%);
        color: white;
        border-color: #42A5F5;
    }

    .text-custom-primary {
        color: #1E88E5 !important;
    }

    .text-custom-accent {
        color: #1565C0 !important;
    }

    .bg-custom-light {
        background: linear-gradient(135deg, #E3F2FD 0%, #BBDEFB 100%) !important;
    }

    .border-custom {
        border-color: #42A5F5 !important;
    }

    /* Badge variations for the custom palette */
    .badge-custom-primary {
        background: #1E88E5;
        color: white;
    }

    .badge-custom-accent {
        background: #1565C0;
        color: white;
    }

    .badge-custom-success {
        background: #42A5F5;
        color: white;
    }

    .badge-custom-gradient {
        background: linear-gradient(45deg, #1E88E5, #42A5F5);
        color: white;
    }
</style>
