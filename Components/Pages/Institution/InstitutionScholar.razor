@page "/dashboard/institution/scholars"
@attribute [Authorize(Roles = "Institution")] 
@layout Layout.InstitutionDashLayout

@using c2_eskolar.Data
@using c2_eskolar.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity

@inject c2_eskolar.Services.StudentProfileService StudentProfileService
@inject c2_eskolar.Services.VerificationDocumentService VerificationDocumentService
@inject c2_eskolar.Services.InstitutionProfileService InstitutionProfileService
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> UserManager

@code {
    public class StudentDocument
    {
        public string Name { get; set; } = "";
        public string DateUploaded { get; set; } = "";
        public string Status { get; set; } = "";
        public string StatusClass { get; set; } = "";
        public string FileType { get; set; } = "";
        public string FilePath { get; set; } = "";
        public string DocumentSource { get; set; } = ""; // "Verification" or "Application"
        public string ApplicationTitle { get; set; } = ""; // For application documents
    }

    public class Student
    {
    public Guid Id { get; set; }
        public string Name { get; set; } = "";
        public string Email { get; set; } = "";
        public string Status { get; set; } = "";
        public string GPA { get; set; } = "";
        public string Year { get; set; } = "";
        public List<StudentDocument> Documents { get; set; } = new List<StudentDocument>();
    }

    private List<Student> affiliatedStudents = new List<Student>();
    private List<Student> externalScholars = new List<Student>();
    private string activeTab = "affiliated";
    private string currentInstitutionName = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentInstitution();
        await LoadStudentsAndScholars();
    }

    private async Task LoadCurrentInstitution()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                var user = await UserManager.GetUserAsync(authState.User);
                if (user != null)
                {
                    var institutionProfile = await InstitutionProfileService.GetProfileByUserIdAsync(user.Id);
                    currentInstitutionName = institutionProfile?.InstitutionName ?? "";
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading institution: {ex.Message}");
        }
    }

    private async Task LoadStudentsAndScholars()
    {
        var profiles = await StudentProfileService.GetAllProfilesAsync();
        affiliatedStudents = new List<Student>();
        externalScholars = new List<Student>();
        
        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        
        foreach (var profile in profiles)
        {
            var allDocuments = new List<StudentDocument>();
            
            // Get verification documents
            var verificationDocs = await VerificationDocumentService.GetDocumentsByUserIdAsync(profile.UserId);
            var mappedVerificationDocs = verificationDocs.Select(d => new StudentDocument
            {
                Name = d.DocumentType ?? "Document",
                DateUploaded = d.UploadedAt?.ToString("MM/dd/yyyy") ?? "",
                Status = d.Status ?? "Pending",
                StatusClass = d.Status == "Approved" ? "text-success" : d.Status == "Pending" ? "text-warning" : d.Status == "Needs Revision" ? "text-danger" : "text-info",
                FileType = d.FilePath?.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase) == true ? "PDF" : d.FilePath?.EndsWith(".docx", StringComparison.OrdinalIgnoreCase) == true ? "DOCX" : "Other",
                FilePath = d.FilePath ?? "",
                DocumentSource = "Verification",
                ApplicationTitle = ""
            }).ToList();
            
            allDocuments.AddRange(mappedVerificationDocs);
            
            // Get scholarship applications and their documents
            var applications = await dbContext.ScholarshipApplications
                .Include(a => a.Scholarship)
                .Include(a => a.Documents)
                .Where(a => a.StudentProfileId == profile.StudentProfileId)
                .ToListAsync();
                
            foreach (var application in applications)
            {
                // Add documents from the Documents collection
                var appDocuments = application.Documents.Select(d => new StudentDocument
                {
                    Name = d.FileName,
                    DateUploaded = d.UploadedAt.ToString("MM/dd/yyyy"),
                    Status = "Submitted", // Application documents don't have individual status
                    StatusClass = "text-info",
                    FileType = GetFileTypeFromPath(d.FilePath),
                    FilePath = d.FilePath,
                    DocumentSource = "Application",
                    ApplicationTitle = application.Scholarship?.Title ?? "Unknown Scholarship"
                }).ToList();
                
                allDocuments.AddRange(appDocuments);
                
                // Add documents from UploadedDocuments property (comma-separated paths)
                if (!string.IsNullOrEmpty(application.UploadedDocuments))
                {
                    var uploadedDocPaths = application.UploadedDocuments.Split(',', StringSplitOptions.RemoveEmptyEntries);
                    var uploadedDocs = uploadedDocPaths.Select(path => new StudentDocument
                    {
                        Name = GetFileName(path.Trim()),
                        DateUploaded = application.ApplicationDate.ToString("MM/dd/yyyy"),
                        Status = application.Status ?? "Pending",
                        StatusClass = application.Status == "Approved" ? "text-success" : application.Status == "Pending" ? "text-warning" : application.Status == "Rejected" ? "text-danger" : "text-info",
                        FileType = GetFileTypeFromPath(path.Trim()),
                        FilePath = path.Trim(),
                        DocumentSource = "Application",
                        ApplicationTitle = application.Scholarship?.Title ?? "Unknown Scholarship"
                    }).ToList();
                    
                    allDocuments.AddRange(uploadedDocs);
                }
            }

            var student = new Student
            {
                Id = profile.StudentProfileId,
                Name = profile.FullName,
                Email = profile.Email ?? "",
                Status = profile.VerificationStatus ?? "Pending",
                GPA = profile.GPA?.ToString("0.0") ?? "N/A",
                Year = profile.YearLevel.HasValue ? $"{profile.YearLevel} Year" : "N/A",
                Documents = allDocuments
            };

            // Categorize students based on their university affiliation
            if (!string.IsNullOrEmpty(profile.UniversityName) && 
                !string.IsNullOrEmpty(currentInstitutionName) &&
                profile.UniversityName.Equals(currentInstitutionName, StringComparison.OrdinalIgnoreCase))
            {
                affiliatedStudents.Add(student);
            }
            else
            {
                externalScholars.Add(student);
            }
        }
    }
    
    private string GetFileName(string path)
    {
        if (string.IsNullOrWhiteSpace(path)) return "";
        try
        {
            // Handles both / and \ as separators
            var parts = path.Split(new[] {'/', '\\'}, StringSplitOptions.RemoveEmptyEntries);
            var fileName = parts.Length > 0 ? parts[^1] : path;
            // Truncate if too long
            if (fileName.Length > 32)
                return fileName.Substring(0, 14) + "..." + fileName.Substring(fileName.Length - 12);
            return fileName;
        }
        catch { return path; }
    }
    
    private string GetFileTypeFromPath(string path)
    {
        if (string.IsNullOrWhiteSpace(path)) return "Other";
        if (path.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase)) return "PDF";
        if (path.EndsWith(".docx", StringComparison.OrdinalIgnoreCase) || path.EndsWith(".doc", StringComparison.OrdinalIgnoreCase)) return "DOCX";
        if (path.EndsWith(".jpg", StringComparison.OrdinalIgnoreCase) || path.EndsWith(".jpeg", StringComparison.OrdinalIgnoreCase) || path.EndsWith(".png", StringComparison.OrdinalIgnoreCase)) return "Image";
        return "Other";
    }

    private List<Student> GetCurrentStudentList()
    {
        return activeTab == "affiliated" ? affiliatedStudents : externalScholars;
    }

    private string GetCurrentTabTitle()
    {
        return activeTab == "affiliated" ? "Affiliated Students" : "External Scholars";
    }

    private string GetCurrentTabDescription()
    {
        return activeTab == "affiliated" 
            ? "Students who are enrolled in your institution" 
            : "Scholarship recipients from other institutions";
    }
}

<div class="container-fluid py-4" style="background: linear-gradient(135deg, #f8fbff 0%, #e3f2fd 100%); min-height: 100vh;">
    <div class="row justify-content-center">
        <div class="col-12 col-xl-10">
            
            <!-- Header Section -->
            <div class="card border-0 shadow-sm mb-4" style="background: linear-gradient(135deg, #1976d2 0%, #2196f3 100%);">
                <div class="card-body text-white">
                    <div class="row align-items-center">
                        <div class="col-md-8">
                            <h2 class="fw-bold mb-2">
                                <i class="fa fa-graduation-cap me-2"></i>Scholar Management
                            </h2>
                            <p class="mb-0 opacity-90">Monitor and manage scholarship recipients and their documentation</p>
                        </div>
                        <div class="col-md-4 text-end">
                            <div class="d-flex justify-content-end gap-3">
                                <div class="text-center">
                                    <div class="fs-4 fw-bold">@affiliatedStudents.Count</div>
                                    <small class="opacity-90">Affiliated</small>
                                </div>
                                <div class="text-center">
                                    <div class="fs-4 fw-bold">@externalScholars.Count</div>
                                    <small class="opacity-90">External</small>
                                </div>
                                <div class="text-center">
                                    <div class="fs-4 fw-bold">@(affiliatedStudents.Count + externalScholars.Count)</div>
                                    <small class="opacity-90">Total</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Tab Navigation -->
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-body p-0">
                    <nav class="nav nav-tabs border-0" id="scholarTabs" role="tablist">
                        <button class="nav-link @(activeTab == "affiliated" ? "active" : "") fw-semibold px-4 py-3 border-0" 
                                type="button" @onclick="@(() => activeTab = "affiliated")"
                                style="@(activeTab == "affiliated" ? "background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%); color: #1976d2; border-bottom: 3px solid #1976d2 !important;" : "background: transparent; color: #666;")">
                            <i class="fa fa-university me-2"></i>
                            Affiliated Students
                            <span class="badge @(activeTab == "affiliated" ? "bg-primary" : "bg-secondary") ms-2">@affiliatedStudents.Count</span>
                        </button>
                        <button class="nav-link @(activeTab == "external" ? "active" : "") fw-semibold px-4 py-3 border-0" 
                                type="button" @onclick="@(() => activeTab = "external")"
                                style="@(activeTab == "external" ? "background: linear-gradient(135deg, #e8f5e8 0%, #c8e6c9 100%); color: #388e3c; border-bottom: 3px solid #388e3c !important;" : "background: transparent; color: #666;")">
                            <i class="fa fa-globe me-2"></i>
                            External Scholars
                            <span class="badge @(activeTab == "external" ? "bg-success" : "bg-secondary") ms-2">@externalScholars.Count</span>
                        </button>
                    </nav>
                </div>
            </div>

            <!-- Search and Filters -->
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <div class="input-group">
                                <span class="input-group-text bg-primary text-white border-0">
                                    <i class="fa fa-search"></i>
                                </span>
                                <input type="text" class="form-control border-0 shadow-sm" placeholder="Search scholars by name, email, or status..." />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="row g-2">
                                <div class="col-6">
                                    <select class="form-select border-0 shadow-sm">
                                        <option>All Status</option>
                                        <option>Active</option>
                                        <option>Probation</option>
                                        <option>Inactive</option>
                                    </select>
                                </div>
                                <div class="col-6">
                                    <select class="form-select border-0 shadow-sm">
                                        <option>Sort by Name</option>
                                        <option>Sort by GPA</option>
                                        <option>Sort by Year</option>
                                        <option>Sort by Status</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Tab Content Info Banner -->
            <div class="card border-0 shadow-sm mb-4" style="background: linear-gradient(135deg, @(activeTab == "affiliated" ? "#e3f2fd 0%, #bbdefb 100%" : "#e8f5e8 0%, #c8e6c9 100%")); border-left: 5px solid @(activeTab == "affiliated" ? "#1976d2" : "#388e3c") !important;">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col-md-2 text-center">
                            <div class="@(activeTab == "affiliated" ? "bg-primary" : "bg-success") rounded-circle d-inline-flex align-items-center justify-content-center" style="width: 80px; height: 80px;">
                                <i class="fa @(activeTab == "affiliated" ? "fa-university" : "fa-globe") text-white fa-2x"></i>
                            </div>
                        </div>
                        <div class="col-md-10">
                            <h4 class="fw-bold @(activeTab == "affiliated" ? "text-primary" : "text-success") mb-2">@GetCurrentTabTitle()</h4>
                            <p class="text-muted mb-2">@GetCurrentTabDescription()</p>
                            <div class="row">
                                <div class="col-md-4">
                                    <small class="text-muted">Category:</small>
                                    <div class="fw-semibold">@(activeTab == "affiliated" ? "Institution Students" : "External Recipients")</div>
                                </div>
                                <div class="col-md-4">
                                    <small class="text-muted">Total Count:</small>
                                    <div class="fw-semibold @(activeTab == "affiliated" ? "text-primary" : "text-success")">@GetCurrentStudentList().Count students</div>
                                </div>
                                <div class="col-md-4">
                                    <small class="text-muted">Active Status:</small>
                                    <div class="fw-semibold">@GetCurrentStudentList().Count(s => s.Status == "Active" || s.Status == "Verified") active</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Scholars List -->
            <div class="accordion" id="scholarsAccordion">
                @{
                    var currentStudents = GetCurrentStudentList();
                }
                @if (currentStudents.Count == 0)
                {
                    <div class="card border-0 shadow-sm">
                        <div class="card-body text-center py-5">
                            <i class="fa @(activeTab == "affiliated" ? "fa-university" : "fa-globe") fa-4x text-muted mb-3"></i>
                            <h5 class="text-muted">No @(activeTab == "affiliated" ? "affiliated students" : "external scholars") found</h5>
                            <p class="text-muted">@(activeTab == "affiliated" ? "Students from your institution will appear here once they register." : "Scholarship recipients from other institutions will appear here.")</p>
                        </div>
                    </div>
                }
                else
                {
                    @for (int i = 0; i < currentStudents.Count; i++)
                    {
                        var student = currentStudents[i];
                        var isFirst = i == 0;
                    <div class="card border-0 shadow-sm mb-3">
                        <div class="card-header bg-white border-0 p-0">
                            <h2 class="accordion-header" id="heading@(student.Id)">
                                <button class="accordion-button @(isFirst ? "" : "collapsed") fw-semibold border-0 rounded"
                                        type="button" data-bs-toggle="collapse" data-bs-target="#collapse@(student.Id)" 
                                        aria-expanded="@(isFirst ? "true" : "false")" aria-controls="collapse@(student.Id)"
                                        style="background: linear-gradient(135deg, #f8fbff 0%, #e8f4fd 100%); border-left: 4px solid #1976d2;">
                                    <div class="d-flex justify-content-between align-items-center w-100 me-3">
                                        <div class="d-flex align-items-center">
                                            <div class="me-3">
                                                <div class="bg-primary rounded-circle d-flex align-items-center justify-content-center text-white fw-bold" style="width: 45px; height: 45px;">
                                                    @(string.IsNullOrWhiteSpace(student.Name) ? "?" : student.Name.Substring(0, 1))
                                                </div>
                                            </div>
                                            <div>
                                                <div class="fw-bold text-primary">@student.Name</div>
                                                <small class="text-muted">@student.Email</small>
                                            </div>
                                        </div>
                                        <div class="d-flex gap-3 align-items-center">
                                            <div class="text-center">
                                                <small class="text-muted d-block">Academic Year</small>
                                                <span class="fw-semibold">@student.Year</span>
                                            </div>
                                            <div class="text-center">
                                                <small class="text-muted d-block">GPA</small>
                                                <span class="fw-bold text-primary">@student.GPA</span>
                                            </div>
                                            <span class="badge @(student.Status == "Active" ? "bg-success" : student.Status == "Probation" ? "bg-warning" : "bg-secondary") px-3 py-2">
                                                @student.Status
                                            </span>
                                        </div>
                                    </div>
                                </button>
                            </h2>
                        </div>
                        <div id="collapse@(student.Id)" class="accordion-collapse collapse @(isFirst ? "show" : "")"
                             aria-labelledby="heading@(student.Id)" data-bs-parent="#scholarsAccordion">
                            <div class="card-body bg-light">
                                <!-- Student Details -->
                                <div class="row mb-4">
                                    <div class="col-md-6">
                                        <div class="card border-0 h-100" style="background: rgba(25, 118, 210, 0.05);">
                                            <div class="card-body">
                                                <h6 class="fw-bold text-primary mb-3">
                                                    <i class="fa fa-user me-2"></i>Scholar Information
                                                </h6>
                                                <div class="row g-3">
                                                    <div class="col-12">
                                                        <small class="text-muted">Full Name</small>
                                                        <div class="fw-semibold">@student.Name</div>
                                                    </div>
                                                    <div class="col-12">
                                                        <small class="text-muted">Email Address</small>
                                                        <div class="fw-semibold">@student.Email</div>
                                                    </div>
                                                    <div class="col-6">
                                                        <small class="text-muted">Academic Year</small>
                                                        <div class="fw-semibold">@student.Year</div>
                                                    </div>
                                                    <div class="col-6">
                                                        <small class="text-muted">Current GPA</small>
                                                        <div class="fw-bold text-primary">@student.GPA</div>
                                                    </div>
                                                    <div class="col-12">
                                                        <small class="text-muted">Scholar Status</small>
                                                        <div>
                                                            <span class="badge @(student.Status == "Active" ? "bg-success" : student.Status == "Probation" ? "bg-warning" : "bg-secondary") px-3 py-2">
                                                                @student.Status
                                                            </span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="card border-0 h-100" style="background: rgba(76, 175, 80, 0.05);">
                                            <div class="card-body">
                                                <h6 class="fw-bold text-success mb-3">
                                                    <i class="fa fa-line-chart me-2"></i>Academic Performance
                                                </h6>
                                                <div class="text-center">
                                                    <div class="position-relative d-inline-block">
                                                        <div class="bg-success rounded-circle d-flex align-items-center justify-content-center text-white" style="width: 100px; height: 100px;">
                                                            <div>
                                                                <div class="fs-4 fw-bold">@student.GPA</div>
                                                                <small>GPA</small>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="mt-3">
                                                        <div class="progress" style="height: 8px;">
                                                            @{
                                                                double gpaValue = 0.0;
                                                                var gpaParsed = double.TryParse(student.GPA, out gpaValue);
                                                                var percent = gpaParsed ? (gpaValue / 4.0 * 100) : 0;
                                                            }
                                                            <div class="progress-bar bg-success" style="width: @percent%"></div>
                                                        </div>
                                                        <small class="text-muted">Performance Rating: @(gpaParsed ? "Excellent" : "N/A")</small>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Documents Section -->
                                <div class="card border-0" style="background: rgba(255, 193, 7, 0.05);">
                                    <div class="card-body">
                                        <div class="d-flex justify-content-between align-items-center mb-3">
                                            <h6 class="fw-bold text-warning mb-0">
                                                <i class="fa fa-file-text me-2"></i>Submitted Documents
                                            </h6>
                                            <span class="badge bg-primary">@student.Documents.Count documents</span>
                                        </div>
                                        
                                        @if (student.Documents.Any())
                                        {
                                            <div class="table-responsive">
                                                <table class="table table-hover mb-0">
                                                    <thead style="background: rgba(25, 118, 210, 0.1);">
                                                        <tr>
                                                            <th class="border-0 fw-bold text-primary">Document</th>
                                                            <th class="border-0 fw-bold text-primary">Source</th>
                                                            <th class="border-0 fw-bold text-primary">Type</th>
                                                            <th class="border-0 fw-bold text-primary">Date Submitted</th>
                                                            <th class="border-0 fw-bold text-primary">Status</th>
                                                            <th class="border-0 fw-bold text-primary">Actions</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var doc in student.Documents.OrderByDescending(d =>
    DateTime.TryParse(d.DateUploaded, out var dt) ? dt : DateTime.MinValue))
                                                        {
                                                            <tr class="border-bottom">
                                                                <td class="border-0">
                                                                    <div class="d-flex align-items-center">
                                                                        <i class="fa @(doc.FileType == "PDF" ? "fa-file-pdf-o text-danger" : doc.FileType == "DOCX" ? "fa-file-word-o text-primary" : doc.FileType == "Image" ? "fa-file-image-o text-success" : "fa-file-o text-secondary") me-2"></i>
                                                                        <div>
                                                                            <div class="fw-semibold">@doc.Name</div>
                                                                            @if (!string.IsNullOrEmpty(doc.ApplicationTitle))
                                                                            {
                                                                                <small class="text-muted">@doc.ApplicationTitle</small>
                                                                            }
                                                                        </div>
                                                                    </div>
                                                                </td>
                                                                <td class="border-0">
                                                                    <span class="badge @(doc.DocumentSource == "Verification" ? "bg-info" : "bg-primary") text-white">@doc.DocumentSource</span>
                                                                </td>
                                                                <td class="border-0">
                                                                    <span class="badge bg-light text-dark border">@doc.FileType</span>
                                                                </td>
                                                                <td class="border-0">
                                                                    <small class="text-muted">@doc.DateUploaded</small>
                                                                </td>
                                                                <td class="border-0">
                                                                    <span class="@doc.StatusClass fw-semibold">
                                                                        <i class="fa @(doc.Status == "Approved" ? "fa-check-circle" : doc.Status.Contains("Pending") || doc.Status == "Submitted" ? "fa-clock-o" : doc.Status.Contains("Review") ? "fa-eye" : "fa-times-circle") me-1"></i>
                                                                        @doc.Status
                                                                    </span>
                                                                </td>
                                                                <td class="border-0">
                                                                    <div class="btn-group btn-group-sm">
                                                                        @if (!string.IsNullOrEmpty(doc.FilePath))
                                                                        {
                                                                            <a href="@doc.FilePath" target="_blank" class="btn btn-outline-primary" title="View Document">
                                                                                <i class="fa fa-eye"></i>
                                                                            </a>
                                                                            <a href="@doc.FilePath" download class="btn btn-outline-secondary" title="Download">
                                                                                <i class="fa fa-download"></i>
                                                                            </a>
                                                                        }
                                                                        else
                                                                        {
                                                                            <button type="button" class="btn btn-outline-primary" disabled title="No file path available">
                                                                                <i class="fa fa-eye"></i>
                                                                            </button>
                                                                            <button type="button" class="btn btn-outline-secondary" disabled title="No file path available">
                                                                                <i class="fa fa-download"></i>
                                                                            </button>
                                                                        }
                                                                        @if (doc.DocumentSource == "Verification" && (doc.Status == "Pending Review" || doc.Status == "Under Review"))
                                                                        {
                                                                            <button type="button" class="btn btn-outline-success" title="Approve">
                                                                                <i class="fa fa-check"></i>
                                                                            </button>
                                                                            <button type="button" class="btn btn-outline-danger" title="Request Revision">
                                                                                <i class="fa fa-times"></i>
                                                                            </button>
                                                                        }
                                                                    </div>
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="text-center py-4 text-muted">
                                                <i class="fa fa-file-o fa-3x mb-2"></i>
                                                <p class="mb-0">No documents submitted yet.</p>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    }
                }
            </div>
        </div>
    </div>
</div>
