@page "/dashboard/institution/profile"
@attribute [Authorize(Roles = "Institution")] 
@layout Layout.InstitutionDashLayout
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> UserManager
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity

<div class="container-fluid p-5 institution-profile-bg">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h2 class="mb-0 profile-title">My Profile</h2>
                <div class="d-flex gap-2">
                    <button class="btn btn-primary profile-btn" @onclick="ToggleEditMode">
                        <i class="fas fa-edit me-2"></i>@(IsEditMode ? "Cancel" : "Edit Profile")
                    </button>
                    @if (IsEditMode)
                    {
                        <button class="btn btn-success profile-btn" @onclick="SaveProfile">
                            <i class="fas fa-save me-2"></i>Save Changes
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Profile Summary (Left Column) -->
        <div class="col-lg-4 mb-4">
            <!-- Profile Card -->
            <div class="card shadow-sm mb-4">
                <div class="card-body text-center">
                    <div class="position-relative d-inline-block mb-3">
                        @if (IsEditMode && !string.IsNullOrWhiteSpace(_previewProfilePicture))
                        {
                            <img src="@_previewProfilePicture" class="profile-image shadow" alt="Profile Preview" width="120" height="120" />
                        }
                        else if (string.IsNullOrWhiteSpace(ProfilePicture) || ProfilePicture == "https://via.placeholder.com/120")
                        {
                            <!-- Blank SVG avatar (same as student profile) -->
                            <svg width="120" height="120" viewBox="0 0 120 120" fill="none" xmlns="http://www.w3.org/2000/svg" class="profile-image">
                                <circle cx="60" cy="60" r="60" fill="#eaf1fb"/>
                                <circle cx="60" cy="54" r="28" fill="#cfd8dc"/>
                                <ellipse cx="60" cy="94" rx="36" ry="18" fill="#cfd8dc"/>
                            </svg>
                        }
                        else
                        {
                            <img src="@ProfilePicture" class="profile-image shadow" alt="Profile Picture" width="120" height="120" />
                        }
                        @if (IsEditMode)
                        {
                            <div class="d-flex flex-row justify-content-center gap-2 mt-2">
                                <label class="btn btn-sm btn-primary rounded-circle profile-img-btn profile-upload-label">
                                    <i class="fas fa-camera profile-upload-icon"></i>
                                    <InputFile OnChange="OnProfileImageChange" accept="image/*" style="display:none;" />
                                </label>
                                <button class="btn btn-sm btn-danger rounded-circle profile-img-btn" type="button" title="Remove Profile Picture" @onclick="RemoveProfileImageAsync">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        }
                    </div>
                    <h4 class="card-title mb-1 profile-name">@FullName</h4>
                    <div class="text-muted mb-2">@Email</div>
                    <div class="d-flex flex-column align-items-center gap-2">
                        <span class="badge profile-badge-status @(Status == "Active" ? "profile-badge-active" : Status == "Pending" ? "profile-badge-pending" : Status == "On Leave" ? "profile-badge-onleave" : Status == "Graduated" ? "profile-badge-graduated" : "")">@Status</span>
                    </div>
                    <div class="text-start mt-3">
                        <div class="mb-2"><span class="profile-label-bold">Role:</span> <span>@Role</span></div>
                        <div class="mb-2"><span class="profile-label-bold">Phone:</span> <span>@Phone</span></div>
                        <div class="mb-2"><span class="profile-label-bold">Location:</span> <span>@Location</span></div>
                        <div class="mb-0"><span class="profile-label-bold">Member since:</span> <span>@CreatedDate.ToString("MMM yyyy")</span></div>
                    </div>
                </div>
            </div>

            <!-- Quick Stats -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-primary text-white">
                    <h6 class="mb-0"><i class="fas fa-chart-bar profile-header-icon me-2"></i>Academic Summary</h6>
                </div>
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col-4">
                            <div class="stat-item">
                                <h4 class="text-primary mb-1">@ScholarshipsReceived</h4>
                                <small class="text-muted">Scholarships</small>
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="stat-item">
                                <h4 class="text-success mb-1">@Applications</h4>
                                <small class="text-muted">Applications</small>
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="stat-item">
                                <h4 class="text-info mb-1">@GPA</h4>
                                <small class="text-muted">GPA</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Verification Status -->
            <div class="card shadow-sm">
                <div class="card-header bg-white d-flex align-items-center">
                    <span class="profile-verification-title">
                        <span class="profile-verification-icon">
                            <i class="fas fa-check-circle"></i>
                        </span>
                        Verification
                    </span>
                </div>
                <div class="card-body">
                    <div class="verification-item d-flex justify-content-between align-items-center mb-2">
                        <span class="profile-label-bold">Email</span>
                        @if (EmailVerified)
                        {
                            <span><i class="fas fa-check-circle profile-icon-verified"></i></span>
                        }
                        else
                        {
                            <span><i class="fas fa-clock profile-icon-pending"></i></span>
                        }
                    </div>
                    <div class="verification-item d-flex justify-content-between align-items-center mb-2">
                        <span class="profile-label-bold">Phone</span>
                        @if (PhoneVerified)
                        {
                            <span><i class="fas fa-check-circle profile-icon-verified"></i></span>
                        }
                        else
                        {
                            <span><i class="fas fa-clock profile-icon-pending"></i></span>
                        }
                    </div>
                    <div class="verification-item d-flex justify-content-between align-items-center mb-2">
                        <span class="profile-label-bold">Institution ID</span>
                        @if (StudentIdVerified)
                        {
                            <span><i class="fas fa-check-circle profile-icon-verified"></i></span>
                        }
                        else
                        {
                            <span><i class="fas fa-clock profile-icon-pending"></i></span>
                        }
                    </div>
                    <div class="verification-item d-flex justify-content-between align-items-center">
                        <span class="profile-label-bold">Accreditation</span>
                        @if (AcademicRecordsVerified)
                        {
                            <span><i class="fas fa-check-circle profile-icon-verified"></i></span>
                        }
                        else
                        {
                            <span><i class="fas fa-clock profile-icon-pending"></i></span>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Profile Details (Right Column) -->
        <div class="col-lg-8">
            <!-- Personal Information -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-white">
                    <h5 class="mb-0"><i class="fas fa-user profile-header-icon me-2"></i>Personal Information</h5>
                </div>
                <div class="card-body">
                    @if (IsEditMode)
                    {
                        <div class="row mb-2">
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">First Name</label>
                                <input class="form-control" @bind="AdminFirstName" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Middle Name</label>
                                <input class="form-control" @bind="AdminMiddleName" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Last Name</label>
                                <input class="form-control" @bind="AdminLastName" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Sex</label>
                                <select class="form-control" @bind="Sex">
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Nationality</label>
                                <input class="form-control" @bind="Nationality" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Birth Date</label>
                                <input type="date" class="form-control" @bind="BirthDate" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Contact Number</label>
                                <input class="form-control" @bind="ContactNumber" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Email</label>
                                <input class="profile-email-readonly" value="@Email" readonly />
                            </div>
                            <div class="col-md-12 mb-3">
                                <label class="profile-label-bold">Address</label>
                                <input class="form-control" @bind="Address" />
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row mb-2">
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">First Name</label>
                                <div>@AdminFirstName</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Middle Name</label>
                                <div>@AdminMiddleName</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Last Name</label>
                                <div>@AdminLastName</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Sex</label>
                                <div>@Sex</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Nationality</label>
                                <div>@Nationality</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Birth Date</label>
                                <div>@BirthDate.ToShortDateString()</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Contact Number</label>
                                <div>@ContactNumber</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="profile-label-bold">Email</label>
                                <div>@Email</div>
                            </div>
                            <div class="col-md-12 mb-3">
                                <label class="profile-label-bold">Address</label>
                                <div>@Address</div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Recent Activity -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-white">
                    <h5 class="mb-0"><i class="fas fa-history profile-header-icon me-2"></i>Recent Activity</h5>
                </div>
                <div class="card-body">
                    <div class="activity-timeline">
                        <div class="activity-item d-flex mb-3">
                            <div class="activity-icon bg-success text-white rounded-circle me-3">
                                <i class="fas fa-graduation-cap"></i>
                            </div>
                            <div class="activity-content">
                                <h6 class="mb-1">Scholarship Application Submitted</h6>
                                <p class="text-muted small mb-0">Applied for "Excellence in Engineering" scholarship - 2 hours ago</p>
                            </div>
                        </div>
                        <div class="activity-item d-flex mb-3">
                            <div class="activity-icon bg-info text-white rounded-circle me-3">
                                <i class="fas fa-user-check"></i>
                            </div>
                            <div class="activity-content">
                                <h6 class="mb-1">Profile Updated</h6>
                                <p class="text-muted small mb-0">Updated academic information and GPA - 1 day ago</p>
                            </div>
                        </div>
                        <div class="activity-item d-flex mb-3">
                            <div class="activity-icon bg-warning text-white rounded-circle me-3">
                                <i class="fas fa-bell"></i>
                            </div>
                            <div class="activity-content">
                                <h6 class="mb-1">New Scholarship Available</h6>
                                <p class="text-muted small mb-0">New scholarship opportunity matched your profile - 3 days ago</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Security Settings -->
            <div class="card shadow-sm">
                <div class="card-header bg-white">
                    <h5 class="mb-0"><i class="fas fa-lock profile-header-icon me-2"></i>Security Settings</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h6 class="mb-1">Two-Factor Authentication</h6>
                                    <p class="text-muted small mb-0">Add extra security to your account</p>
                                </div>
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" @bind="IsTwoFactorEnabled" />
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <h6 class="mb-1">Last Login</h6>
                            <p class="text-muted small mb-0">@LastLogin.ToString("MMM dd, yyyy hh:mm tt")</p>
                        </div>
                        <div class="col-12">
                            <button class="btn btn-outline-primary">
                                <i class="fas fa-key me-2"></i>Change Password
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Styles moved to InstitutionProfile.razor.css -->

@code {
    // Edit mode state
    private bool IsEditMode = false;
    // Removed unused isLoading field
    
    // Institution Profile Info
    private string AdminFirstName = "";
    private string AdminMiddleName = "";
    private string AdminLastName = "";
    private string Sex = "Male";
    private string Nationality = "";
    private DateTime BirthDate = DateTime.Now;
    private string ContactNumber = "";
    private string ContactEmail = "";
    private string Address = "";
    private string FullName = "";
    private string Username = "";
    private string Email = "";
    private string Phone = "";
    private string Location = "";
    private string University = "";
    // private string Bio = "";
    private string Role = "Institution";
    private string Status = "Active";
    private DateTime CreatedDate = DateTime.Now;
    private string ProfilePicture = "https://via.placeholder.com/120";

    private IBrowserFile? UploadedProfileImage;
    private string? _previewProfilePicture;
    private string PreviewProfilePicture => _previewProfilePicture ?? ProfilePicture;

    private async Task OnProfileImageChange(InputFileChangeEventArgs e)
    {
        UploadedProfileImage = e.File;
        if (UploadedProfileImage != null)
        {
            if (UploadedProfileImage.Size > 5 * 1024 * 1024)
            {
                // Optionally show error message (not implemented here)
                _previewProfilePicture = null;
                UploadedProfileImage = null;
                return;
            }
            using var ms = new MemoryStream();
            await UploadedProfileImage.OpenReadStream(5 * 1024 * 1024).CopyToAsync(ms);
            var base64 = Convert.ToBase64String(ms.ToArray());
            var ext = Path.GetExtension(UploadedProfileImage.Name).ToLower();
            var mime = ext == ".png" ? "image/png" : "image/jpeg";
            _previewProfilePicture = $"data:{mime};base64,{base64}";
        }
    }

    private async Task RemoveProfileImageAsync()
    {
        ProfilePicture = "https://via.placeholder.com/120";
        _previewProfilePicture = null;
        UploadedProfileImage = null;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        if (user != null)
        {
            var profile = await InstitutionProfileService.GetProfileByUserIdAsync(user.Id);
            if (profile != null)
            {
                profile.ProfilePicture = ProfilePicture;
                await InstitutionProfileService.SaveProfileAsync(profile);
            }
        }
        StateHasChanged();
    }

    // Verification Status
    private bool EmailVerified = false;
    private bool PhoneVerified = false;
    private bool StudentIdVerified = false;
    private bool AcademicRecordsVerified = false;

    // Security
    private bool IsTwoFactorEnabled = false;
    private DateTime LastLogin = DateTime.Now;

    // Stats
    private int ScholarshipsReceived = 0;
    private int Applications = 0;
    private string GPA = "0.00";

    protected override async Task OnInitializedAsync()
    {
    await LoadUserData();
    StateHasChanged();
    }

    private async Task LoadUserData()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                var user = await UserManager.GetUserAsync(authState.User);
                if (user != null)
                {
                    // Load basic Identity data
                    Email = user.Email ?? "";
                    Username = user.UserName ?? "";
                    FullName = user.UserName ?? "Student User"; // You can expand this to include first/last name
                    
                    // Check email confirmation status
                    EmailVerified = await UserManager.IsEmailConfirmedAsync(user);
                    
                    // Set creation date from user registration
                    CreatedDate = user.LockoutEnd?.DateTime ?? DateTime.Now;
                    
                    // Set last login (you may need to track this separately)
                    LastLogin = DateTime.Now.AddHours(-1); // Placeholder
                    
                    // TODO: Load additional profile data from your custom database tables
                    // Example: Load student-specific data from StudentProfile table
                    await LoadExtendedProfileData(user.Id);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user data: {ex.Message}");
            // Set default values
            FullName = "Student User";
            Email = "student@example.com";
            Username = "student.user";
        }
    }

    [Inject]
    private Services.InstitutionProfileService InstitutionProfileService { get; set; } = default!;

    private async Task LoadExtendedProfileData(string userId)
    {
        try
        {
            var profile = await InstitutionProfileService.GetProfileByUserIdAsync(userId);
            if (profile != null)
            {
                AdminFirstName = profile.AdminFirstName ?? "";
                AdminMiddleName = profile.AdminMiddleName ?? "";
                AdminLastName = profile.AdminLastName ?? "";
                Sex = profile.InstitutionType ?? "";
                Nationality = profile.Accreditation ?? "";
                BirthDate = profile.EstablishedDate ?? DateTime.Now;
                ContactNumber = profile.ContactNumber ?? "";
                ContactEmail = profile.ContactEmail ?? "";
                Address = profile.Address ?? "";
                FullName = profile.AdminFullName;
                ProfilePicture = !string.IsNullOrWhiteSpace(profile.ProfilePicture) ? profile.ProfilePicture : "https://via.placeholder.com/120";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading extended profile data: {ex.Message}");
        }
    }

    // Methods
    private void ToggleEditMode()
    {
        IsEditMode = !IsEditMode;
    }

    private async Task SaveProfile()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);
            if (user != null)
            {
                var profile = await InstitutionProfileService.GetProfileByUserIdAsync(user.Id);
                if (profile == null)
                {
                    profile = new Models.InstitutionProfile {
                        UserId = user.Id,
                        InstitutionName = University,
                        AdminFirstName = AdminFirstName,
                        AdminMiddleName = AdminMiddleName,
                        AdminLastName = AdminLastName,
                        InstitutionType = Sex,
                        Accreditation = Nationality,
                        EstablishedDate = BirthDate,
                        ContactNumber = ContactNumber,
                        ContactEmail = ContactEmail,
                        Address = Address
                    };
                }
                profile.AdminFirstName = AdminFirstName;
                profile.AdminMiddleName = AdminMiddleName;
                profile.AdminLastName = AdminLastName;
                profile.InstitutionType = Sex;
                profile.Accreditation = Nationality;
                profile.EstablishedDate = BirthDate;
                profile.ContactNumber = ContactNumber;
                profile.ContactEmail = ContactEmail;
                profile.Address = Address;
                profile.InstitutionName = University;
                // Save uploaded profile image if present
                if (UploadedProfileImage != null)
                {
                    if (UploadedProfileImage.Size > 5 * 1024 * 1024)
                    {
                        UploadedProfileImage = null;
                        _previewProfilePicture = null;
                    }
                    else
                    {
                        var fileName = $"institution_profile_{Guid.NewGuid()}{Path.GetExtension(UploadedProfileImage.Name)}";
                        var dirPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/images/profiles");
                        if (!Directory.Exists(dirPath))
                        {
                            Directory.CreateDirectory(dirPath);
                        }
                        var savePath = Path.Combine(dirPath, fileName);
                        await using (var stream = File.Create(savePath))
                        {
                            await UploadedProfileImage.OpenReadStream(5 * 1024 * 1024).CopyToAsync(stream);
                        }
                        // Always use web-accessible path
                        var webPath = $"/images/profiles/{fileName}";
                        profile.ProfilePicture = webPath;
                        ProfilePicture = webPath;
                    }
                }
                else if (!string.IsNullOrWhiteSpace(ProfilePicture))
                {
                    // Only use web-accessible path or blank avatar
                    profile.ProfilePicture = ProfilePicture.StartsWith("/images/profiles/") ? ProfilePicture : "https://via.placeholder.com/120";
                }
                await InstitutionProfileService.SaveProfileAsync(profile);
                // Reload profile data to update ProfilePicture and other fields
                await LoadExtendedProfileData(user.Id);
                IsEditMode = false;
                _previewProfilePicture = null;
                UploadedProfileImage = null;
                Console.WriteLine("Institution profile updated successfully!");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving profile: {ex.Message}");
        }
    }
}
