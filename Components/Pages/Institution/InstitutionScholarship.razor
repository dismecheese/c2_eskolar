@page "/dashboard/institution/scholarships/"
@attribute [Authorize(Roles = "Institution")]
@layout Layout.InstitutionDashLayout

@using Microsoft.EntityFrameworkCore
@using c2_eskolar.Data
@using c2_eskolar.Models
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation

<PageTitle>Scholarships</PageTitle>

<div class="container my-5" style="margin-right: 80px;">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="fw-bold mb-0">
                <i class="bi bi-mortarboard-fill text-primary me-2"></i> Scholarships
            </h2>
            <p class="text-muted mb-0">View and manage your posted scholarships below.</p>
        </div>
        <button class="btn btn-lg btn-success shadow-sm px-4 py-2" @onclick="AddScholarship">
            <i class="bi bi-plus-circle me-2"></i> Add Scholarship
        </button>
    </div>

    @if (scholarships is null)
    {
        <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!scholarships.Any())
    {
        <div class="alert alert-info text-center py-4">
            <i class="bi bi-emoji-frown me-2"></i> No scholarships posted yet.
        </div>
    }
    else
    {
        <div class="row g-4">
            @foreach (var scholarship in scholarships)
            {
                <div class="col-md-6 col-lg-4">
                    <div class="card shadow-sm h-100 clickable-card border-0"
                         @onclick="() => ViewScholarship(scholarship.ScholarshipId)"
                         style="cursor: pointer; transition: box-shadow 0.2s;">
                        <div class="card-body d-flex flex-column">
                            <div class="d-flex align-items-center mb-2">
                                <i class="bi bi-award text-warning me-2 fs-4"></i>
                                <h5 class="card-title mb-0">@scholarship.Title</h5>
                            </div>
                            <p class="card-text text-muted mb-2">
                                <span class="badge bg-primary me-1">@(!string.IsNullOrEmpty(scholarship.Institution?.InstitutionName)
                                    ? scholarship.Institution.InstitutionName
                                    : scholarship.Benefactor?.OrganizationName ?? "Unknown Provider")</span>
                            </p>
                            <div class="mb-2">
                                <span class="badge bg-success">@scholarship.CreatedAt.ToString("MMM dd, yyyy")</span>
                                <span class="badge bg-secondary ms-1">@((scholarship.IsInternal ? "Internal" : "External"))</span>
                            </div>
                            <div class="mt-auto d-flex justify-content-between align-items-center">
                                <span class="badge @(scholarship.IsActive ? "bg-success" : "bg-danger")">
                                    @(scholarship.IsActive ? "Active" : "Inactive")
                                </span>
                                <button class="btn btn-sm btn-outline-danger ms-2"
                                        @onclick:stopPropagation="true"
                                        @onclick="async (e) => await DeleteScholarship(scholarship.ScholarshipId)">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<Scholarship>? scholarships;

    protected override async Task OnInitializedAsync()
    {
        scholarships = await DbContext.Scholarships
            .Include(s => s.Institution)
            .Include(s => s.Benefactor)
            .OrderByDescending(s => s.CreatedAt)
            .ToListAsync();
    }

    private void ViewScholarship(int id)
    {
        Navigation.NavigateTo($"/dashboard/institution/scholarships-info/{id}");
    }

    private async Task DeleteScholarship(int id)
    {
        var scholarship = await DbContext.Scholarships.FindAsync(id);
        if (scholarship is not null)
        {
            DbContext.Scholarships.Remove(scholarship);
            await DbContext.SaveChangesAsync();
            scholarships?.RemoveAll(s => s.ScholarshipId == id);
        }
    }

    private void AddScholarship()
    {
        Navigation.NavigateTo("/dashboard/institution/scholarships/post");
    }
}
