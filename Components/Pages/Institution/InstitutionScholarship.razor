@page "/dashboard/institution/scholarships/"
@attribute [Authorize(Roles = "Institution,SuperAdmin")]
@layout Layout.InstitutionDashLayout

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using c2_eskolar.Data
@using c2_eskolar.Models
@using c2_eskolar.Services
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject InstitutionProfileService InstitutionProfileService

<PageTitle>Scholarships</PageTitle>

<div class="container-fluid" style="min-height: 100vh;">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-10">

            <!-- SEARCH BAR + POST BUTTON -->
            <div class="search-header-section d-flex flex-column flex-md-row align-items-md-center mb-4 gap-3 mt-5">
                <div class="flex-grow-1">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Search scholarships..." 
                               @bind="searchTerm" @oninput="OnSearchChanged" />
                        <span class="input-group-text"><i class="bi bi-search"></i></span>
                    </div>
                </div>

                <!-- Post new scholarship -->
                <button class="btn btn-custom-primary d-flex align-items-center gap-2" @onclick="AddScholarship">
                    <i class="bi bi-plus-circle"></i>
                    <span>Post Scholarship</span>
                </button>
            </div>

            <!-- CATEGORY TABS -->
            <div class="modern-tabs d-flex align-items-center mb-4 gap-3">
                <div class="tab-pills">
                    <button class="tab-pill @(selectedTab == 0 ? "active" : "")" @onclick="() => SelectTab(0)">
                        <i class="bi bi-people-fill"></i> <span>My Scholars</span>
                    </button>
                    <button class="tab-pill @(selectedTab == 1 ? "active" : "")" @onclick="() => SelectTab(1)">
                        <i class="bi bi-door-open-fill"></i> <span>Open</span>
                    </button>
                    <button class="tab-pill @(selectedTab == 2 ? "active" : "")" @onclick="() => SelectTab(2)">
                        <i class="bi bi-building"></i> <span>Internal</span>
                    </button>
                    <button class="tab-pill @(selectedTab == 3 ? "active" : "")" @onclick="() => SelectTab(3)">
                        <i class="bi bi-archive-fill"></i> <span>Archived</span>
                    </button>
                    <button class="tab-pill @(selectedTab == 4 ? "active" : "")" @onclick="() => SelectTab(4)">
                        <i class="bi bi-compass-fill"></i> <span>Explore</span>
                    </button>
                </div>
            </div>

            <div class="row">

                @if (scholarships is null)
                {
                    <div class="col-12">
                        <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    var filteredScholarships = GetFilteredScholarships();

                    if (!filteredScholarships.Any())
                    {
                        <div class="col-12">
                            <div class="empty-state text-center py-5">
                                <div class="empty-state-icon mb-3">
                                    <i class="bi bi-inbox fs-1 text-muted"></i>
                                </div>
                                <h5 class="text-muted mb-2">@GetEmptyStateTitle()</h5>
                                <p class="text-muted small">@GetEmptyStateMessage()</p>
                                @if (!string.IsNullOrEmpty(searchTerm))
                                {
                                    <button class="btn btn-sm btn-outline-primary mt-2" @onclick="ClearFilters">
                                        <i class="bi bi-x-circle me-1"></i> Clear Search
                                    </button>
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        @foreach (var scholarship in filteredScholarships)
                        {
                            <div class="col-md-6 col-lg-4">
                                <div class="card shadow-sm h-100 clickable-card border-0"
                                     @onclick="() => ViewScholarship(scholarship.ScholarshipId)"
                                     style="cursor: pointer; background: #fff; border-radius: 1rem; transition: all 0.2s ease;">
                                    <div class="card-body d-flex flex-column">
                                        <div class="d-flex align-items-start mb-3">
                                            <div class="flex-grow-1">
                                                <h5 class="card-title mb-1 fw-bold">@scholarship.Title</h5>
                                                <p class="text-muted small mb-0">
                                                    <i class="bi bi-building me-1"></i>
                                                    @(scholarship.Institution?.InstitutionName ?? scholarship.Benefactor?.OrganizationName ?? "Unknown Provider")
                                                </p>
                                            </div>
                                        </div>

                                        <div class="mb-3">
                                            @if (scholarship.IsInternal)
                                            {
                                                <span class="badge bg-success me-1 mb-1">
                                                    <i class="bi bi-building me-1"></i>Internal
                                                </span>
                                            }
                                            else if (scholarship.BenefactorProfileId != null)
                                            {
                                                <span class="badge bg-info me-1 mb-1">
                                                    <i class="bi bi-handshake me-1"></i>Partnership
                                                </span>
                                            }
                                            <span class="badge bg-light text-dark me-1 mb-1">
                                                <i class="bi bi-calendar me-1"></i>@scholarship.CreatedAt.ToString("MMM dd, yyyy")
                                            </span>
                                        </div>

                                        <div class="mt-auto d-flex gap-2">
                                            <button class="btn btn-sm btn-outline-primary flex-grow-1"
                                                    @onclick:stopPropagation="true"
                                                    @onclick="() => EditScholarship(scholarship.ScholarshipId)"
                                                    title="Edit scholarship">
                                                <i class="bi bi-pencil"></i> Edit
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger"
                                                    @onclick:stopPropagation="true"
                                                    @onclick="async (e) => await DeleteScholarship(scholarship.ScholarshipId)"
                                                    title="Delete scholarship">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                }
            </div>
        </div>
    </div>
</div>

@* Component-scoped CSS will be in InstitutionScholarship.razor.css *@

@code {
    private List<Scholarship>? scholarships;
    private c2_eskolar.Models.InstitutionProfile? institutionProfile;
    private int selectedTab = 0; // 0 = My Scholars, 1 = Open, 2 = Internal, 3 = Archived, 4 = Explore
    private string searchTerm = "";
    
    // Tab counters
    private int myScholarsCount = 0;
    private int openCount = 0;
    private int internalCount = 0;
    private int archivedCount = 0;
    private int exploreCount = 0;

    protected override async Task OnInitializedAsync()
    {
        // Get current user's institution profile
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user?.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (!string.IsNullOrEmpty(userId))
        {
            institutionProfile = await InstitutionProfileService.GetProfileByUserIdAsync(userId);
        }

        // Load scholarships owned by this institution (internal) and partnership scholarships (external with this institution as partner)
        if (institutionProfile != null)
        {
            // Use a new DbContext instance from the factory for this operation to avoid concurrent usage
            await using var context = await DbContextFactory.CreateDbContextAsync();
            scholarships = await context.Scholarships
                .Include(s => s.Institution)
                .Include(s => s.Benefactor)
                .Where(s => s.InstitutionProfileId == institutionProfile.InstitutionProfileId) // Both internal and partnership scholarships
                .OrderByDescending(s => s.CreatedAt)
                .ToListAsync();

            UpdateTabCounts();
        }
        else
        {
            scholarships = new List<Scholarship>(); // Empty list if no profile found
        }
    }

    private void UpdateTabCounts()
    {
        if (scholarships == null) return;
        
        var now = DateTime.Now;
        
        // TODO: Implement actual logic for "My Scholars" (scholarships with awarded students)
        myScholarsCount = 0; // Placeholder - needs implementation
        
        openCount = scholarships.Count(s => s.IsActive && !s.IsInternal && s.ApplicationDeadline >= now);
        internalCount = scholarships.Count(s => s.IsActive && s.IsInternal && s.ApplicationDeadline >= now);
        archivedCount = scholarships.Count(s => !s.IsActive || s.ApplicationDeadline < now);
        
        // TODO: Load scraped scholarships for Explore tab
        exploreCount = 0; // Placeholder - needs implementation
    }

    private List<Scholarship> GetFilteredScholarships()
    {
        if (scholarships == null) return new List<Scholarship>();
        
        var filtered = scholarships.AsEnumerable();
        var now = DateTime.Now;
        
        // Filter by tab
        filtered = selectedTab switch
        {
            0 => filtered.Where(s => false), // My Scholars - TODO: implement logic for scholarships with awarded students
            1 => filtered.Where(s => s.IsActive && !s.IsInternal && s.ApplicationDeadline >= now), // Open - partnership/external scholarships with future deadline
            2 => filtered.Where(s => s.IsActive && s.IsInternal && s.ApplicationDeadline >= now), // Internal - active internal scholarships
            3 => filtered.Where(s => !s.IsActive || s.ApplicationDeadline < now), // Archived - inactive OR deadline passed
            4 => filtered.Where(s => false), // Explore - TODO: implement scraped scholarships
            _ => filtered
        };
        
        // Filter by search term
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(s => 
                s.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (s.Institution?.InstitutionName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (s.Benefactor?.OrganizationName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
            );
        }
        
        return filtered.ToList();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        StateHasChanged();
    }

    private void ClearFilters()
    {
        searchTerm = "";
        StateHasChanged();
    }

    private string GetEmptyStateTitle()
    {
        return selectedTab switch
        {
            0 => "No Scholars Yet",
            1 => "No Open Scholarships",
            2 => "No Internal Scholarships",
            3 => "No Archived Scholarships",
            4 => "No Scholarships to Explore",
            _ => "No Scholarships Found"
        };
    }

    private string GetEmptyStateMessage()
    {
        if (!string.IsNullOrEmpty(searchTerm))
        {
            return "Try adjusting your search terms or filters.";
        }
        
        return selectedTab switch
        {
            0 => "Scholarships with awarded scholars will appear here.",
            1 => "Partnership scholarships from benefactors will appear here.",
            2 => "Create an internal scholarship to start accepting applications from your students.",
            3 => "Closed or completed scholarships will appear here.",
            4 => "Discover scholarships from around the web. Coming soon!",
            _ => "No scholarships available at this time."
        };
    }

    private void SelectTab(int tab)
    {
        selectedTab = tab;
        StateHasChanged();
    }

    private void ViewScholarship(int id)
    {
        Navigation.NavigateTo($"/dashboard/institution/scholarships-info/{id}");
    }

    private async Task DeleteScholarship(int id)
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        var scholarship = await context.Scholarships.FindAsync(id);
        if (scholarship is not null && 
            institutionProfile is not null && 
            scholarship.InstitutionProfileId == institutionProfile.InstitutionProfileId)
        {
            context.Scholarships.Remove(scholarship);
            await context.SaveChangesAsync();
            scholarships?.RemoveAll(s => s.ScholarshipId == id);
            UpdateTabCounts();
            StateHasChanged();
        }
    }

    private void EditScholarship(int id)
    {
        Navigation.NavigateTo($"/dashboard/institution/scholarships/edit/{id}");
    }

    private void AddScholarship()
    {
        Navigation.NavigateTo("/dashboard/institution/scholarships/post");
    }
}
