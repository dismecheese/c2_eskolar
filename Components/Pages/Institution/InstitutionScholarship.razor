@page "/dashboard/institution/scholarships/"
@attribute [Authorize(Roles = "Institution")]
@layout Layout.InstitutionDashLayout

@using Microsoft.EntityFrameworkCore
@using c2_eskolar.Data
@using c2_eskolar.Models
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation

<PageTitle>Scholarships</PageTitle>

<div class="container my-5" style="margin-right: 80px;">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold mb-0">Scholarships</h2>
        <button class="btn btn-primary" @onclick="AddScholarship">âž• Add Scholarship</button>
    </div>

    @if (scholarships is null)
    {
        <div class="text-center">Loading...</div>
    }
    else if (!scholarships.Any())
    {
        <div class="alert alert-light text-center">
            No scholarships posted yet.
        </div>
    }
    else
    {
        <div class="row g-4">
            @foreach (var scholarship in scholarships)
            {
                <div class="col-md-6 col-lg-4">
                    <div class="card shadow-sm h-100 clickable-card"
                         @onclick="() => ViewScholarship(scholarship.ScholarshipId)"
                         style="cursor: pointer;">
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@scholarship.Title</h5>
                            <p class="card-text text-muted mb-4">
                                @(!string.IsNullOrEmpty(scholarship.Institution?.InstitutionName)
                                    ? scholarship.Institution.InstitutionName
                                    : scholarship.Benefactor?.OrganizationName ?? "Unknown Provider")
                            </p>

                            <div class="mt-auto d-flex justify-content-end">
                                <button class="btn btn-sm btn-outline-danger"
                                        @onclick:stopPropagation="true"
                                        @onclick="() => DeleteScholarship(scholarship.ScholarshipId)">
                                    ðŸ—‘ Delete
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<Scholarship>? scholarships;

    protected override async Task OnInitializedAsync()
    {
        scholarships = await DbContext.Scholarships
            .Include(s => s.Institution)
            .Include(s => s.Benefactor)
            .OrderByDescending(s => s.CreatedAt)
            .ToListAsync();
    }

    private void ViewScholarship(int id)
    {
        Navigation.NavigateTo($"/dashboard/institution/scholarships-info/{id}");
    }

    private async Task DeleteScholarship(int id)
    {
        var scholarship = await DbContext.Scholarships.FindAsync(id);
        if (scholarship is not null)
        {
            DbContext.Scholarships.Remove(scholarship);
            await DbContext.SaveChangesAsync();
            scholarships?.RemoveAll(s => s.ScholarshipId == id);
        }
    }

    private void AddScholarship()
    {
        Navigation.NavigateTo("/dashboard/institution/scholarships/post");
    }
}
