@page "/dashboard/institution/scholarships/"
@attribute [Authorize(Roles = "Institution,SuperAdmin")]
@layout Layout.InstitutionDashLayout

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using c2_eskolar.Data
@using c2_eskolar.Models
@using c2_eskolar.Services
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject InstitutionProfileService InstitutionProfileService

<PageTitle>Scholarships</PageTitle>

<style>
    /* === UNIFIED DASHBOARD THEME === */
    :root {
        --primary: #2563eb;
        --primary-dark: #1e40af;
        --bg-light: #f1f5f9;
        --text-muted: #475569;
        --shadow: 0 4px 14px rgba(0, 0, 0, 0.08);
    }

    .page-bg {
        background: var(--bg-light);
        min-height: 100vh;
        padding: 2.5rem 0;
    }

    .content-box {
        background: #fff;
        border-radius: 1.25rem;
        box-shadow: var(--shadow);
        padding: 2.5rem;
        transition: transform 0.25s ease;
    }

    .content-box:hover {
        transform: translateY(-2px);
    }

    .header-title {
        font-weight: 700;
        color: var(--primary-dark);
    }

    .btn-main {
        background: linear-gradient(90deg, var(--primary), var(--primary-dark));
        color: #fff;
        border: none;
        border-radius: 50px;
        padding: 0.75rem 1.5rem;
        transition: all 0.25s ease;
        font-weight: 600;
    }

    .btn-main:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 14px rgba(37, 99, 235, 0.3);
    }

    .status-card {
        background: #eef2ff;
        border-radius: 1rem;
        padding: 1.5rem;
        border: none;
        color: #1e3a8a;
        box-shadow: var(--shadow);
    }

    .nav-tabs {
        border: none;
    }

    .nav-tabs .nav-link {
        border: none;
        background: transparent;
        color: var(--text-muted);
        font-weight: 600;
        position: relative;
        transition: all 0.2s ease;
    }

    .nav-tabs .nav-link.active {
        color: var(--primary);
    }

    .nav-tabs .nav-link.active::after {
        content: "";
        position: absolute;
        bottom: -4px;
        left: 0;
        width: 100%;
        height: 3px;
        background: var(--primary);
        border-radius: 10px;
    }

    .scholarship-card {
        border-radius: 1rem;
        border: none;
        background: #fff;
        box-shadow: var(--shadow);
        transition: all 0.3s ease;
        cursor: pointer;


    .scholarship-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 6px 16px rgba(37, 99, 235, 0.15);
    }

    .empty-state {
        text-align: center;
        padding: 3rem;
        background: #f8fafc;
        border: 2px dashed #cbd5e1;
        border-radius: 1rem;
        color: #475569;
    }

    .empty-state i {
        font-size: 2.5rem;
        color: var(--primary);
        margin-bottom: 1rem;
    }

    .badge-outline {
        border: 1px solid var(--primary);
        color: var(--primary);
        background: transparent;
    }

    .scholarship-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 6px 16px rgba(37, 99, 235, 0.15);
    }

    .empty-state {
        text-align: center;
        padding: 3rem;
        background: #f8fafc;
        border: 2px dashed #cbd5e1;
        border-radius: 1rem;
        color: #475569;
    }

    .empty-state i {
        font-size: 2.5rem;
        color: var(--primary);
        margin-bottom: 1rem;
    }

    .badge-outline {
        border: 1px solid var(--primary);
        color: var(--primary);
        background: transparent;
    }
</style>

<div class="page-bg">
    <div class="container">
        <div class="content-box animate__animated animate__fadeIn">
            <!-- Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h2 class="header-title mb-1">
                        <i class="bi bi-mortarboard-fill text-primary me-2"></i> My Scholarships
                    </h2>
                    <p class="text-muted mb-0">Manage your institution’s internal and partnership scholarships.</p>
                </div>
                <button class="btn btn-main" @onclick="AddScholarship">
                    <i class="bi bi-plus-circle me-2"></i> Add Scholarship
                </button>
            </div>

            <!-- Partnership Status -->
            @if (institutionProfile != null)
            {
                <div class="status-card mb-4 animate__animated animate__fadeInUp">
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <strong>Partnership Status:</strong>
                            <span class="fw-bold ms-1">
                                @(institutionProfile.IsVerified ? "Eligible for partnerships" : "Pending verification")
                            </span>

                            <div class="mt-2 small">
                                @if (institutionProfile.IsVerified)
                                {
                                    <ul class="mb-0 ps-3">
                                        <li>Benefactors can partner with your institution.</li>
                                        <li>You can post both internal and joint scholarships.</li>
                                    </ul>
                                    <div class="mt-2">
                                        <span class="badge bg-primary me-1">@internalCount Internal</span>
                                        <span class="badge bg-info text-dark">@partnershipCount Partnership</span>
                                    </div>
                                }
                                else
                                {
                                    <ul class="mb-0 ps-3 text-muted">
                                        <li>Contact an admin to complete verification.</li>
                                        <li>Internal scholarships are still available to manage.</li>
                                    </ul>
                                }
                            </div>
                        </div>
                        <div>
                            <span class="badge @(institutionProfile.IsVerified ? "bg-success" : "bg-warning text-dark")">
                                @(institutionProfile.IsVerified ? "Verified" : "Unverified")
                            </span>
                        </div>
                    </div>
                </div>
            }

            <!-- Tabs -->
            <ul class="nav nav-tabs mb-4">
                <li class="nav-item">
                    <button class="nav-link @(selectedTab == 0 ? "active" : "")" @onclick="() => SelectTab(0)">
                        Institutional
                    </button>
                </li>
                <li class="nav-item">
                    <button class="nav-link @(selectedTab == 1 ? "active" : "")" @onclick="() => SelectTab(1)">
                        Partnership
                    </button>
                </li>
            </ul>

            <!-- Scholarships -->
            @if (scholarships is null)
            {
                <div class="d-flex justify-content-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else
            {
                var filteredScholarships = selectedTab == 0
                    ? scholarships.Where(s => s.IsInternal).ToList()
                    : scholarships.Where(s => !s.IsInternal).ToList();
                if (!filteredScholarships.Any())
                {
                    <div class="empty-state animate__animated animate__fadeInUp">
                        <i class="bi bi-folder2-open"></i>
                        <h5 class="fw-semibold mb-2">No Scholarships Yet</h5>
                        <p class="small mb-0">
                            @(selectedTab == 0
                                ? "Create internal scholarships for your institution’s students."
                                : "Partnership scholarships will appear here once active.")
                        </p>
                    </div>
                }
                else
                {
                    <div class="row g-4">
                        @foreach (var scholarship in filteredScholarships)
                        {
                            <div class="col-md-6 col-lg-4">
                                <div class="scholarship-card card h-100 animate__animated animate__fadeInUp"
                                     @onclick="() => ViewScholarship(scholarship.ScholarshipId)">
                                    <div class="card-body d-flex flex-column">
                                        <div class="d-flex align-items-center mb-2">
                                            <i class="bi bi-award text-primary fs-4 me-2"></i>
                                            <h5 class="text-primary fw-semibold mb-0">@scholarship.Title</h5>
                                        </div>

                                        <p class="mb-2">
                                            <span class="badge bg-primary">
                                                @(!string.IsNullOrEmpty(scholarship.Institution?.InstitutionName)
                                                    ? scholarship.Institution.InstitutionName
                                                    : scholarship.Benefactor?.OrganizationName ?? "Unknown Provider")
                                            </span>
                                        </p>

                                        <div class="mb-3">
                                            <span class="badge bg-info text-dark">@scholarship.CreatedAt.ToString("MMM dd, yyyy")</span>
                                            @if (scholarship.IsInternal)
                                            {
                                                <span class="badge bg-primary ms-1">Internal</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-info text-dark ms-1">Partnership</span>
                                            }
                                        </div>

                                        <div class="mt-auto d-flex justify-content-between align-items-center">
                                            <span class="badge @(scholarship.IsActive ? "bg-success" : "bg-secondary")">
                                                @(scholarship.IsActive ? "Active" : "Inactive")
                                            </span>
                                            <div class="d-flex gap-2">
                                                <button class="btn btn-sm btn-outline-primary"
                                                        @onclick:stopPropagation="true"
                                                        @onclick="() => EditScholarship(scholarship.ScholarshipId)">
                                                    <i class="bi bi-pencil"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger"
                                                        @onclick:stopPropagation="true"
                                                        @onclick="async (e) => await DeleteScholarship(scholarship.ScholarshipId)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private List<Scholarship>? scholarships;
    private c2_eskolar.Models.InstitutionProfile? institutionProfile;
    private int partnershipCount = 0;
    private int internalCount = 0;
    private int selectedTab = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (!string.IsNullOrEmpty(userId))
            institutionProfile = await InstitutionProfileService.GetProfileByUserIdAsync(userId);

        if (institutionProfile != null)
        {
            scholarships = await DbContext.Scholarships
                .Include(s => s.Institution)
                .Include(s => s.Benefactor)
                .Where(s => s.InstitutionProfileId == institutionProfile.InstitutionProfileId)
                .OrderByDescending(s => s.CreatedAt)
                .ToListAsync();

            partnershipCount = scholarships.Count(s => !s.IsInternal);
            internalCount = scholarships.Count(s => s.IsInternal);
        }
        else
        {
            scholarships = new();
        }
    }

    private void SelectTab(int tab) => selectedTab = tab;
    private void ViewScholarship(int id) => Navigation.NavigateTo($"/dashboard/institution/scholarships-info/{id}");
    private void EditScholarship(int id) => Navigation.NavigateTo($"/dashboard/institution/scholarships/edit/{id}");
    private void AddScholarship() => Navigation.NavigateTo("/dashboard/institution/scholarships/post");

    private async Task DeleteScholarship(int id)
    {
        var scholarship = await DbContext.Scholarships.FindAsync(id);
        if (scholarship != null && institutionProfile != null &&
            scholarship.InstitutionProfileId == institutionProfile.InstitutionProfileId)
        {
            DbContext.Scholarships.Remove(scholarship);
            await DbContext.SaveChangesAsync();
            scholarships?.RemoveAll(s => s.ScholarshipId == id);
        }
    }
}
