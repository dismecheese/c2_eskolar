@page "/dashboard/institution/scholarships/post"
@attribute [Authorize(Roles = "Institution,SuperAdmin")]
@layout Layout.InstitutionDashLayout

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using c2_eskolar.Data
@using c2_eskolar.Models
@using c2_eskolar.Services
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject BlobStorageService BlobStorageService

<PageTitle>Post Scholarship</PageTitle>

<div class="container my-5" style="max-width: 900px;">
    
    <h2 class="fw-bold mb-4 text-center" style="font-size:2.2rem;">Post a New Scholarship</h2>

    <!-- Progress Stepper -->
    <div class="stepper-wrapper mb-5">
        @for (int i = 0; i < steps.Length; i++)
        {
            var index = i;
            <div class="stepper-item @(currentStep == index ? "active" : "") @(currentStep > index ? "completed" : "")">
                <div class="step-counter">
                    @if (currentStep > index)
                    {
                        <span>✓</span>
                    }
                    else
                    {
                        <span>@(index + 1)</span>
                    }
                </div>
                <div class="step-name">@steps[index]</div>
            </div>
        }
    </div>

    @if (isSubmitted)
    {
        <div class="alert alert-success mb-4" role="alert" aria-live="polite">
            Scholarship posted successfully! Redirecting...
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mb-4" role="alert" aria-live="assertive" style="font-family: 'Segoe UI', Arial, sans-serif; font-size: 1.15rem; font-weight: 500; color: #842029; background: #f8d7da; border: 1px solid #f5c2c7; border-radius: 10px; padding: 1rem 1.5rem; display: flex; align-items: center;">
            <span class="visually-hidden">Error:</span>
            <span style="font-weight: 600; margin-right: 0.5rem;">Error:</span>
            <span>@errorMessage</span>
        </div>
    }

    <EditForm Model="@scholarship" OnValidSubmit="HandleSubmit" OnInvalidSubmit="HandleInvalidSubmit">
        <DataAnnotationsValidator />

        <!-- Step Content -->
        <div class="form-card step-content">
            @if (currentStep == 0)
            {
                <!-- Step 0: Visibility & Type -->
                <h4 class="mb-4">🎯 Scholarship Type & Visibility</h4>
                <p class="text-muted mb-4">Choose whether this is an internal scholarship for your students or an open scholarship</p>

                <!-- Visibility Options -->
                <div class="mb-4">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <div class="visibility-option @(visibilityType == "internal" ? "selected" : "")" @onclick='@(() => visibilityType = "internal")'>
                                <div class="d-flex align-items-start">
                                    <input type="radio" name="visibility" value="internal" checked="@(visibilityType == "internal")" @onchange='@(() => visibilityType = "internal")' />
                                    <div class="flex-grow-1">
                                        <h5 class="mb-2">Internal Scholarship</h5>
                                        <p class="text-muted mb-0">Only students enrolled at your institution can see and apply. Best for institution-specific programs and grants.</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="visibility-option @(visibilityType == "open" ? "selected" : "")" @onclick='@(() => visibilityType = "open")'>
                                <div class="d-flex align-items-start">
                                    <input type="radio" name="visibility" value="open" checked="@(visibilityType == "open")" @onchange='@(() => visibilityType = "open")' />
                                    <div class="flex-grow-1">
                                        <h5 class="mb-2">Open Scholarship</h5>
                                        <p class="text-muted mb-0">Visible to students from any institution. Perfect for external scholarships and broad opportunities.</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else if (currentStep == 1)
            {
                <!-- Step 1: Icon & Basic Info -->
                <h4 class="mb-4">�� Basic Information</h4>
                
                <!-- Icon Upload -->
                <div class="mb-4">
                    <label for="iconUpload" class="form-label fw-semibold">Scholarship Icon (Optional)</label>
                    <p class="text-muted small mb-2">Upload a logo or icon to represent this scholarship (PNG, JPG, or SVG, max 5MB)</p>
                    
                    <div class="d-flex align-items-center gap-3">
                        @if (!string.IsNullOrEmpty(iconPreviewUrl))
                        {
                            <div style="width: 80px; height: 80px; border-radius: 12px; overflow: hidden; border: 2px solid #e2e8f0;">
                                <img src="@iconPreviewUrl" alt="Icon Preview" style="width: 100%; height: 100%; object-fit: cover;" />
                            </div>
                        }
                        
                        <div class="flex-grow-1">
                            <InputFile OnChange="HandleIconUpload" accept="image/*" class="form-control" id="iconUpload" disabled="@isUploadingIcon" />
                            @if (isUploadingIcon)
                            {
                                <div class="spinner-border spinner-border-sm mt-2" role="status">
                                    <span class="visually-hidden">Uploading...</span>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Basic Info Fields -->
                <div class="mb-3">
                    <label for="title" class="form-label fw-semibold">Title <span class="text-danger">*</span></label>
                    <InputText id="title" class="form-control" @bind-Value="scholarship.Title" placeholder="e.g. Academic Excellence Scholarship 2025" />
                    <ValidationMessage For="@(() => scholarship.Title)" class="text-danger small" />
                </div>

                <div class="mb-3">
                    <label for="benefits" class="form-label fw-semibold">Benefits <span class="text-danger">*</span></label>
                    <InputText id="benefits" class="form-control" @bind-Value="scholarship.Benefits" placeholder="e.g. Full tuition coverage, monthly stipend" />
                    <ValidationMessage For="@(() => scholarship.Benefits)" class="text-danger small" />
                </div>

                <div class="row g-3 mb-3">
                    <div class="col-md-6">
                        <label for="deadline" class="form-label fw-semibold">Application Deadline <span class="text-danger">*</span></label>
                        <InputDate id="deadline" class="form-control" @bind-Value="scholarship.ApplicationDeadline" />
                        <ValidationMessage For="@(() => scholarship.ApplicationDeadline)" class="text-danger small" />
                    </div>
                    <div class="col-md-6">
                        <label for="slots" class="form-label fw-semibold">Slots Available</label>
                        <InputNumber id="slots" class="form-control" @bind-Value="scholarship.SlotsAvailable" placeholder="e.g. 10" />
                        <ValidationMessage For="@(() => scholarship.SlotsAvailable)" class="text-danger small" />
                    </div>
                </div>

                <div class="mb-3">
                    <label for="description" class="form-label fw-semibold">Description</label>
                    <InputTextArea id="description" class="form-control" rows="4" @bind-Value="scholarship.Description" placeholder="Describe the scholarship, its purpose, and key details..." />
                    <ValidationMessage For="@(() => scholarship.Description)" class="text-danger small" />
                </div>
            }
            else if (currentStep == 2)
            {
                <!-- Step 2: Eligibility & Requirements -->
                <h4 class="mb-4">✅ Eligibility & Requirements</h4>
                
                <div class="mb-3">
                    <label for="eligibility" class="form-label fw-semibold">Eligibility Criteria</label>
                    <InputTextArea id="eligibility" class="form-control" rows="3" @bind-Value="scholarship.Eligibility" placeholder="e.g. Must be a Filipino citizen, enrolled full-time..." />
                    <ValidationMessage For="@(() => scholarship.Eligibility)" class="text-danger small" />
                </div>

                <div class="mb-3">
                    <label for="requirements" class="form-label fw-semibold">Requirements</label>
                    <InputTextArea id="requirements" class="form-control" rows="3" @bind-Value="scholarship.Requirements" placeholder="e.g. Transcript of records, recommendation letter..." />
                    <ValidationMessage For="@(() => scholarship.Requirements)" class="text-danger small" />
                </div>

                <div class="row g-3 mb-3">
                    <div class="col-md-6">
                        <label for="gpa" class="form-label fw-semibold">Minimum GPA</label>
                        <InputNumber id="gpa" class="form-control" @bind-Value="scholarship.MinimumGPA" step="0.01" placeholder="e.g. 3.00" />
                        <ValidationMessage For="@(() => scholarship.MinimumGPA)" class="text-danger small" />
                    </div>
                    <div class="col-md-6">
                        <label for="yearLevel" class="form-label fw-semibold">Required Year Level</label>
                        <InputNumber id="yearLevel" class="form-control" @bind-Value="scholarship.RequiredYearLevel" placeholder="e.g. 2 (for 2nd year)" />
                        <ValidationMessage For="@(() => scholarship.RequiredYearLevel)" class="text-danger small" />
                    </div>
                </div>

                <div class="mb-3">
                    <label for="course" class="form-label fw-semibold">Required Course</label>
                    <InputText id="course" class="form-control" @bind-Value="scholarship.RequiredCourse" placeholder="e.g. BS Computer Science" />
                    <ValidationMessage For="@(() => scholarship.RequiredCourse)" class="text-danger small" />
                </div>

                <div class="mb-3">
                    <label for="university" class="form-label fw-semibold">Required University</label>
                    <InputText id="university" class="form-control" @bind-Value="scholarship.RequiredUniversity" placeholder="e.g. University of the Philippines" />
                    <ValidationMessage For="@(() => scholarship.RequiredUniversity)" class="text-danger small" />
                </div>

                <div class="mb-3">
                    <label for="externalUrl" class="form-label fw-semibold">External Application URL (Optional)</label>
                    <InputText id="externalUrl" class="form-control" @bind-Value="scholarship.ExternalApplicationUrl" placeholder="https://example.com/apply" />
                    <ValidationMessage For="@(() => scholarship.ExternalApplicationUrl)" class="text-danger small" />
                </div>
            }
            else if (currentStep == 3)
            {
                <!-- Step 3: Review -->
                <h4 class="mb-4">📝 Review Your Scholarship</h4>
                <p class="text-muted mb-4">Please review all information before submitting</p>

                <div class="review-section">
                    <h6>Scholarship Type</h6>
                    <div class="review-item">
                        <span class="review-label">Type:</span>
                        <span class="review-value">@(visibilityType == "internal" ? "Internal Scholarship" : "Open Scholarship")</span>
                    </div>
                </div>

                <div class="review-section">
                    <h6>Basic Information <a href="#" @onclick="() => GoToStep(1)" @onclick:preventDefault class="edit-link">Edit</a></h6>
                    <div class="review-item">
                        <span class="review-label">Title:</span>
                        <span class="review-value">@scholarship.Title</span>
                    </div>
                    <div class="review-item">
                        <span class="review-label">Benefits:</span>
                        <span class="review-value">@scholarship.Benefits</span>
                    </div>
                    <div class="review-item">
                        <span class="review-label">Deadline:</span>
                        <span class="review-value">@scholarship.ApplicationDeadline.ToString("MMMM dd, yyyy")</span>
                    </div>
                    @if (scholarship.SlotsAvailable.HasValue)
                    {
                        <div class="review-item">
                            <span class="review-label">Slots:</span>
                            <span class="review-value">@scholarship.SlotsAvailable</span>
                        </div>
                    }
                </div>

                <div class="review-section">
                    <h6>Eligibility & Requirements <a href="#" @onclick="() => GoToStep(2)" @onclick:preventDefault class="edit-link">Edit</a></h6>
                    @if (!string.IsNullOrEmpty(scholarship.Eligibility))
                    {
                        <div class="review-item">
                            <span class="review-label">Eligibility:</span>
                            <span class="review-value">@scholarship.Eligibility</span>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(scholarship.Requirements))
                    {
                        <div class="review-item">
                            <span class="review-label">Requirements:</span>
                            <span class="review-value">@scholarship.Requirements</span>
                        </div>
                    }
                    @if (scholarship.MinimumGPA.HasValue)
                    {
                        <div class="review-item">
                            <span class="review-label">Minimum GPA:</span>
                            <span class="review-value">@scholarship.MinimumGPA</span>
                        </div>
                    }
                </div>
            }
        </div>

        <!-- Navigation Buttons -->
        <div class="navigation-buttons">
            @if (currentStep > 0)
            {
                <button type="button" class="btn btn-outline-secondary btn-lg" @onclick="PreviousStep" disabled="@isSubmitted">
                    <span>← Previous</span>
                </button>
            }
            else
            {
                <div></div>
            }

            @if (currentStep < steps.Length - 1)
            {
                <button type="button" class="btn btn-primary btn-lg" @onclick="NextStep" disabled="@isSubmitted">
                    <span>Next →</span>
                </button>
            }
            else
            {
                <button type="submit" class="btn btn-success btn-lg px-5" disabled="@isSubmitted">
                    @if (isSubmitted)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Posting...</span>
                    }
                    else
                    {
                        <span>Post Scholarship</span>
                    }
                </button>
            }
        </div>
    </EditForm>
</div>

@code {
    private Scholarship scholarship = new()
    {
        Title = "",
        Benefits = "",
        ApplicationDeadline = DateTime.Today.AddMonths(1),
        IsActive = true,
        IsInternal = true // Default to internal for institutions
    };
    private bool isSubmitted = false;
    private string? errorMessage;

    // Icon upload variables
    private IBrowserFile? uploadedIconFile;
    private string? iconPreviewUrl;
    private bool isUploadingIcon = false;

    // Stepper variables
    private int currentStep = 0;
    private readonly string[] steps = new[]
    {
        "Type",
        "Basic Information",
        "Eligibility & Requirements",
        "Review"
    };
    
    // Visibility/Type variables
    private string visibilityType = "internal"; // "internal" or "open"

    // Navigation methods
    private void NextStep()
    {
        // Clear error message when moving to next step
        errorMessage = null;
        
        if (currentStep < steps.Length - 1)
        {
            currentStep++;
        }
    }

    private void PreviousStep()
    {
        if (currentStep > 0)
        {
            currentStep--;
        }
    }

    private void GoToStep(int step)
    {
        if (step >= 0 && step < steps.Length)
        {
            currentStep = step;
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            // Clear any previous error messages
            errorMessage = null;
            Console.WriteLine("🚀 HandleSubmit called - starting scholarship submission process");
            Console.WriteLine($"🔍 Form data - Title: '{scholarship.Title}', Benefits: '{scholarship.Benefits}', Deadline: {scholarship.ApplicationDeadline}");
            
            // ✅ Get the user's ID from Claims (NameIdentifier)
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userId = user?.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (string.IsNullOrEmpty(userId))
            {
                errorMessage = "Unable to identify logged-in user.";
                return;
            }

            using var context = await DbContextFactory.CreateDbContextAsync();
            
            // ✅ Look up the InstitutionProfile of the current user
            var institution = await context.InstitutionProfiles
                .FirstOrDefaultAsync(p => p.UserId == userId);

            if (institution is null)
            {
                errorMessage = "No institution profile found for this user.";
                return;
            }

            // ✅ Handle icon upload - Upload to Azure Blob Storage
            if (uploadedIconFile != null)
            {
                try
                {
                    Console.WriteLine($"Uploading scholarship icon: {uploadedIconFile.Name}, Size: {uploadedIconFile.Size} bytes");
                    
                    var fileExt = Path.GetExtension(uploadedIconFile.Name);
                    var fileName = $"scholarship_icon_{Guid.NewGuid()}{fileExt}";
                    
                    using var fileStream = uploadedIconFile.OpenReadStream(5 * 1024 * 1024); // 5MB max
                    
                    // Upload to Azure Blob Storage using the photos container
                    var blobUrl = await BlobStorageService.UploadPhotoAsync(fileStream, fileName, uploadedIconFile.ContentType);
                    
                    // Store the blob URL in the scholarship (we'll convert to SAS when displaying)
                    scholarship.IconUrl = blobUrl;
                    
                    Console.WriteLine($"Successfully uploaded scholarship icon to blob storage: {blobUrl}");
                }
                catch (Exception uploadEx)
                {
                    Console.WriteLine($"Error uploading scholarship icon to blob storage: {uploadEx.Message}");
                    errorMessage = $"Failed to upload scholarship icon: {uploadEx.Message}";
                    return;
                }
            }

            // ✅ Assign foreign keys and timestamps
            scholarship.InstitutionProfileId = institution.InstitutionProfileId;
            scholarship.BenefactorProfileId = null; // Institutions don't post on behalf of benefactors
            scholarship.CreatedAt = DateTime.Now;
            
            // ✅ Set IsInternal based on visibility type
            scholarship.IsInternal = (visibilityType == "internal");
            
            // ✅ Save visibility type
            scholarship.VisibilityType = visibilityType;

            // ✅ Save to database
            context.Scholarships.Add(scholarship);
            await context.SaveChangesAsync();

            isSubmitted = true;

            await Task.Delay(1500);
            Navigation.NavigateTo("/dashboard/institution/scholarships");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error posting scholarship: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            errorMessage = $"An error occurred while posting the scholarship: {ex.Message}";
            isSubmitted = false; // Reset submission state on error
        }
    }

    private async Task HandleIconUpload(InputFileChangeEventArgs e)
    {
        try
        {
            isUploadingIcon = true;
            errorMessage = null; // Clear any previous errors
            
            uploadedIconFile = e.File;
            
            if (uploadedIconFile == null)
            {
                iconPreviewUrl = null;
                return;
            }

            // Validate file size (5MB max)
            if (uploadedIconFile.Size > 5 * 1024 * 1024)
            {
                errorMessage = "Icon file size must be less than 5MB.";
                uploadedIconFile = null;
                iconPreviewUrl = null;
                return;
            }

            // Validate file type
            if (!uploadedIconFile.ContentType.StartsWith("image/"))
            {
                errorMessage = "Please select a valid image file (PNG, JPG, or SVG).";
                uploadedIconFile = null;
                iconPreviewUrl = null;
                return;
            }

            // Create preview for image types
            using var stream = uploadedIconFile.OpenReadStream(5 * 1024 * 1024); // 5MB max
            var buffer = new byte[uploadedIconFile.Size];
            await stream.ReadAsync(buffer, 0, (int)uploadedIconFile.Size);
            iconPreviewUrl = $"data:{uploadedIconFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
            
            Console.WriteLine($"Icon selected for upload: {uploadedIconFile.Name}, Size: {uploadedIconFile.Size} bytes, Type: {uploadedIconFile.ContentType}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling icon upload: {ex.Message}");
            errorMessage = $"Error processing icon file: {ex.Message}";
            uploadedIconFile = null;
            iconPreviewUrl = null;
        }
        finally
        {
            isUploadingIcon = false;
        }
    }

    private void HandleInvalidSubmit()
    {
        errorMessage = "❌ Form validation failed. Please check all required fields.";
        Console.WriteLine("🚨 Form validation failed - invalid submit detected");
    }
}
