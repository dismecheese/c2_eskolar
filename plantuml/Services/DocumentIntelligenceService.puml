@startuml
class ExtractedInstitutionIdData {
    + AdminFirstName : string? <<get>> <<set>>
    + AdminMiddleName : string? <<get>> <<set>>
    + AdminLastName : string? <<get>> <<set>>
    + AdminEmail : string? <<get>> <<set>>
    + AdminContactNumber : string? <<get>> <<set>>
    + AdminPosition : string? <<get>> <<set>>
    + InstitutionalEmailDomain : string? <<get>> <<set>>
    + Sex : string? <<get>> <<set>>
}
class ExtractedInstitutionAuthLetterData {
    + InstitutionName : string? <<get>> <<set>>
    + InstitutionType : string? <<get>> <<set>>
    + Address : string? <<get>> <<set>>
    + ContactNumber : string? <<get>> <<set>>
    + Website : string? <<get>> <<set>>
    + Description : string? <<get>> <<set>>
    + DeanName : string? <<get>> <<set>>
    + DeanEmail : string? <<get>> <<set>>
    + InstitutionalEmailDomain : string? <<get>> <<set>>
}
class ExtractedBenefactorIdData {
    + AdminFirstName : string? <<get>> <<set>>
    + AdminMiddleName : string? <<get>> <<set>>
    + AdminLastName : string? <<get>> <<set>>
    + AdminEmail : string? <<get>> <<set>>
    + AdminContactNumber : string? <<get>> <<set>>
    + AdminPosition : string? <<get>> <<set>>
    + Sex : string? <<get>> <<set>>
    + Nationality : string? <<get>> <<set>>
}
class ExtractedBenefactorAuthLetterData {
    + OrganizationName : string? <<get>> <<set>>
    + OrganizationType : string? <<get>> <<set>>
    + Address : string? <<get>> <<set>>
    + ContactNumber : string? <<get>> <<set>>
    + Website : string? <<get>> <<set>>
    + AuthorizedRepresentativeName : string? <<get>> <<set>>
    + AuthorizedRepresentativeEmail : string? <<get>> <<set>>
    + OfficialEmailDomain : string? <<get>> <<set>>
}
class ExtractedIdData {
    + FirstName : string? <<get>> <<set>>
    + MiddleName : string? <<get>> <<set>>
    + LastName : string? <<get>> <<set>>
    + Sex : string? <<get>> <<set>>
    + Address : string? <<get>> <<set>>
    + DocumentNumber : string? <<get>> <<set>>
    + Nationality : string? <<get>> <<set>>
}
class ExtractedCorData {
    + StudentNumber : string? <<get>> <<set>>
    + StudentName : string? <<get>> <<set>>
    + Program : string? <<get>> <<set>>
    + University : string? <<get>> <<set>>
    + YearLevel : string? <<get>> <<set>>
    + Address : string? <<get>> <<set>>
}
class DocumentIntelligenceResponse {
}
class AnalyzeResult {
    + Content : string? <<get>> <<set>>
}
class Document {
    + DocType : string? <<get>> <<set>>
}
class Field {
    + Type : string? <<get>> <<set>>
    + Content : string? <<get>> <<set>>
    + ValueString : string? <<get>> <<set>>
    + ValueDate : string? <<get>> <<set>>
}
class Address {
    + StreetAddress : string? <<get>> <<set>>
    + Municipality : string? <<get>> <<set>>
    + State : string? <<get>> <<set>>
    + CountryRegion : string? <<get>> <<set>>
    + PostalCode : string? <<get>> <<set>>
}
class DocumentIntelligenceService {
    + <<async>> AnalyzeInstitutionIdDocumentAsync(file:IBrowserFile) : Task<ExtractedInstitutionIdData?>
    + <<async>> AnalyzeBenefactorIdDocumentAsync(file:IBrowserFile) : Task<ExtractedBenefactorIdData?>
    + <<async>> AnalyzeBenefactorAuthLetterAsync(file:IBrowserFile) : Task<ExtractedBenefactorAuthLetterData?>
    + <<async>> AnalyzeInstitutionAuthLetterAsync(file:IBrowserFile) : Task<ExtractedInstitutionAuthLetterData?>
    + DocumentIntelligenceService(httpClient:HttpClient, config:IConfiguration, logger:ILogger<DocumentIntelligenceService>, openAIService:OpenAIService)
    + <<async>> AnalyzeIdDocumentAsync(file:IBrowserFile) : Task<ExtractedIdData?>
    + <<async>> AnalyzeCorDocumentAsync(file:IBrowserFile) : Task<ExtractedCorData?>
}
ExtractedInstitutionIdData --> "DateOfBirth" DateTime
ExtractedBenefactorIdData --> "DateOfBirth" DateTime
ExtractedIdData --> "DateOfBirth" DateTime
DocumentIntelligenceResponse --> "AnalyzeResult" AnalyzeResult
Document --> "Fields<string,Field>" "Dictionary`2"
Field --> "ValueAddress" Address
@enduml
