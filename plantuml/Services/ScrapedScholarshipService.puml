@startuml
interface IScrapedScholarshipService {
}
class ScrapedScholarshipService {
    + ScrapedScholarshipService(contextFactory:IDbContextFactory<ApplicationDbContext>, logger:ILogger<ScrapedScholarshipService>)
    + <<async>> GetAllAsync() : Task<IEnumerable<ScrapedScholarshipEntity>>
    + <<async>> GetByIdAsync(id:string) : Task<ScrapedScholarshipEntity?>
    + <<async>> GetByStatusAsync(status:ScrapingStatus) : Task<IEnumerable<ScrapedScholarshipEntity>>
    + <<async>> GetRecentAsync(days:int) : Task<IEnumerable<ScrapedScholarshipEntity>>
    + <<async>> GetStatisticsAsync() : Task<ScrapedScholarshipStatistics>
    + <<async>> CreateAsync(scholarship:ScrapedScholarshipEntity) : Task<ScrapedScholarshipEntity>
    + <<async>> UpdateAsync(scholarship:ScrapedScholarshipEntity) : Task<ScrapedScholarshipEntity>
    + <<async>> DeleteAsync(id:string) : Task<bool>
    + <<async>> ApproveAsync(id:string, approvedBy:string, notes:string?) : Task<bool>
    + <<async>> RejectAsync(id:string, rejectedBy:string, notes:string?) : Task<bool>
    + <<async>> BulkOperationAsync(request:BulkOperationRequest) : Task<BulkOperationResult>
    + <<async>> PublishToMainSystemAsync(id:string) : Task<bool>
    + <<async>> SearchAsync(criteria:ScholarshipSearchCriteria) : Task<IEnumerable<ScrapedScholarshipEntity>>
    + <<async>> CreateFromEnhancedAsync(enhanced:EnhancedScrapedScholarship, createdBy:string?) : Task<ScrapedScholarshipEntity>
    + <<async>> CreateBatchFromEnhancedAsync(enhanced:List<EnhancedScrapedScholarship>, createdBy:string?) : Task<List<ScrapedScholarshipEntity>>
    + ConvertFromEnhanced(enhanced:EnhancedScrapedScholarship) : ScrapedScholarshipEntity
    + ConvertToEnhanced(entity:ScrapedScholarshipEntity) : EnhancedScrapedScholarship
    + <<async>> AddImageAsync(scholarshipId:string, imageUrl:string, imageType:string?) : Task<bool>
    + <<async>> UpdateImageAsync(scholarshipId:string, imageUrl:string) : Task<bool>
    + <<async>> GetImagesAsync(scholarshipId:string) : Task<List<string>>
    + <<async>> DeleteImageAsync(scholarshipId:string, imageUrl:string) : Task<bool>
    + <<async>> GetDashboardMetricsAsync() : Task<DashboardMetrics>
    + <<async>> GetSourcePerformanceAsync() : Task<List<SourcePerformance>>
    + <<async>> GetConfidenceDistributionAsync() : Task<ConfidenceDistribution>
    + <<async>> DetectDuplicatesAsync() : Task<List<DuplicateMatch>>
    + <<async>> AutoCategorizeAsync(scholarshipId:string) : Task<string>
    + <<async>> GetCategoriesAsync() : Task<List<string>>
    + <<async>> AssignCategoryAsync(scholarshipId:string, category:string) : Task<bool>
}
class ScrapedScholarshipStatistics {
    + TotalScraped : int <<get>> <<set>>
    + TodayScraped : int <<get>> <<set>>
    + ThisWeekScraped : int <<get>> <<set>>
    + PendingReview : int <<get>> <<set>>
    + Approved : int <<get>> <<set>>
    + Published : int <<get>> <<set>>
    + Rejected : int <<get>> <<set>>
    + Enhanced : int <<get>> <<set>>
    + AverageConfidence : double <<get>> <<set>>
}
class BulkOperationRequest {
    + OperationType : string <<get>> <<set>> = ""
    + ExecutedBy : string <<get>> <<set>> = ""
    + Notes : string? <<get>> <<set>>
}
class BulkOperationResult {
    + OperationType : string <<get>> <<set>> = ""
    + TotalItems : int <<get>> <<set>>
    + SuccessfulItems : int <<get>> <<set>>
    + FailedItems : int <<get>> <<set>>
}
class ScholarshipSearchCriteria {
    + SearchText : string? <<get>> <<set>>
    + MinConfidence : double? <<get>> <<set>>
    + IsEnhanced : bool? <<get>> <<set>>
    + SourceUrl : string? <<get>> <<set>>
    + MaxResults : int? <<get>> <<set>> = 1000
}
class DashboardMetrics {
    + TotalScholarships : int <<get>> <<set>>
    + TodayScraped : int <<get>> <<set>>
    + WeeklyGrowth : double <<get>> <<set>>
    + AverageConfidence : double <<get>> <<set>>
}
class SourcePerformance {
    + SourceUrl : string <<get>> <<set>> = ""
    + TotalScraped : int <<get>> <<set>>
    + AverageConfidence : double <<get>> <<set>>
    + ApprovedCount : int <<get>> <<set>>
}
class ConfidenceDistribution {
    + High : int <<get>> <<set>>
    + Medium : int <<get>> <<set>>
    + Low : int <<get>> <<set>>
    + Total : int <<get>> <<set>>
}
class DuplicateMatch {
    + Scholarship1Id : string <<get>> <<set>> = ""
    + Scholarship2Id : string <<get>> <<set>> = ""
    + SimilarityScore : double <<get>> <<set>>
    + MatchType : string <<get>> <<set>> = ""
}
class "List`1"<T> {
}
IScrapedScholarshipService <|-- ScrapedScholarshipService
ScrapedScholarshipStatistics o-> "TopSources<string>" "List`1"
BulkOperationRequest o-> "ScholarshipIds<string>" "List`1"
BulkOperationResult --> "StartedAt" DateTime
BulkOperationResult --> "CompletedAt" DateTime
BulkOperationResult o-> "ProcessedIds<string>" "List`1"
BulkOperationResult o-> "FailedIds<string>" "List`1"
BulkOperationResult o-> "Errors<string>" "List`1"
ScholarshipSearchCriteria --> "Status" ScrapingStatus
ScholarshipSearchCriteria --> "ScrapedAfter" DateTime
ScholarshipSearchCriteria --> "ScrapedBefore" DateTime
DashboardMetrics o-> "TopPerformingSources<string>" "List`1"
DashboardMetrics o-> "RecentActivity<string>" "List`1"
SourcePerformance --> "LastScrapedAt" DateTime
@enduml
