@startuml
class AnnouncementService {
    + AnnouncementService(contextFactory:IDbContextFactory<ApplicationDbContext>)
    + <<async>> GetPublicAnnouncementsAsync() : Task<List<Announcement>>
    + <<async>> GetActiveAnnouncementsAsync() : Task<List<Announcement>>
    + <<async>> GetAllAnnouncementsAsync() : Task<List<Announcement>>
    + <<async>> SearchAnnouncementsAsync(searchTerm:string) : Task<List<Announcement>>
    + <<async>> GetAnnouncementsByCategoryAsync(category:string) : Task<List<Announcement>>
    + <<async>> GetAnnouncementsByAuthorAsync(authorId:string) : Task<List<Announcement>>
    + <<async>> GetAnnouncementsByAuthorTypeAsync(authorType:string) : Task<List<Announcement>>
    + <<async>> GetAnnouncementByIdAsync(id:Guid) : Task<Announcement?>
    + <<async>> CreateAnnouncementAsync(announcement:Announcement) : Task<Announcement>
    + <<async>> UpdateAnnouncementAsync(id:Guid, updatedAnnouncement:Announcement) : Task<Announcement?>
    + <<async>> UpdateAnnouncementAsync(updatedAnnouncement:Announcement) : Task<Announcement?>
    + <<async>> DeleteAnnouncementAsync(id:Guid, authorId:string) : Task<bool>
    + <<async>> DeleteAnnouncementAsync(id:Guid) : Task<bool>
    + <<async>> TogglePinAsync(id:Guid, authorId:string) : Task<bool>
    + <<async>> IncrementViewCountAsync(id:Guid) : Task
    + <<async>> CanUserManageAnnouncementAsync(announcementId:Guid, userId:string) : Task<bool>
    + <<async>> ToggleActiveAsync(id:Guid, authorId:string) : Task<bool>
    + <<async>> AddPhotosToAnnouncementAsync(announcementId:Guid, photoUrls:List<string>) : Task
    + <<async>> RemovePhotoFromAnnouncementAsync(photoId:Guid) : Task<bool>
    + <<async>> GetAnnouncementPhotosAsync(announcementId:Guid) : Task<List<Photo>>
    + <<async>> GetAnnouncementWithPhotosAsync(id:Guid) : Task<Announcement?>
    + <<async>> GetAllAnnouncementsWithPhotosAsync() : Task<List<Announcement>>
    + <<async>> FixDoubleEncodedUrlsAsync() : Task
}
@enduml
